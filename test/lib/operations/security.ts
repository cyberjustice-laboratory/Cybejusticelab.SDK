/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/securityMappers";
import * as Parameters from "../models/parameters";
import { CyberjusticeAPIsContext } from "../cyberjusticeAPIsContext";

/** Class representing a Security. */
export class Security {
  private readonly client: CyberjusticeAPIsContext;

  /**
   * Create a Security.
   * @param {CyberjusticeAPIsContext} client Reference to the service client.
   */
  constructor(client: CyberjusticeAPIsContext) {
    this.client = client;
  }

  /**
   * @summary Return the PredicateData object corresponding to the input id.
   * @param id Id of the predicate.
   * @param [options] The optional parameters
   * @returns Promise<Models.SecurityGetPredicateResponse>
   */
  getPredicate(id: string, options?: msRest.RequestOptionsBase): Promise<Models.SecurityGetPredicateResponse>;
  /**
   * @param id Id of the predicate.
   * @param callback The callback
   */
  getPredicate(id: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsSecurityPredicateData>): void;
  /**
   * @param id Id of the predicate.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPredicate(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsSecurityPredicateData>): void;
  getPredicate(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsSecurityPredicateData>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsSecurityPredicateData>): Promise<Models.SecurityGetPredicateResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getPredicateOperationSpec,
      callback) as Promise<Models.SecurityGetPredicateResponse>;
  }

  /**
   * @summary Retrieve a requested predicate Id from a predicate name.
   * @param name The name of the predicate.
   * @param [options] The optional parameters
   * @returns Promise<Models.SecurityGetPredicateIdByNameResponse>
   */
  getPredicateIdByName(name: string, options?: msRest.RequestOptionsBase): Promise<Models.SecurityGetPredicateIdByNameResponse>;
  /**
   * @param name The name of the predicate.
   * @param callback The callback
   */
  getPredicateIdByName(name: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name The name of the predicate.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPredicateIdByName(name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  getPredicateIdByName(name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.SecurityGetPredicateIdByNameResponse> {
    return this.client.sendOperationRequest(
      {
        name,
        options
      },
      getPredicateIdByNameOperationSpec,
      callback) as Promise<Models.SecurityGetPredicateIdByNameResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getPredicateOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Security/GET/Predicate",
  queryParameters: [
    Parameters.id1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelServiceContractsSecurityPredicateData
    },
    default: {}
  },
  serializer
};

const getPredicateIdByNameOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Security/GET/PredicateIdByName",
  queryParameters: [
    Parameters.name
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    default: {}
  },
  serializer
};
