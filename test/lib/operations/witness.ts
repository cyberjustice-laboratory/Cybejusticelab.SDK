/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/witnessMappers";
import * as Parameters from "../models/parameters";
import { CyberjusticeAPIsContext } from "../cyberjusticeAPIsContext";

/** Class representing a Witness. */
export class Witness {
  private readonly client: CyberjusticeAPIsContext;

  /**
   * Create a Witness.
   * @param {CyberjusticeAPIsContext} client Reference to the service client.
   */
  constructor(client: CyberjusticeAPIsContext) {
    this.client = client;
  }

  /**
   * @summary Delete a witness.
   * @param fileId file Id.
   * @param witnessId witness Id.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteWitness(fileId: string, witnessId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param fileId file Id.
   * @param witnessId witness Id.
   * @param callback The callback
   */
  deleteWitness(fileId: string, witnessId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param fileId file Id.
   * @param witnessId witness Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteWitness(fileId: string, witnessId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteWitness(fileId: string, witnessId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        fileId,
        witnessId,
        options
      },
      deleteWitnessOperationSpec,
      callback);
  }

  /**
   * @summary Delete a witness document.
   * @param documentId document Id.
   * @param witnessId witness Id.
   * @param fileId witness Id.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteWitnessDocument(documentId: string, witnessId: string, fileId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param documentId document Id.
   * @param witnessId witness Id.
   * @param fileId witness Id.
   * @param callback The callback
   */
  deleteWitnessDocument(documentId: string, witnessId: string, fileId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param documentId document Id.
   * @param witnessId witness Id.
   * @param fileId witness Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteWitnessDocument(documentId: string, witnessId: string, fileId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteWitnessDocument(documentId: string, witnessId: string, fileId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        documentId,
        witnessId,
        fileId,
        options
      },
      deleteWitnessDocumentOperationSpec,
      callback);
  }

  /**
   * @summary Retrieve all witnesses depending on the file id.
   * @param fileId Id of the file.
   * @param [options] The optional parameters
   * @returns Promise<Models.WitnessGetWitnessesResponse>
   */
  getWitnesses(fileId: string, options?: msRest.RequestOptionsBase): Promise<Models.WitnessGetWitnessesResponse>;
  /**
   * @param fileId Id of the file.
   * @param callback The callback
   */
  getWitnesses(fileId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsWitnessWitnessData[]>): void;
  /**
   * @param fileId Id of the file.
   * @param options The optional parameters
   * @param callback The callback
   */
  getWitnesses(fileId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsWitnessWitnessData[]>): void;
  getWitnesses(fileId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsWitnessWitnessData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsWitnessWitnessData[]>): Promise<Models.WitnessGetWitnessesResponse> {
    return this.client.sendOperationRequest(
      {
        fileId,
        options
      },
      getWitnessesOperationSpec,
      callback) as Promise<Models.WitnessGetWitnessesResponse>;
  }

  /**
   * @summary Get the list of witnesses in a file.
   * @param requestModel
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  getWitnesses1(requestModel: Models.CyberjusticeLabKernelSharedWitnessModelsWitnessApiRequestData, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param requestModel
   * @param callback The callback
   */
  getWitnesses1(requestModel: Models.CyberjusticeLabKernelSharedWitnessModelsWitnessApiRequestData, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param requestModel
   * @param options The optional parameters
   * @param callback The callback
   */
  getWitnesses1(requestModel: Models.CyberjusticeLabKernelSharedWitnessModelsWitnessApiRequestData, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getWitnesses1(requestModel: Models.CyberjusticeLabKernelSharedWitnessModelsWitnessApiRequestData, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        requestModel,
        options
      },
      getWitnesses1OperationSpec,
      callback);
  }

  /**
   * @summary Retrieve external witnesses link by file Id.
   * @param fileId File Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.WitnessGetExternalWitnessesLinkByFileIdResponse>
   */
  getExternalWitnessesLinkByFileId(fileId: string, options?: msRest.RequestOptionsBase): Promise<Models.WitnessGetExternalWitnessesLinkByFileIdResponse>;
  /**
   * @param fileId File Id.
   * @param callback The callback
   */
  getExternalWitnessesLinkByFileId(fileId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsWitnessJudicialFileExternalWitnessData[]>): void;
  /**
   * @param fileId File Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  getExternalWitnessesLinkByFileId(fileId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsWitnessJudicialFileExternalWitnessData[]>): void;
  getExternalWitnessesLinkByFileId(fileId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsWitnessJudicialFileExternalWitnessData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsWitnessJudicialFileExternalWitnessData[]>): Promise<Models.WitnessGetExternalWitnessesLinkByFileIdResponse> {
    return this.client.sendOperationRequest(
      {
        fileId,
        options
      },
      getExternalWitnessesLinkByFileIdOperationSpec,
      callback) as Promise<Models.WitnessGetExternalWitnessesLinkByFileIdResponse>;
  }

  /**
   * @summary Retrieve external witnesses link by witness Id.
   * @param witnessCode Witness code.
   * @param [options] The optional parameters
   * @returns Promise<Models.WitnessGetExternalWitnessesLinkByWitnessCodeResponse>
   */
  getExternalWitnessesLinkByWitnessCode(witnessCode: string, options?: msRest.RequestOptionsBase): Promise<Models.WitnessGetExternalWitnessesLinkByWitnessCodeResponse>;
  /**
   * @param witnessCode Witness code.
   * @param callback The callback
   */
  getExternalWitnessesLinkByWitnessCode(witnessCode: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsWitnessJudicialFileExternalWitnessData[]>): void;
  /**
   * @param witnessCode Witness code.
   * @param options The optional parameters
   * @param callback The callback
   */
  getExternalWitnessesLinkByWitnessCode(witnessCode: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsWitnessJudicialFileExternalWitnessData[]>): void;
  getExternalWitnessesLinkByWitnessCode(witnessCode: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsWitnessJudicialFileExternalWitnessData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsWitnessJudicialFileExternalWitnessData[]>): Promise<Models.WitnessGetExternalWitnessesLinkByWitnessCodeResponse> {
    return this.client.sendOperationRequest(
      {
        witnessCode,
        options
      },
      getExternalWitnessesLinkByWitnessCodeOperationSpec,
      callback) as Promise<Models.WitnessGetExternalWitnessesLinkByWitnessCodeResponse>;
  }

  /**
   * @summary Create a new witness.
   * @param witnessModel The witness info.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  createWitness(witnessModel: Models.CyberjusticeLabKernelSharedWitnessModelsCreateWitnessModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param witnessModel The witness info.
   * @param callback The callback
   */
  createWitness(witnessModel: Models.CyberjusticeLabKernelSharedWitnessModelsCreateWitnessModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param witnessModel The witness info.
   * @param options The optional parameters
   * @param callback The callback
   */
  createWitness(witnessModel: Models.CyberjusticeLabKernelSharedWitnessModelsCreateWitnessModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  createWitness(witnessModel: Models.CyberjusticeLabKernelSharedWitnessModelsCreateWitnessModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        witnessModel,
        options
      },
      createWitnessOperationSpec,
      callback);
  }

  /**
   * @summary Update witnesses attributes.
   * @param updateWitnessAttributesParameter The witness with attributes.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateWitnessAttributes(updateWitnessAttributesParameter: Models.CyberjusticeLabKernelSharedWitnessModelsUpdateWitnessAttributes, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param updateWitnessAttributesParameter The witness with attributes.
   * @param callback The callback
   */
  updateWitnessAttributes(updateWitnessAttributesParameter: Models.CyberjusticeLabKernelSharedWitnessModelsUpdateWitnessAttributes, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param updateWitnessAttributesParameter The witness with attributes.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateWitnessAttributes(updateWitnessAttributesParameter: Models.CyberjusticeLabKernelSharedWitnessModelsUpdateWitnessAttributes, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateWitnessAttributes(updateWitnessAttributesParameter: Models.CyberjusticeLabKernelSharedWitnessModelsUpdateWitnessAttributes, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        updateWitnessAttributesParameter,
        options
      },
      updateWitnessAttributesOperationSpec,
      callback);
  }

  /**
   * @summary Update witness.
   * @param updateWitnessParameter The witness infos.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateWitness(updateWitnessParameter: Models.CyberjusticeLabKernelSharedWitnessModelsUpdateWitnessModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param updateWitnessParameter The witness infos.
   * @param callback The callback
   */
  updateWitness(updateWitnessParameter: Models.CyberjusticeLabKernelSharedWitnessModelsUpdateWitnessModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param updateWitnessParameter The witness infos.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateWitness(updateWitnessParameter: Models.CyberjusticeLabKernelSharedWitnessModelsUpdateWitnessModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateWitness(updateWitnessParameter: Models.CyberjusticeLabKernelSharedWitnessModelsUpdateWitnessModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        updateWitnessParameter,
        options
      },
      updateWitnessOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const deleteWitnessOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "Witness/DELETE/DeleteWitness",
  queryParameters: [
    Parameters.fileId0,
    Parameters.witnessId
  ],
  responses: {
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const deleteWitnessDocumentOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "Witness/DELETE/DeleteWitnessDocument",
  queryParameters: [
    Parameters.documentId,
    Parameters.witnessId,
    Parameters.fileId0
  ],
  responses: {
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getWitnessesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Witness/GET/Witnesses",
  queryParameters: [
    Parameters.fileId0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsWitnessWitnessData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getWitnesses1OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Witness/POST/GetWitnesses",
  requestBody: {
    parameterPath: "requestModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedWitnessModelsWitnessApiRequestData,
      required: true
    }
  },
  responses: {
    404: {},
    default: {}
  },
  serializer
};

const getExternalWitnessesLinkByFileIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Witness/GET/ExternalWitnessesLinkByFileId",
  queryParameters: [
    Parameters.fileId0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsWitnessJudicialFileExternalWitnessData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getExternalWitnessesLinkByWitnessCodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Witness/GET/ExternalWitnessesLinkByWitnessCode",
  queryParameters: [
    Parameters.witnessCode
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsWitnessJudicialFileExternalWitnessData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const createWitnessOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Witness/POST/CreateWitness",
  requestBody: {
    parameterPath: "witnessModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedWitnessModelsCreateWitnessModel,
      required: true
    }
  },
  responses: {
    400: {},
    404: {},
    409: {},
    default: {}
  },
  serializer
};

const updateWitnessAttributesOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "Witness/PUT/UpdateWitnessAttributes",
  requestBody: {
    parameterPath: "updateWitnessAttributesParameter",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedWitnessModelsUpdateWitnessAttributes,
      required: true
    }
  },
  responses: {
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const updateWitnessOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "Witness/PUT/UpdateWitness",
  requestBody: {
    parameterPath: "updateWitnessParameter",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedWitnessModelsUpdateWitnessModel,
      required: true
    }
  },
  responses: {
    403: {},
    404: {},
    409: {},
    default: {}
  },
  serializer
};
