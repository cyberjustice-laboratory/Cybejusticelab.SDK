/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/requestMappers";
import * as Parameters from "../models/parameters";
import { CyberjusticeAPIsContext } from "../cyberjusticeAPIsContext";

/** Class representing a Request. */
export class Request {
  private readonly client: CyberjusticeAPIsContext;

  /**
   * Create a Request.
   * @param {CyberjusticeAPIsContext} client Reference to the service client.
   */
  constructor(client: CyberjusticeAPIsContext) {
    this.client = client;
  }

  /**
   * @summary Delete a request.
   * @param requestId The identifier of the request to be deleted.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteRequest(requestId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param requestId The identifier of the request to be deleted.
   * @param callback The callback
   */
  deleteRequest(requestId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param requestId The identifier of the request to be deleted.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRequest(requestId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteRequest(requestId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        requestId,
        options
      },
      deleteRequestOperationSpec,
      callback);
  }

  /**
   * @summary Get all requests.
   * @param [options] The optional parameters
   * @returns Promise<Models.RequestGetRequestsResponse>
   */
  getRequests(options?: msRest.RequestOptionsBase): Promise<Models.RequestGetRequestsResponse>;
  /**
   * @param callback The callback
   */
  getRequests(callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedRequestRequestData[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getRequests(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedRequestRequestData[]>): void;
  getRequests(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedRequestRequestData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedRequestRequestData[]>): Promise<Models.RequestGetRequestsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getRequestsOperationSpec,
      callback) as Promise<Models.RequestGetRequestsResponse>;
  }

  /**
   * @summary Get a specific request.
   * @param requestId The request identifier.
   * @param [options] The optional parameters
   * @returns Promise<Models.RequestGetRequestResponse>
   */
  getRequest(requestId: string, options?: msRest.RequestOptionsBase): Promise<Models.RequestGetRequestResponse>;
  /**
   * @param requestId The request identifier.
   * @param callback The callback
   */
  getRequest(requestId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedRequestRequestData>): void;
  /**
   * @param requestId The request identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  getRequest(requestId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedRequestRequestData>): void;
  getRequest(requestId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedRequestRequestData>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedRequestRequestData>): Promise<Models.RequestGetRequestResponse> {
    return this.client.sendOperationRequest(
      {
        requestId,
        options
      },
      getRequestOperationSpec,
      callback) as Promise<Models.RequestGetRequestResponse>;
  }

  /**
   * @summary Create a request.
   * @param request The new {CyberjusticeLab.Kernel.Shared.Request.RequestCreateData} request data.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  createRequest(request: Models.CyberjusticeLabKernelSharedRequestRequestCreateData, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param request The new {CyberjusticeLab.Kernel.Shared.Request.RequestCreateData} request data.
   * @param callback The callback
   */
  createRequest(request: Models.CyberjusticeLabKernelSharedRequestRequestCreateData, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param request The new {CyberjusticeLab.Kernel.Shared.Request.RequestCreateData} request data.
   * @param options The optional parameters
   * @param callback The callback
   */
  createRequest(request: Models.CyberjusticeLabKernelSharedRequestRequestCreateData, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  createRequest(request: Models.CyberjusticeLabKernelSharedRequestRequestCreateData, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        request,
        options
      },
      createRequestOperationSpec,
      callback);
  }

  /**
   * @summary Update a request.
   * @param request The updated {CyberjusticeLab.Kernel.Shared.Request.RequestUpdateData} request
   * data.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateRequest(request: Models.CyberjusticeLabKernelSharedRequestRequestUpdateData, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param request The updated {CyberjusticeLab.Kernel.Shared.Request.RequestUpdateData} request
   * data.
   * @param callback The callback
   */
  updateRequest(request: Models.CyberjusticeLabKernelSharedRequestRequestUpdateData, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param request The updated {CyberjusticeLab.Kernel.Shared.Request.RequestUpdateData} request
   * data.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateRequest(request: Models.CyberjusticeLabKernelSharedRequestRequestUpdateData, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateRequest(request: Models.CyberjusticeLabKernelSharedRequestRequestUpdateData, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        request,
        options
      },
      updateRequestOperationSpec,
      callback);
  }

  /**
   * @summary Update a request's attributes.
   * @param request The updated request data
   * {CyberjusticeLab.Kernel.Shared.Request.RequestUpdateAttributeData} with the attributes.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateRequestAttributes(request: Models.CyberjusticeLabKernelSharedRequestRequestUpdateAttributeData, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param request The updated request data
   * {CyberjusticeLab.Kernel.Shared.Request.RequestUpdateAttributeData} with the attributes.
   * @param callback The callback
   */
  updateRequestAttributes(request: Models.CyberjusticeLabKernelSharedRequestRequestUpdateAttributeData, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param request The updated request data
   * {CyberjusticeLab.Kernel.Shared.Request.RequestUpdateAttributeData} with the attributes.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateRequestAttributes(request: Models.CyberjusticeLabKernelSharedRequestRequestUpdateAttributeData, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateRequestAttributes(request: Models.CyberjusticeLabKernelSharedRequestRequestUpdateAttributeData, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        request,
        options
      },
      updateRequestAttributesOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const deleteRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "Request/DELETE/DeleteRequest",
  queryParameters: [
    Parameters.requestId
  ],
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const getRequestsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Request/GET/GetRequests",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelSharedRequestRequestData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Request/GET/GetRequest",
  queryParameters: [
    Parameters.requestId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelSharedRequestRequestData
    },
    default: {}
  },
  serializer
};

const createRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Request/POST/CreateRequest",
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedRequestRequestCreateData,
      required: true
    }
  },
  responses: {
    400: {},
    default: {}
  },
  serializer
};

const updateRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "Request/PUT/UpdateRequest",
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedRequestRequestUpdateData,
      required: true
    }
  },
  responses: {
    400: {},
    404: {},
    default: {}
  },
  serializer
};

const updateRequestAttributesOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "Request/PUT/UpdateRequestAttributes",
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedRequestRequestUpdateAttributeData,
      required: true
    }
  },
  responses: {
    404: {},
    default: {}
  },
  serializer
};
