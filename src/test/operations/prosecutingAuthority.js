/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/prosecutingAuthorityMappers";
import * as Parameters from "../models/parameters";
/** Class representing a ProsecutingAuthority. */
var ProsecutingAuthority = /** @class */ (function () {
    /**
     * Create a ProsecutingAuthority.
     * @param {CyberjusticeAPIsContext} client Reference to the service client.
     */
    function ProsecutingAuthority(client) {
        this.client = client;
    }
    ProsecutingAuthority.prototype.deleteProsecutingAuthority = function (id, modifiedTicks, options, callback) {
        return this.client.sendOperationRequest({
            id: id,
            modifiedTicks: modifiedTicks,
            options: options
        }, deleteProsecutingAuthorityOperationSpec, callback);
    };
    ProsecutingAuthority.prototype.deleteProsecutingAuthorityDelegation = function (authorityDelegation, modifiedTicks, options, callback) {
        return this.client.sendOperationRequest({
            authorityDelegation: authorityDelegation,
            modifiedTicks: modifiedTicks,
            options: options
        }, deleteProsecutingAuthorityDelegationOperationSpec, callback);
    };
    ProsecutingAuthority.prototype.getProsecutingAuthorities = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getProsecutingAuthoritiesOperationSpec, callback);
    };
    ProsecutingAuthority.prototype.getProsecutingAuthoritiesCount = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getProsecutingAuthoritiesCountOperationSpec, callback);
    };
    ProsecutingAuthority.prototype.updateProsecutingAuthority = function (authority, options, callback) {
        return this.client.sendOperationRequest({
            authority: authority,
            options: options
        }, updateProsecutingAuthorityOperationSpec, callback);
    };
    ProsecutingAuthority.prototype.createProsecutingAuthority = function (authority, options, callback) {
        return this.client.sendOperationRequest({
            authority: authority,
            options: options
        }, createProsecutingAuthorityOperationSpec, callback);
    };
    ProsecutingAuthority.prototype.createProsecutingAuthorityDelegation = function (authorityDelegation, options, callback) {
        return this.client.sendOperationRequest({
            authorityDelegation: authorityDelegation,
            options: options
        }, createProsecutingAuthorityDelegationOperationSpec, callback);
    };
    return ProsecutingAuthority;
}());
export { ProsecutingAuthority };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var deleteProsecutingAuthorityOperationSpec = {
    httpMethod: "DELETE",
    path: "ProsecutingAuthority/DELETE/DeleteProsecutingAuthority",
    queryParameters: [
        Parameters.id0,
        Parameters.modifiedTicks
    ],
    responses: {
        204: {},
        default: {}
    },
    serializer: serializer
};
var deleteProsecutingAuthorityDelegationOperationSpec = {
    httpMethod: "DELETE",
    path: "ProsecutingAuthority/DELETE/DeleteProsecutingAuthorityDelegation",
    queryParameters: [
        Parameters.modifiedTicks
    ],
    requestBody: {
        parameterPath: "authorityDelegation",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityDelegationDeleteData, { required: true })
    },
    responses: {
        400: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getProsecutingAuthoritiesOperationSpec = {
    httpMethod: "GET",
    path: "ProsecutingAuthority/GET/ProsecutingAuthorities",
    queryParameters: [
        Parameters.prosecutingAuthorityIds,
        Parameters.excludedProsecutingAuthorityIds,
        Parameters.prosecutingAuthorityNames
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityData"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getProsecutingAuthoritiesCountOperationSpec = {
    httpMethod: "GET",
    path: "ProsecutingAuthority/GET/ProsecutingAuthoritiesCount",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Number"
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var updateProsecutingAuthorityOperationSpec = {
    httpMethod: "PUT",
    path: "ProsecutingAuthority/PUT/UpdateProsecutingAuthority",
    requestBody: {
        parameterPath: "authority",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityUpdateData, { required: true })
    },
    responses: {
        400: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var createProsecutingAuthorityOperationSpec = {
    httpMethod: "POST",
    path: "ProsecutingAuthority/POST/CreateProsecutingAuthority",
    requestBody: {
        parameterPath: "authority",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityCreateData, { required: true })
    },
    responses: {
        400: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var createProsecutingAuthorityDelegationOperationSpec = {
    httpMethod: "POST",
    path: "ProsecutingAuthority/POST/CreateProsecutingAuthorityDelegation",
    requestBody: {
        parameterPath: "authorityDelegation",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityDelegationCreateData, { required: true })
    },
    responses: {
        400: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
//# sourceMappingURL=prosecutingAuthority.js.map