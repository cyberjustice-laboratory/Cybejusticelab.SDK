/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/tagMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Tag. */
var Tag = /** @class */ (function () {
    /**
     * Create a Tag.
     * @param {CyberjusticeAPIsContext} client Reference to the service client.
     */
    function Tag(client) {
        this.client = client;
    }
    Tag.prototype.getLabelsOfCurrentUser = function (cultureCode, labelSection, judicialEntityId, options, callback) {
        return this.client.sendOperationRequest({
            cultureCode: cultureCode,
            labelSection: labelSection,
            judicialEntityId: judicialEntityId,
            options: options
        }, getLabelsOfCurrentUserOperationSpec, callback);
    };
    Tag.prototype.getTagsOfCodes = function (codes, options, callback) {
        return this.client.sendOperationRequest({
            codes: codes,
            options: options
        }, getTagsOfCodesOperationSpec, callback);
    };
    Tag.prototype.getTags = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getTagsOperationSpec, callback);
    };
    Tag.prototype.getTag = function (key, options, callback) {
        return this.client.sendOperationRequest({
            key: key,
            options: options
        }, getTagOperationSpec, callback);
    };
    Tag.prototype.getTagLinks = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getTagLinksOperationSpec, callback);
    };
    Tag.prototype.getTagLink = function (tagId, code, options, callback) {
        return this.client.sendOperationRequest({
            tagId: tagId,
            code: code,
            options: options
        }, getTagLinkOperationSpec, callback);
    };
    Tag.prototype.getLabels = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getLabelsOperationSpec, callback);
    };
    Tag.prototype.getLabel = function (labelId, options, callback) {
        return this.client.sendOperationRequest({
            labelId: labelId,
            options: options
        }, getLabelOperationSpec, callback);
    };
    Tag.prototype.updateTagLink = function (tagLink, options, callback) {
        return this.client.sendOperationRequest({
            tagLink: tagLink,
            options: options
        }, updateTagLinkOperationSpec, callback);
    };
    Tag.prototype.updateLabel = function (label, options, callback) {
        return this.client.sendOperationRequest({
            label: label,
            options: options
        }, updateLabelOperationSpec, callback);
    };
    Tag.prototype.createTagLink = function (tagLink, options, callback) {
        return this.client.sendOperationRequest({
            tagLink: tagLink,
            options: options
        }, createTagLinkOperationSpec, callback);
    };
    Tag.prototype.createLabel = function (label, options, callback) {
        return this.client.sendOperationRequest({
            label: label,
            options: options
        }, createLabelOperationSpec, callback);
    };
    Tag.prototype.createTagLabelLink = function (tagId, labelId, options, callback) {
        return this.client.sendOperationRequest({
            tagId: tagId,
            labelId: labelId,
            options: options
        }, createTagLabelLinkOperationSpec, callback);
    };
    Tag.prototype.createLabelRoleLink = function (labelId, roleCode, options, callback) {
        return this.client.sendOperationRequest({
            labelId: labelId,
            roleCode: roleCode,
            options: options
        }, createLabelRoleLinkOperationSpec, callback);
    };
    Tag.prototype.deleteTagLink = function (objectCode, tagId, options, callback) {
        return this.client.sendOperationRequest({
            objectCode: objectCode,
            tagId: tagId,
            options: options
        }, deleteTagLinkOperationSpec, callback);
    };
    Tag.prototype.deleteLabel = function (labelId, options, callback) {
        return this.client.sendOperationRequest({
            labelId: labelId,
            options: options
        }, deleteLabelOperationSpec, callback);
    };
    Tag.prototype.deleteTagLabelLink = function (tagId, labelId, options, callback) {
        return this.client.sendOperationRequest({
            tagId: tagId,
            labelId: labelId,
            options: options
        }, deleteTagLabelLinkOperationSpec, callback);
    };
    Tag.prototype.deleteLabelRoleLink = function (labelId, roleCode, options, callback) {
        return this.client.sendOperationRequest({
            labelId: labelId,
            roleCode: roleCode,
            options: options
        }, deleteLabelRoleLinkOperationSpec, callback);
    };
    return Tag;
}());
export { Tag };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getLabelsOfCurrentUserOperationSpec = {
    httpMethod: "GET",
    path: "Tag/GET/LabelsOfCurrentUser",
    queryParameters: [
        Parameters.cultureCode,
        Parameters.labelSection,
        Parameters.judicialEntityId1
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelSharedTagLocalizedLabelData"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getTagsOfCodesOperationSpec = {
    httpMethod: "GET",
    path: "Tag/GET/TagsOfCodes",
    queryParameters: [
        Parameters.codes0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelSharedTagTagLinkData"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getTagsOperationSpec = {
    httpMethod: "GET",
    path: "Tag/GET/Tags",
    queryParameters: [
        Parameters.tagCodes
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelSharedTagTagData"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getTagOperationSpec = {
    httpMethod: "GET",
    path: "Tag/GET/Tag",
    queryParameters: [
        Parameters.key
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelSharedTagTagData
        },
        default: {}
    },
    serializer: serializer
};
var getTagLinksOperationSpec = {
    httpMethod: "GET",
    path: "Tag/GET/TagLinks",
    queryParameters: [
        Parameters.codes1
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelSharedTagTagLinkData"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getTagLinkOperationSpec = {
    httpMethod: "GET",
    path: "Tag/GET/TagLink",
    queryParameters: [
        Parameters.tagId,
        Parameters.code
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelSharedTagTagLinkData
        },
        default: {}
    },
    serializer: serializer
};
var getLabelsOperationSpec = {
    httpMethod: "GET",
    path: "Tag/GET/Labels",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelSharedTagLabelData"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getLabelOperationSpec = {
    httpMethod: "GET",
    path: "Tag/GET/Label",
    queryParameters: [
        Parameters.labelId1
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelSharedTagLabelData
        },
        default: {}
    },
    serializer: serializer
};
var updateTagLinkOperationSpec = {
    httpMethod: "PUT",
    path: "Tag/PUT/UpdateTagLink",
    requestBody: {
        parameterPath: "tagLink",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedTagTagLinkUpdateData, { required: true })
    },
    responses: {
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var updateLabelOperationSpec = {
    httpMethod: "PUT",
    path: "Tag/PUT/UpdateLabel",
    requestBody: {
        parameterPath: "label",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedTagLabelUpdateData, { required: true })
    },
    responses: {
        404: {},
        default: {}
    },
    serializer: serializer
};
var createTagLinkOperationSpec = {
    httpMethod: "POST",
    path: "Tag/POST/CreateTagLink",
    requestBody: {
        parameterPath: "tagLink",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedTagTagLinkCreateData, { required: true })
    },
    responses: {
        400: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var createLabelOperationSpec = {
    httpMethod: "POST",
    path: "Tag/POST/CreateLabel",
    requestBody: {
        parameterPath: "label",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedTagLabelCreateData, { required: true })
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var createTagLabelLinkOperationSpec = {
    httpMethod: "POST",
    path: "Tag/POST/CreateTagLabelLink",
    queryParameters: [
        Parameters.tagId,
        Parameters.labelId1
    ],
    responses: {
        404: {},
        default: {}
    },
    serializer: serializer
};
var createLabelRoleLinkOperationSpec = {
    httpMethod: "POST",
    path: "Tag/POST/CreateLabelRoleLink",
    queryParameters: [
        Parameters.labelId1,
        Parameters.roleCode
    ],
    responses: {
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var deleteTagLinkOperationSpec = {
    httpMethod: "DELETE",
    path: "Tag/DELETE/DeleteTagLink",
    queryParameters: [
        Parameters.objectCode,
        Parameters.tagId
    ],
    responses: {
        404: {},
        default: {}
    },
    serializer: serializer
};
var deleteLabelOperationSpec = {
    httpMethod: "DELETE",
    path: "Tag/DELETE/DeleteLabel",
    queryParameters: [
        Parameters.labelId1
    ],
    responses: {
        404: {},
        default: {}
    },
    serializer: serializer
};
var deleteTagLabelLinkOperationSpec = {
    httpMethod: "DELETE",
    path: "Tag/DELETE/DeleteTagLabelLink",
    queryParameters: [
        Parameters.tagId,
        Parameters.labelId1
    ],
    responses: {
        204: {},
        default: {}
    },
    serializer: serializer
};
var deleteLabelRoleLinkOperationSpec = {
    httpMethod: "DELETE",
    path: "Tag/DELETE/DeleteLabelRoleLink",
    queryParameters: [
        Parameters.labelId1,
        Parameters.roleCode
    ],
    responses: {
        204: {},
        default: {}
    },
    serializer: serializer
};
//# sourceMappingURL=tag.js.map