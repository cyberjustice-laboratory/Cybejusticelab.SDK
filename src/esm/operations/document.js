/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/documentMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Document. */
var Document = /** @class */ (function () {
    /**
     * Create a Document.
     * @param {CyberjusticeAPIsContext} client Reference to the service client.
     */
    function Document(client) {
        this.client = client;
    }
    Document.prototype.deleteDocument = function (documentId, fileId, currentVersion, options, callback) {
        return this.client.sendOperationRequest({
            documentId: documentId,
            fileId: fileId,
            currentVersion: currentVersion,
            options: options
        }, deleteDocumentOperationSpec, callback);
    };
    Document.prototype.deleteDocumentAttributes = function (documentId, options, callback) {
        return this.client.sendOperationRequest({
            documentId: documentId,
            options: options
        }, deleteDocumentAttributesOperationSpec, callback);
    };
    Document.prototype.getDocumentsMetadata = function (fileId, options, callback) {
        return this.client.sendOperationRequest({
            fileId: fileId,
            options: options
        }, getDocumentsMetadataOperationSpec, callback);
    };
    Document.prototype.getDocumentMetadata = function (documentId, options, callback) {
        return this.client.sendOperationRequest({
            documentId: documentId,
            options: options
        }, getDocumentMetadataOperationSpec, callback);
    };
    Document.prototype.getDocumentContentById = function (fileId, documentId, options, callback) {
        return this.client.sendOperationRequest({
            fileId: fileId,
            documentId: documentId,
            options: options
        }, getDocumentContentByIdOperationSpec, callback);
    };
    Document.prototype.getDocuments = function (requestModel, options, callback) {
        return this.client.sendOperationRequest({
            requestModel: requestModel,
            options: options
        }, getDocumentsOperationSpec, callback);
    };
    Document.prototype.createDocument = function (documentModel, options, callback) {
        return this.client.sendOperationRequest({
            documentModel: documentModel,
            options: options
        }, createDocumentOperationSpec, callback);
    };
    Document.prototype.createDocuments = function (documentModels, options, callback) {
        return this.client.sendOperationRequest({
            documentModels: documentModels,
            options: options
        }, createDocumentsOperationSpec, callback);
    };
    Document.prototype.updateDocumentContent = function (model, options, callback) {
        return this.client.sendOperationRequest({
            model: model,
            options: options
        }, updateDocumentContentOperationSpec, callback);
    };
    Document.prototype.updateDocumentMetadata = function (model, options, callback) {
        return this.client.sendOperationRequest({
            model: model,
            options: options
        }, updateDocumentMetadataOperationSpec, callback);
    };
    Document.prototype.updateDocumentAttributes = function (attributes, options, callback) {
        return this.client.sendOperationRequest({
            attributes: attributes,
            options: options
        }, updateDocumentAttributesOperationSpec, callback);
    };
    Document.prototype.updateDocumentPartyActions = function (model, options, callback) {
        return this.client.sendOperationRequest({
            model: model,
            options: options
        }, updateDocumentPartyActionsOperationSpec, callback);
    };
    return Document;
}());
export { Document };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var deleteDocumentOperationSpec = {
    httpMethod: "DELETE",
    path: "Document/DELETE/DeleteDocument",
    queryParameters: [
        Parameters.documentId,
        Parameters.fileId0,
        Parameters.currentVersion
    ],
    responses: {
        200: {},
        403: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var deleteDocumentAttributesOperationSpec = {
    httpMethod: "DELETE",
    path: "Document/DELETE/DeleteDocumentAttributes",
    queryParameters: [
        Parameters.documentId
    ],
    responses: {
        200: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getDocumentsMetadataOperationSpec = {
    httpMethod: "GET",
    path: "Document/GET/DocumentsMetadata",
    queryParameters: [
        Parameters.fileId0,
        Parameters.titles
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelServiceContractsDocumentDocumentData"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getDocumentMetadataOperationSpec = {
    httpMethod: "GET",
    path: "Document/GET/DocumentMetadata",
    queryParameters: [
        Parameters.documentId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelServiceContractsDocumentDocumentData
        },
        default: {}
    },
    serializer: serializer
};
var getDocumentContentByIdOperationSpec = {
    httpMethod: "GET",
    path: "Document/GET/DocumentContent",
    queryParameters: [
        Parameters.fileId0,
        Parameters.documentId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "String"
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getDocumentsOperationSpec = {
    httpMethod: "POST",
    path: "Document/POST/Documents",
    requestBody: {
        parameterPath: "requestModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedDocumentModelsDocumentApiRequestData, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelSharedDocumentModelsDocumentApiResponseData
        },
        default: {}
    },
    serializer: serializer
};
var createDocumentOperationSpec = {
    httpMethod: "POST",
    path: "Document/POST/CreateDocument",
    requestBody: {
        parameterPath: "documentModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedDocumentModelsCreateDocumentModel, { required: true })
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        403: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var createDocumentsOperationSpec = {
    httpMethod: "POST",
    path: "Document/POST/CreateDocuments",
    requestBody: {
        parameterPath: "documentModels",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedDocumentModelsCreateDocumentsModel, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelSharedDocumentModelsCreateDocumentsResponseModel
        },
        400: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var updateDocumentContentOperationSpec = {
    httpMethod: "PUT",
    path: "Document/PUT/UpdateDocumentContent",
    requestBody: {
        parameterPath: "model",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedDocumentModelsUpdateDocumentContentModel, { required: true })
    },
    responses: {
        200: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updateDocumentMetadataOperationSpec = {
    httpMethod: "PUT",
    path: "Document/PUT/UpdateDocumentMetadata",
    requestBody: {
        parameterPath: "model",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedDocumentModelsUpdateDocumentMetadatasModel, { required: true })
    },
    responses: {
        200: {},
        403: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updateDocumentAttributesOperationSpec = {
    httpMethod: "PUT",
    path: "Document/PUT/UpdateDocumentAttributes",
    requestBody: {
        parameterPath: "attributes",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedDocumentModelsEditDocumentAttributeModel, { required: true })
    },
    responses: {
        200: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var updateDocumentPartyActionsOperationSpec = {
    httpMethod: "PUT",
    path: "Document/PUT/UpdateDocumentPartyActions",
    requestBody: {
        parameterPath: "model",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedDocumentModelsUpdateDocumentPartyActionsModel, { required: true })
    },
    responses: {
        200: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
//# sourceMappingURL=document.js.map