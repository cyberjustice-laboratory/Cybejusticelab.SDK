/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/locationMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Location. */
var Location = /** @class */ (function () {
    /**
     * Create a Location.
     * @param {CyberjusticeAPIsContext} client Reference to the service client.
     */
    function Location(client) {
        this.client = client;
    }
    Location.prototype.getBuildings = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getBuildingsOperationSpec, callback);
    };
    Location.prototype.getBuilding = function (buildingId, options, callback) {
        return this.client.sendOperationRequest({
            buildingId: buildingId,
            options: options
        }, getBuildingOperationSpec, callback);
    };
    Location.prototype.getBuildingWithRoom = function (roomId, options, callback) {
        return this.client.sendOperationRequest({
            roomId: roomId,
            options: options
        }, getBuildingWithRoomOperationSpec, callback);
    };
    Location.prototype.toggleBuildingStatus = function (buildingId, modifiedTicks, options, callback) {
        return this.client.sendOperationRequest({
            buildingId: buildingId,
            modifiedTicks: modifiedTicks,
            options: options
        }, toggleBuildingStatusOperationSpec, callback);
    };
    Location.prototype.toggleRoomStatus = function (roomId, modifiedTicks, options, callback) {
        return this.client.sendOperationRequest({
            roomId: roomId,
            modifiedTicks: modifiedTicks,
            options: options
        }, toggleRoomStatusOperationSpec, callback);
    };
    Location.prototype.updateBuilding = function (buildingData, options, callback) {
        return this.client.sendOperationRequest({
            buildingData: buildingData,
            options: options
        }, updateBuildingOperationSpec, callback);
    };
    Location.prototype.updateRoom = function (roomData, options, callback) {
        return this.client.sendOperationRequest({
            roomData: roomData,
            options: options
        }, updateRoomOperationSpec, callback);
    };
    Location.prototype.createBuilding = function (buildingData, options, callback) {
        return this.client.sendOperationRequest({
            buildingData: buildingData,
            options: options
        }, createBuildingOperationSpec, callback);
    };
    Location.prototype.createRoom = function (roomData, options, callback) {
        return this.client.sendOperationRequest({
            roomData: roomData,
            options: options
        }, createRoomOperationSpec, callback);
    };
    return Location;
}());
export { Location };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getBuildingsOperationSpec = {
    httpMethod: "GET",
    path: "Location/GET/Buildings",
    queryParameters: [
        Parameters.locationBuildingIds,
        Parameters.locationRoomIds,
        Parameters.judicialEntityIds,
        Parameters.names0,
        Parameters.activeOnly,
        Parameters.take0,
        Parameters.skip,
        Parameters.orderBy
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelSharedLocationLocationBuildingData"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getBuildingOperationSpec = {
    httpMethod: "GET",
    path: "Location/GET/Building",
    queryParameters: [
        Parameters.buildingId0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelSharedLocationLocationBuildingData
        },
        default: {}
    },
    serializer: serializer
};
var getBuildingWithRoomOperationSpec = {
    httpMethod: "GET",
    path: "Location/GET/BuildingWithRoom",
    queryParameters: [
        Parameters.roomId0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelSharedLocationLocationBuildingData
        },
        default: {}
    },
    serializer: serializer
};
var toggleBuildingStatusOperationSpec = {
    httpMethod: "PATCH",
    path: "Location/PATCH/ToggleBuildingStatus",
    queryParameters: [
        Parameters.buildingId1,
        Parameters.modifiedTicks
    ],
    responses: {
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var toggleRoomStatusOperationSpec = {
    httpMethod: "PATCH",
    path: "Location/PATCH/ToggleRoomStatus",
    queryParameters: [
        Parameters.roomId1,
        Parameters.modifiedTicks
    ],
    responses: {
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updateBuildingOperationSpec = {
    httpMethod: "PUT",
    path: "Location/PUT/UpdateBuilding",
    requestBody: {
        parameterPath: "buildingData",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedLocationLocationBuildingUpdateData, { required: true })
    },
    responses: {
        400: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updateRoomOperationSpec = {
    httpMethod: "PUT",
    path: "Location/PUT/UpdateRoom",
    requestBody: {
        parameterPath: "roomData",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedLocationLocationRoomUpdateData, { required: true })
    },
    responses: {
        400: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var createBuildingOperationSpec = {
    httpMethod: "POST",
    path: "Location/POST/CreateBuilding",
    requestBody: {
        parameterPath: "buildingData",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedLocationLocationBuildingCreateData, { required: true })
    },
    responses: {
        400: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var createRoomOperationSpec = {
    httpMethod: "POST",
    path: "Location/POST/CreateRoom",
    requestBody: {
        parameterPath: "roomData",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedLocationLocationRoomCreateData, { required: true })
    },
    responses: {
        400: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
//# sourceMappingURL=location.js.map