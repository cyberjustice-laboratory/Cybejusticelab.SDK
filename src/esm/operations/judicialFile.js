/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/judicialFileMappers";
import * as Parameters from "../models/parameters";
/** Class representing a JudicialFile. */
var JudicialFile = /** @class */ (function () {
    /**
     * Create a JudicialFile.
     * @param {CyberjusticeAPIsContext} client Reference to the service client.
     */
    function JudicialFile(client) {
        this.client = client;
    }
    JudicialFile.prototype.deleteParty = function (partyId, lastModified, options, callback) {
        return this.client.sendOperationRequest({
            partyId: partyId,
            lastModified: lastModified,
            options: options
        }, deletePartyOperationSpec, callback);
    };
    JudicialFile.prototype.detachRepresentativeFromParty = function (detachRepresentativeFromPartyModel, options, callback) {
        return this.client.sendOperationRequest({
            detachRepresentativeFromPartyModel: detachRepresentativeFromPartyModel,
            options: options
        }, detachRepresentativeFromPartyOperationSpec, callback);
    };
    JudicialFile.prototype.deletePartyInvitation = function (partyInvitationId, options, callback) {
        return this.client.sendOperationRequest({
            partyInvitationId: partyInvitationId,
            options: options
        }, deletePartyInvitationOperationSpec, callback);
    };
    JudicialFile.prototype.deleteFileInvitation = function (fileInvitationId, options, callback) {
        return this.client.sendOperationRequest({
            fileInvitationId: fileInvitationId,
            options: options
        }, deleteFileInvitationOperationSpec, callback);
    };
    JudicialFile.prototype.deleteFileTagLink = function (fileId, tagCode, modifiedTicks, options, callback) {
        return this.client.sendOperationRequest({
            fileId: fileId,
            tagCode: tagCode,
            modifiedTicks: modifiedTicks,
            options: options
        }, deleteFileTagLinkOperationSpec, callback);
    };
    JudicialFile.prototype.deleteNotification = function (notificationId, options, callback) {
        return this.client.sendOperationRequest({
            notificationId: notificationId,
            options: options
        }, deleteNotificationOperationSpec, callback);
    };
    JudicialFile.prototype.deleteCharge = function (chargeId, modifiedTicks, options, callback) {
        return this.client.sendOperationRequest({
            chargeId: chargeId,
            modifiedTicks: modifiedTicks,
            options: options
        }, deleteChargeOperationSpec, callback);
    };
    JudicialFile.prototype.getFiles = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getFilesOperationSpec, callback);
    };
    JudicialFile.prototype.getFiles1 = function (requestModel, options, callback) {
        return this.client.sendOperationRequest({
            requestModel: requestModel,
            options: options
        }, getFiles1OperationSpec, callback);
    };
    JudicialFile.prototype.getFilesCount = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getFilesCountOperationSpec, callback);
    };
    JudicialFile.prototype.getFile = function (fileId, options, callback) {
        return this.client.sendOperationRequest({
            fileId: fileId,
            options: options
        }, getFileOperationSpec, callback);
    };
    JudicialFile.prototype.getFilesSet1 = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getFilesSet1OperationSpec, callback);
    };
    JudicialFile.prototype.getFilesSet2 = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getFilesSet2OperationSpec, callback);
    };
    JudicialFile.prototype.getPartyEntities = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getPartyEntitiesOperationSpec, callback);
    };
    JudicialFile.prototype.getFilesOfLabel = function (labelId, options, callback) {
        return this.client.sendOperationRequest({
            labelId: labelId,
            options: options
        }, getFilesOfLabelOperationSpec, callback);
    };
    JudicialFile.prototype.getFilesOfTagCode = function (tagCode, options, callback) {
        return this.client.sendOperationRequest({
            tagCode: tagCode,
            options: options
        }, getFilesOfTagCodeOperationSpec, callback);
    };
    JudicialFile.prototype.getBusinessRules = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getBusinessRulesOperationSpec, callback);
    };
    JudicialFile.prototype.getRepresentativeUsers = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getRepresentativeUsersOperationSpec, callback);
    };
    JudicialFile.prototype.getRepresentativeProfile = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getRepresentativeProfileOperationSpec, callback);
    };
    JudicialFile.prototype.getTargetRepresentativeProfile = function (representativeId, username, partyId, options, callback) {
        return this.client.sendOperationRequest({
            representativeId: representativeId,
            username: username,
            partyId: partyId,
            options: options
        }, getTargetRepresentativeProfileOperationSpec, callback);
    };
    JudicialFile.prototype.getRepresentativeNeutralList = function (urn, options, callback) {
        return this.client.sendOperationRequest({
            urn: urn,
            options: options
        }, getRepresentativeNeutralListOperationSpec, callback);
    };
    JudicialFile.prototype.checkForFileOptimisticConcurrency = function (fileId, modifiedTicks, options, callback) {
        return this.client.sendOperationRequest({
            fileId: fileId,
            modifiedTicks: modifiedTicks,
            options: options
        }, checkForFileOptimisticConcurrencyOperationSpec, callback);
    };
    JudicialFile.prototype.getNeutralZipCodeDataList = function (urn, options, callback) {
        return this.client.sendOperationRequest({
            urn: urn,
            options: options
        }, getNeutralZipCodeDataListOperationSpec, callback);
    };
    JudicialFile.prototype.getFileVerifyData = function (judicialFileId, judicialEntityId, options, callback) {
        return this.client.sendOperationRequest({
            judicialFileId: judicialFileId,
            judicialEntityId: judicialEntityId,
            options: options
        }, getFileVerifyDataOperationSpec, callback);
    };
    JudicialFile.prototype.getPartyInvitation = function (partyInvitationId, options, callback) {
        return this.client.sendOperationRequest({
            partyInvitationId: partyInvitationId,
            options: options
        }, getPartyInvitationOperationSpec, callback);
    };
    JudicialFile.prototype.getPartyInvitationsOfParty = function (partyId, options, callback) {
        return this.client.sendOperationRequest({
            partyId: partyId,
            options: options
        }, getPartyInvitationsOfPartyOperationSpec, callback);
    };
    JudicialFile.prototype.getFileInvitationsOfParty = function (partyId, options, callback) {
        return this.client.sendOperationRequest({
            partyId: partyId,
            options: options
        }, getFileInvitationsOfPartyOperationSpec, callback);
    };
    JudicialFile.prototype.getFileInvitationInformation = function (code, judicialFileId, options, callback) {
        return this.client.sendOperationRequest({
            code: code,
            judicialFileId: judicialFileId,
            options: options
        }, getFileInvitationInformationOperationSpec, callback);
    };
    JudicialFile.prototype.getFileInformationFromPartyInvitation = function (invitationId, options, callback) {
        return this.client.sendOperationRequest({
            invitationId: invitationId,
            options: options
        }, getFileInformationFromPartyInvitationOperationSpec, callback);
    };
    JudicialFile.prototype.getNewNotificationsCount = function (judicialEntityId, options, callback) {
        return this.client.sendOperationRequest({
            judicialEntityId: judicialEntityId,
            options: options
        }, getNewNotificationsCountOperationSpec, callback);
    };
    JudicialFile.prototype.getNotificationsCountByFile = function (take, judicialEntityId, options, callback) {
        return this.client.sendOperationRequest({
            take: take,
            judicialEntityId: judicialEntityId,
            options: options
        }, getNotificationsCountByFileOperationSpec, callback);
    };
    JudicialFile.prototype.getNotificationsCountAggregatorCode = function (aggregatorsCodes, judicialEntityId, aggregatorCodeIsSubstring, options, callback) {
        return this.client.sendOperationRequest({
            aggregatorsCodes: aggregatorsCodes,
            judicialEntityId: judicialEntityId,
            aggregatorCodeIsSubstring: aggregatorCodeIsSubstring,
            options: options
        }, getNotificationsCountAggregatorCodeOperationSpec, callback);
    };
    JudicialFile.prototype.getNotificationType = function (notificationCode, businessRuleName, options, callback) {
        return this.client.sendOperationRequest({
            notificationCode: notificationCode,
            businessRuleName: businessRuleName,
            options: options
        }, getNotificationTypeOperationSpec, callback);
    };
    JudicialFile.prototype.getLogEntryDistinctCodes = function (fileId, currentRole, options, callback) {
        return this.client.sendOperationRequest({
            fileId: fileId,
            currentRole: currentRole,
            options: options
        }, getLogEntryDistinctCodesOperationSpec, callback);
    };
    JudicialFile.prototype.dismissNotifications = function (fileId, options, callback) {
        return this.client.sendOperationRequest({
            fileId: fileId,
            options: options
        }, dismissNotificationsOperationSpec, callback);
    };
    JudicialFile.prototype.updateRepresentativeStatus = function (representativeId, status, options, callback) {
        return this.client.sendOperationRequest({
            representativeId: representativeId,
            status: status,
            options: options
        }, updateRepresentativeStatusOperationSpec, callback);
    };
    JudicialFile.prototype.updatePartyType = function (partyId, partyType, lastModified, options, callback) {
        return this.client.sendOperationRequest({
            partyId: partyId,
            partyType: partyType,
            lastModified: lastModified,
            options: options
        }, updatePartyTypeOperationSpec, callback);
    };
    JudicialFile.prototype.updatePartyDisputeDescription = function (partyId, disputeDescription, lastModified, options, callback) {
        return this.client.sendOperationRequest({
            partyId: partyId,
            disputeDescription: disputeDescription,
            lastModified: lastModified,
            options: options
        }, updatePartyDisputeDescriptionOperationSpec, callback);
    };
    JudicialFile.prototype.updateFileInvitationExpirationDate = function (fileInvitationId, expiryDate, lastModified, options, callback) {
        return this.client.sendOperationRequest({
            fileInvitationId: fileInvitationId,
            expiryDate: expiryDate,
            lastModified: lastModified,
            options: options
        }, updateFileInvitationExpirationDateOperationSpec, callback);
    };
    JudicialFile.prototype.updatePartyInvitationExpirationDate = function (partyInvitationId, expiryDate, options, callback) {
        return this.client.sendOperationRequest({
            partyInvitationId: partyInvitationId,
            expiryDate: expiryDate,
            options: options
        }, updatePartyInvitationExpirationDateOperationSpec, callback);
    };
    JudicialFile.prototype.updateFileStatus = function (fileId, fileStatus, lastModifiedDate, options, callback) {
        return this.client.sendOperationRequest({
            fileId: fileId,
            fileStatus: fileStatus,
            lastModifiedDate: lastModifiedDate,
            options: options
        }, updateFileStatusOperationSpec, callback);
    };
    JudicialFile.prototype.createPartyInvitation = function (createModel, options, callback) {
        return this.client.sendOperationRequest({
            createModel: createModel,
            options: options
        }, createPartyInvitationOperationSpec, callback);
    };
    JudicialFile.prototype.createFileInvitation = function (createModel, options, callback) {
        return this.client.sendOperationRequest({
            createModel: createModel,
            options: options
        }, createFileInvitationOperationSpec, callback);
    };
    JudicialFile.prototype.acceptPartyInvitation = function (partyInvitationId, options, callback) {
        return this.client.sendOperationRequest({
            partyInvitationId: partyInvitationId,
            options: options
        }, acceptPartyInvitationOperationSpec, callback);
    };
    JudicialFile.prototype.refusePartyInvitation = function (refuseModel, options, callback) {
        return this.client.sendOperationRequest({
            refuseModel: refuseModel,
            options: options
        }, refusePartyInvitationOperationSpec, callback);
    };
    JudicialFile.prototype.refuseFileInvitation = function (refuseModel, options, callback) {
        return this.client.sendOperationRequest({
            refuseModel: refuseModel,
            options: options
        }, refuseFileInvitationOperationSpec, callback);
    };
    JudicialFile.prototype.createFileTagLink = function (tagModel, options, callback) {
        return this.client.sendOperationRequest({
            tagModel: tagModel,
            options: options
        }, createFileTagLinkOperationSpec, callback);
    };
    JudicialFile.prototype.attachRepresentativesToParty = function (model, options, callback) {
        return this.client.sendOperationRequest({
            model: model,
            options: options
        }, attachRepresentativesToPartyOperationSpec, callback);
    };
    JudicialFile.prototype.linkRepresentativesToParty = function (linkRepresentativesToPartyModel, options, callback) {
        return this.client.sendOperationRequest({
            linkRepresentativesToPartyModel: linkRepresentativesToPartyModel,
            options: options
        }, linkRepresentativesToPartyOperationSpec, callback);
    };
    JudicialFile.prototype.acceptRepresentativeInvitation = function (invitationId, options, callback) {
        return this.client.sendOperationRequest({
            invitationId: invitationId,
            options: options
        }, acceptRepresentativeInvitationOperationSpec, callback);
    };
    JudicialFile.prototype.acceptFileInvitation = function (acceptModel, options, callback) {
        return this.client.sendOperationRequest({
            acceptModel: acceptModel,
            options: options
        }, acceptFileInvitationOperationSpec, callback);
    };
    JudicialFile.prototype.getNotificationTypes = function (requestModel, options, callback) {
        return this.client.sendOperationRequest({
            requestModel: requestModel,
            options: options
        }, getNotificationTypesOperationSpec, callback);
    };
    JudicialFile.prototype.getNotifications = function (requestModel, options, callback) {
        return this.client.sendOperationRequest({
            requestModel: requestModel,
            options: options
        }, getNotificationsOperationSpec, callback);
    };
    JudicialFile.prototype.getNotificationsSummaryByFile = function (requestModel, options, callback) {
        return this.client.sendOperationRequest({
            requestModel: requestModel,
            options: options
        }, getNotificationsSummaryByFileOperationSpec, callback);
    };
    JudicialFile.prototype.createNotification = function (model, options, callback) {
        return this.client.sendOperationRequest({
            model: model,
            options: options
        }, createNotificationOperationSpec, callback);
    };
    JudicialFile.prototype.createJudicialFile = function (model, options, callback) {
        return this.client.sendOperationRequest({
            model: model,
            options: options
        }, createJudicialFileOperationSpec, callback);
    };
    JudicialFile.prototype.getLastActor = function (requestModel, options, callback) {
        return this.client.sendOperationRequest({
            requestModel: requestModel,
            options: options
        }, getLastActorOperationSpec, callback);
    };
    JudicialFile.prototype.getLogTemplates = function (requestModel, options, callback) {
        return this.client.sendOperationRequest({
            requestModel: requestModel,
            options: options
        }, getLogTemplatesOperationSpec, callback);
    };
    JudicialFile.prototype.getLogEntries = function (requestModel, options, callback) {
        return this.client.sendOperationRequest({
            requestModel: requestModel,
            options: options
        }, getLogEntriesOperationSpec, callback);
    };
    JudicialFile.prototype.createLogTemplate = function (model, options, callback) {
        return this.client.sendOperationRequest({
            model: model,
            options: options
        }, createLogTemplateOperationSpec, callback);
    };
    JudicialFile.prototype.createLogEntry = function (model, options, callback) {
        return this.client.sendOperationRequest({
            model: model,
            options: options
        }, createLogEntryOperationSpec, callback);
    };
    JudicialFile.prototype.createCharge = function (charge, options, callback) {
        return this.client.sendOperationRequest({
            charge: charge,
            options: options
        }, createChargeOperationSpec, callback);
    };
    JudicialFile.prototype.createRepresentativeProfile = function (model, options, callback) {
        return this.client.sendOperationRequest({
            model: model,
            options: options
        }, createRepresentativeProfileOperationSpec, callback);
    };
    JudicialFile.prototype.closeFile = function (closeFileModel, options, callback) {
        return this.client.sendOperationRequest({
            closeFileModel: closeFileModel,
            options: options
        }, closeFileOperationSpec, callback);
    };
    JudicialFile.prototype.updateFileAttribute = function (fileAttributesModel, options, callback) {
        return this.client.sendOperationRequest({
            fileAttributesModel: fileAttributesModel,
            options: options
        }, updateFileAttributeOperationSpec, callback);
    };
    JudicialFile.prototype.upsertParty = function (upsertModel, options, callback) {
        return this.client.sendOperationRequest({
            upsertModel: upsertModel,
            options: options
        }, upsertPartyOperationSpec, callback);
    };
    JudicialFile.prototype.changePartyStatus = function (partyId, status, lastModifiedDate, options, callback) {
        return this.client.sendOperationRequest({
            partyId: partyId,
            status: status,
            lastModifiedDate: lastModifiedDate,
            options: options
        }, changePartyStatusOperationSpec, callback);
    };
    JudicialFile.prototype.upsertPartyContact = function (upsertModel, options, callback) {
        return this.client.sendOperationRequest({
            upsertModel: upsertModel,
            options: options
        }, upsertPartyContactOperationSpec, callback);
    };
    JudicialFile.prototype.updatePartyRepresentativesAttributes = function (model, options, callback) {
        return this.client.sendOperationRequest({
            model: model,
            options: options
        }, updatePartyRepresentativesAttributesOperationSpec, callback);
    };
    JudicialFile.prototype.updateFileTagLink = function (tagModel, options, callback) {
        return this.client.sendOperationRequest({
            tagModel: tagModel,
            options: options
        }, updateFileTagLinkOperationSpec, callback);
    };
    JudicialFile.prototype.updateFileTagLinkAndComplements = function (tagModel, options, callback) {
        return this.client.sendOperationRequest({
            tagModel: tagModel,
            options: options
        }, updateFileTagLinkAndComplementsOperationSpec, callback);
    };
    JudicialFile.prototype.updateNotificationTypeResource = function (model, options, callback) {
        return this.client.sendOperationRequest({
            model: model,
            options: options
        }, updateNotificationTypeResourceOperationSpec, callback);
    };
    JudicialFile.prototype.updateNotification = function (model, options, callback) {
        return this.client.sendOperationRequest({
            model: model,
            options: options
        }, updateNotificationOperationSpec, callback);
    };
    JudicialFile.prototype.updateNotificationRepresentative = function (model, options, callback) {
        return this.client.sendOperationRequest({
            model: model,
            options: options
        }, updateNotificationRepresentativeOperationSpec, callback);
    };
    JudicialFile.prototype.updateLogTemplate = function (model, options, callback) {
        return this.client.sendOperationRequest({
            model: model,
            options: options
        }, updateLogTemplateOperationSpec, callback);
    };
    JudicialFile.prototype.updateLogTemplates = function (model, options, callback) {
        return this.client.sendOperationRequest({
            model: model,
            options: options
        }, updateLogTemplatesOperationSpec, callback);
    };
    JudicialFile.prototype.updateCharge = function (charge, options, callback) {
        return this.client.sendOperationRequest({
            charge: charge,
            options: options
        }, updateChargeOperationSpec, callback);
    };
    return JudicialFile;
}());
export { JudicialFile };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var deletePartyOperationSpec = {
    httpMethod: "DELETE",
    path: "JudicialFile/DELETE/Party",
    queryParameters: [
        Parameters.partyId1,
        Parameters.lastModified0
    ],
    responses: {
        200: {},
        403: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var detachRepresentativeFromPartyOperationSpec = {
    httpMethod: "DELETE",
    path: "JudicialFile/DELETE/DetachRepresentativeFromParty",
    requestBody: {
        parameterPath: "detachRepresentativeFromPartyModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsDetachRepresentativeFromPartyModel, { required: true })
    },
    responses: {
        200: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var deletePartyInvitationOperationSpec = {
    httpMethod: "DELETE",
    path: "JudicialFile/DELETE/PartyInvitation",
    queryParameters: [
        Parameters.partyInvitationId
    ],
    responses: {
        200: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var deleteFileInvitationOperationSpec = {
    httpMethod: "DELETE",
    path: "JudicialFile/DELETE/FileInvitation",
    queryParameters: [
        Parameters.fileInvitationId
    ],
    responses: {
        200: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var deleteFileTagLinkOperationSpec = {
    httpMethod: "DELETE",
    path: "JudicialFile/DELETE/FileTagLink",
    queryParameters: [
        Parameters.fileId0,
        Parameters.tagCode,
        Parameters.modifiedTicks
    ],
    responses: {
        200: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var deleteNotificationOperationSpec = {
    httpMethod: "DELETE",
    path: "JudicialFile/DELETE/Notification",
    queryParameters: [
        Parameters.notificationId
    ],
    responses: {
        200: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var deleteChargeOperationSpec = {
    httpMethod: "DELETE",
    path: "JudicialFile/DELETE/Charge",
    queryParameters: [
        Parameters.chargeId,
        Parameters.modifiedTicks
    ],
    responses: {
        200: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var getFilesOperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/Files",
    queryParameters: [
        Parameters.fileIds0,
        Parameters.judicialFileIds,
        Parameters.judicialEntityIds,
        Parameters.businessRuleNames,
        Parameters.representativeIds,
        Parameters.excludedStatuses,
        Parameters.statuses,
        Parameters.closingReasons,
        Parameters.minCreatedDate,
        Parameters.maxCreatedDate,
        Parameters.searchStatuses,
        Parameters.searchText,
        Parameters.searchBy,
        Parameters.take0,
        Parameters.skip,
        Parameters.orderBy,
        Parameters.orderByDescending
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileData"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getFiles1OperationSpec = {
    httpMethod: "POST",
    path: "JudicialFile/POST/Files",
    requestBody: {
        parameterPath: "requestModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileApiResquestData, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileApiResponseData
        },
        default: {}
    },
    serializer: serializer
};
var getFilesCountOperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/FilesCount",
    queryParameters: [
        Parameters.fileIds0,
        Parameters.judicialFileIds,
        Parameters.judicialEntityIds,
        Parameters.businessRuleNames,
        Parameters.representativeIds,
        Parameters.excludedStatuses,
        Parameters.statuses,
        Parameters.closingReasons,
        Parameters.minCreatedDate,
        Parameters.maxCreatedDate,
        Parameters.searchStatuses,
        Parameters.searchText,
        Parameters.searchBy
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Number"
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getFileOperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/File",
    queryParameters: [
        Parameters.fileId0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Number"
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getFilesSet1OperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/FilesSet1",
    queryParameters: [
        Parameters.judicialEntityIds,
        Parameters.businessRuleNames,
        Parameters.excludedStatuses
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileSet1Data
        },
        default: {}
    },
    serializer: serializer
};
var getFilesSet2OperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/FilesSet2",
    queryParameters: [
        Parameters.judicialEntityIds,
        Parameters.businessRuleNames,
        Parameters.statuses
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileSet2Data
        },
        default: {}
    },
    serializer: serializer
};
var getPartyEntitiesOperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/PartyEntities",
    queryParameters: [
        Parameters.partyEntityIds,
        Parameters.partyEntityCodes,
        Parameters.take0,
        Parameters.skip,
        Parameters.orderBy
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelServiceContractsJudicialFilePartyEntityData"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getFilesOfLabelOperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/FilesOfLabel",
    queryParameters: [
        Parameters.labelId0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileData"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getFilesOfTagCodeOperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/FilesOfTagCode",
    queryParameters: [
        Parameters.tagCode
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileData"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getBusinessRulesOperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/BusinessRules",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelServiceContractsJudicialFileBusinessRuleData"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getRepresentativeUsersOperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/RepresentativeUsers",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelServiceContractsJudicialFileRepresentativeUserData"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getRepresentativeProfileOperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/RepresentativeProfile",
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelServiceContractsJudicialFileRepresentativeProfileData
        },
        default: {}
    },
    serializer: serializer
};
var getTargetRepresentativeProfileOperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/TargetRepresentativeProfile",
    queryParameters: [
        Parameters.representativeId,
        Parameters.username,
        Parameters.partyId1
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelServiceContractsJudicialFileRepresentativeProfileData
        },
        default: {}
    },
    serializer: serializer
};
var getRepresentativeNeutralListOperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/RepresentativeNeutralList",
    queryParameters: [
        Parameters.urn
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelServiceContractsJudicialFileRepresentativeUserData"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var checkForFileOptimisticConcurrencyOperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/CheckForFileOptimisticConcurrency",
    queryParameters: [
        Parameters.fileId0,
        Parameters.modifiedTicks
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Boolean"
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getNeutralZipCodeDataListOperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/NeutralZipCodeDataList",
    queryParameters: [
        Parameters.urn
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelServiceContractsJudicialFileNeutralZipCodeData"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getFileVerifyDataOperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/FileVerifyData",
    queryParameters: [
        Parameters.judicialFileId0,
        Parameters.judicialEntityId0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileVerifyData
        },
        default: {}
    },
    serializer: serializer
};
var getPartyInvitationOperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/PartyInvitation",
    queryParameters: [
        Parameters.partyInvitationId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Object"
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getPartyInvitationsOfPartyOperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/PartyInvitationsOfParty",
    queryParameters: [
        Parameters.partyId1
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Object"
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getFileInvitationsOfPartyOperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/FileInvitationsOfParty",
    queryParameters: [
        Parameters.partyId1
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationModel"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getFileInvitationInformationOperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/FileInvitationInformation",
    queryParameters: [
        Parameters.code,
        Parameters.judicialFileId1
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationInformationModel
        },
        401: {},
        default: {}
    },
    serializer: serializer
};
var getFileInformationFromPartyInvitationOperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/FileInformation",
    queryParameters: [
        Parameters.invitationId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelSharedJudicialFileModelsFileInformationFromPartyInvitationModel
        },
        default: {}
    },
    serializer: serializer
};
var getNewNotificationsCountOperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/NewNotificationsCount",
    queryParameters: [
        Parameters.judicialEntityId0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Number"
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getNotificationsCountByFileOperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/NotificationsCountByFile",
    queryParameters: [
        Parameters.take1,
        Parameters.judicialEntityId0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelSharedJudicialFileModelsNotificationCountByFileModel"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getNotificationsCountAggregatorCodeOperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/NotificationsCountByAggregatorCode",
    queryParameters: [
        Parameters.aggregatorsCodes,
        Parameters.judicialEntityId0,
        Parameters.aggregatorCodeIsSubstring0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelSharedJudicialFileModelsNotificationCountByAggregatorCodeModel"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getNotificationTypeOperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/NotificationType",
    queryParameters: [
        Parameters.notificationCode0,
        Parameters.businessRuleName
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelSharedJudicialFileModelsNotificationTypeModel
        },
        default: {}
    },
    serializer: serializer
};
var getLogEntryDistinctCodesOperationSpec = {
    httpMethod: "GET",
    path: "JudicialFile/GET/LogEntryDistinctCodes",
    queryParameters: [
        Parameters.fileId0,
        Parameters.currentRole
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        },
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var dismissNotificationsOperationSpec = {
    httpMethod: "PATCH",
    path: "JudicialFile/PATCH/DismissNotifications",
    queryParameters: [
        Parameters.fileId0,
        Parameters.notificationCode1,
        Parameters.aggregatorCode,
        Parameters.aggregatorCodeIsSubstring1
    ],
    responses: {
        200: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var updateRepresentativeStatusOperationSpec = {
    httpMethod: "PATCH",
    path: "JudicialFile/PATCH/UpdateRepresentativeStatus",
    queryParameters: [
        Parameters.representativeId,
        Parameters.status
    ],
    responses: {
        200: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var updatePartyTypeOperationSpec = {
    httpMethod: "PATCH",
    path: "JudicialFile/PATCH/UpdatePartyType",
    queryParameters: [
        Parameters.partyId1,
        Parameters.partyType,
        Parameters.lastModified0
    ],
    responses: {
        200: {},
        403: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updatePartyDisputeDescriptionOperationSpec = {
    httpMethod: "PATCH",
    path: "JudicialFile/PATCH/UpdatePartyDisputeDescription",
    queryParameters: [
        Parameters.partyId1,
        Parameters.disputeDescription,
        Parameters.lastModified0
    ],
    responses: {
        200: {},
        403: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updateFileInvitationExpirationDateOperationSpec = {
    httpMethod: "PATCH",
    path: "JudicialFile/PATCH/UpdateFileInvitationExpirationDate",
    queryParameters: [
        Parameters.fileInvitationId,
        Parameters.expiryDate,
        Parameters.lastModified1
    ],
    responses: {
        200: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updatePartyInvitationExpirationDateOperationSpec = {
    httpMethod: "PATCH",
    path: "JudicialFile/PATCH/UpdatePartyInvitationExpirationDate",
    queryParameters: [
        Parameters.partyInvitationId,
        Parameters.expiryDate
    ],
    responses: {
        200: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var updateFileStatusOperationSpec = {
    httpMethod: "PATCH",
    path: "JudicialFile/PATCH/UpdateFileStatus",
    queryParameters: [
        Parameters.fileId0,
        Parameters.fileStatus,
        Parameters.lastModifiedDate
    ],
    responses: {
        200: {},
        403: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var createPartyInvitationOperationSpec = {
    httpMethod: "POST",
    path: "JudicialFile/POST/CreatePartyInvitation",
    requestBody: {
        parameterPath: "createModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsPartyInvitationCreateModel, { required: true })
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        404: {},
        default: {}
    },
    serializer: serializer
};
var createFileInvitationOperationSpec = {
    httpMethod: "POST",
    path: "JudicialFile/POST/CreateFileInvitation",
    requestBody: {
        parameterPath: "createModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationCreateModel, { required: true })
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        400: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var acceptPartyInvitationOperationSpec = {
    httpMethod: "POST",
    path: "JudicialFile/POST/AcceptPartyInvitation",
    requestBody: {
        parameterPath: "partyInvitationId",
        mapper: {
            required: true,
            serializedName: "partyInvitationId",
            type: {
                name: "Uuid"
            }
        }
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        400: {},
        403: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var refusePartyInvitationOperationSpec = {
    httpMethod: "POST",
    path: "JudicialFile/POST/RefusePartyInvitation",
    requestBody: {
        parameterPath: "refuseModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsPartyInvitationRefuseModel, { required: true })
    },
    responses: {
        200: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var refuseFileInvitationOperationSpec = {
    httpMethod: "POST",
    path: "JudicialFile/POST/RefuseFileInvitation",
    requestBody: {
        parameterPath: "refuseModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationRefuseModel, { required: true })
    },
    responses: {
        200: {},
        401: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var createFileTagLinkOperationSpec = {
    httpMethod: "POST",
    path: "JudicialFile/POST/CreateFileTagLink",
    requestBody: {
        parameterPath: "tagModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileTagCreateModel, { required: true })
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        404: {},
        default: {}
    },
    serializer: serializer
};
var attachRepresentativesToPartyOperationSpec = {
    httpMethod: "POST",
    path: "JudicialFile/POST/AttachRepresentativesToParty",
    requestBody: {
        parameterPath: "model",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsRepresentativesToPartyModel, { required: true })
    },
    responses: {
        200: {},
        403: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var linkRepresentativesToPartyOperationSpec = {
    httpMethod: "POST",
    path: "JudicialFile/POST/LinkRepresentativesToParty",
    requestBody: {
        parameterPath: "linkRepresentativesToPartyModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsLinkRepresentativesToPartyModel, { required: true })
    },
    responses: {
        200: {},
        403: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var acceptRepresentativeInvitationOperationSpec = {
    httpMethod: "POST",
    path: "JudicialFile/POST/AcceptRepresentativeInvitation",
    requestBody: {
        parameterPath: "invitationId",
        mapper: {
            required: true,
            serializedName: "invitationId",
            type: {
                name: "Uuid"
            }
        }
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        403: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var acceptFileInvitationOperationSpec = {
    httpMethod: "POST",
    path: "JudicialFile/POST/AcceptFileInvitation",
    requestBody: {
        parameterPath: "acceptModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationAcceptModel, { required: true })
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        401: {},
        403: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var getNotificationTypesOperationSpec = {
    httpMethod: "POST",
    path: "JudicialFile/POST/NotificationTypes",
    requestBody: {
        parameterPath: "requestModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsNotificationTypeApiRequestData, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelSharedJudicialFileModelsNotificationTypeApiResponseData
        },
        default: {}
    },
    serializer: serializer
};
var getNotificationsOperationSpec = {
    httpMethod: "POST",
    path: "JudicialFile/POST/Notifications",
    requestBody: {
        parameterPath: "requestModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsNotificationApiRequestData, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelSharedJudicialFileModelsNotificationApiResponseData
        },
        default: {}
    },
    serializer: serializer
};
var getNotificationsSummaryByFileOperationSpec = {
    httpMethod: "POST",
    path: "JudicialFile/POST/NotificationsSummaryByFile",
    requestBody: {
        parameterPath: "requestModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsNotificationsSummaryByFileApiRequestData, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelSharedJudicialFileModelsNotificationsSummaryByFileApiResponseData
        },
        default: {}
    },
    serializer: serializer
};
var createNotificationOperationSpec = {
    httpMethod: "POST",
    path: "JudicialFile/POST/CreateNotification",
    requestBody: {
        parameterPath: "model",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsNotificationCreateModel, { required: true })
    },
    responses: {
        200: {},
        400: {},
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var createJudicialFileOperationSpec = {
    httpMethod: "POST",
    path: "JudicialFile/POST/CreateJudicialFile",
    requestBody: {
        parameterPath: "model",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileCreateModel, { required: true })
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        400: {},
        404: {},
        409: {},
        500: {},
        default: {}
    },
    serializer: serializer
};
var getLastActorOperationSpec = {
    httpMethod: "POST",
    path: "JudicialFile/POST/GetLastActor",
    requestBody: {
        parameterPath: "requestModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsLastActorRequestData, { required: true })
    },
    responses: {
        204: {},
        default: {}
    },
    serializer: serializer
};
var getLogTemplatesOperationSpec = {
    httpMethod: "POST",
    path: "JudicialFile/POST/GetLogTemplates",
    requestBody: {
        parameterPath: "requestModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateApiRequestData, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateApiResponseData
        },
        default: {}
    },
    serializer: serializer
};
var getLogEntriesOperationSpec = {
    httpMethod: "POST",
    path: "JudicialFile/POST/GetLogEntries",
    requestBody: {
        parameterPath: "requestModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsLogEntryApiRequestData, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelSharedJudicialFileModelsLogEntryApiResponseData
        },
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var createLogTemplateOperationSpec = {
    httpMethod: "POST",
    path: "JudicialFile/POST/CreateLogTemplate",
    requestBody: {
        parameterPath: "model",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateCreateModel, { required: true })
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var createLogEntryOperationSpec = {
    httpMethod: "POST",
    path: "JudicialFile/POST/CreateLogEntry",
    requestBody: {
        parameterPath: "model",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsLogEntryCreateModel, { required: true })
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Uuid"
                        }
                    }
                }
            }
        },
        404: {},
        default: {}
    },
    serializer: serializer
};
var createChargeOperationSpec = {
    httpMethod: "POST",
    path: "JudicialFile/POST/CreatePenalCharge",
    requestBody: {
        parameterPath: "charge",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsPenalChargeCreateModel, { required: true })
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var createRepresentativeProfileOperationSpec = {
    httpMethod: "POST",
    path: "JudicialFile/POST/CreateRepresentativeProfile",
    requestBody: {
        parameterPath: "model",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsCreateRepresentativeProfileModel, { required: true })
    },
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
var closeFileOperationSpec = {
    httpMethod: "PUT",
    path: "JudicialFile/PUT/CloseFile",
    requestBody: {
        parameterPath: "closeFileModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsCloseFileModel, { required: true })
    },
    responses: {
        200: {},
        400: {},
        403: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updateFileAttributeOperationSpec = {
    httpMethod: "PUT",
    path: "JudicialFile/PUT/UpdateFileAttribute",
    requestBody: {
        parameterPath: "fileAttributesModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileAttributesUpdateModel, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelSharedJudicialFileModelsPartyUpsertModel
        },
        403: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var upsertPartyOperationSpec = {
    httpMethod: "PUT",
    path: "JudicialFile/PUT/UpsertParty",
    requestBody: {
        parameterPath: "upsertModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsPartyUpsertModel, { required: true })
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        403: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var changePartyStatusOperationSpec = {
    httpMethod: "PUT",
    path: "JudicialFile/PUT/ChangePartyStatus",
    queryParameters: [
        Parameters.partyId1,
        Parameters.status,
        Parameters.lastModifiedDate
    ],
    responses: {
        200: {},
        403: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var upsertPartyContactOperationSpec = {
    httpMethod: "PUT",
    path: "JudicialFile/PUT/UpsertPartyContact",
    requestBody: {
        parameterPath: "upsertModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsPartyContactUpsertModel, { required: true })
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        400: {},
        403: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updatePartyRepresentativesAttributesOperationSpec = {
    httpMethod: "PUT",
    path: "JudicialFile/PUT/UpdatePartyRepresentativesAttributes",
    requestBody: {
        parameterPath: "model",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsRepresentativesToPartyModel, { required: true })
    },
    responses: {
        200: {},
        400: {},
        403: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updateFileTagLinkOperationSpec = {
    httpMethod: "PUT",
    path: "JudicialFile/PUT/UpdateFileTagLink",
    requestBody: {
        parameterPath: "tagModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileTagUpdateModel, { required: true })
    },
    responses: {
        200: {},
        403: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updateFileTagLinkAndComplementsOperationSpec = {
    httpMethod: "PUT",
    path: "JudicialFile/PUT/UpdateFileTagLinkAndComplements",
    requestBody: {
        parameterPath: "tagModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileTagUpdateWithComplementModel, { required: true })
    },
    responses: {
        200: {},
        400: {},
        403: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updateNotificationTypeResourceOperationSpec = {
    httpMethod: "PUT",
    path: "JudicialFile/PUT/UpdateNotificationType",
    requestBody: {
        parameterPath: "model",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsNotificationTypeResourceUpdateModel, { required: true })
    },
    responses: {
        200: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var updateNotificationOperationSpec = {
    httpMethod: "PUT",
    path: "JudicialFile/PUT/UpdateNotification",
    requestBody: {
        parameterPath: "model",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsNotificationUpdateModel, { required: true })
    },
    responses: {
        200: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var updateNotificationRepresentativeOperationSpec = {
    httpMethod: "PUT",
    path: "JudicialFile/PUT/UpdateNotificationRepresentative",
    requestBody: {
        parameterPath: "model",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsNotificationRepresentativeUpdateModel, { required: true })
    },
    responses: {
        200: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var updateLogTemplateOperationSpec = {
    httpMethod: "PUT",
    path: "JudicialFile/PUT/UpdateLogTemplate",
    requestBody: {
        parameterPath: "model",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateUpdateModel, { required: true })
    },
    responses: {
        200: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var updateLogTemplatesOperationSpec = {
    httpMethod: "PUT",
    path: "JudicialFile/PUT/UpdateLogTemplates",
    requestBody: {
        parameterPath: "model",
        mapper: {
            required: true,
            serializedName: "model",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateUpdateModel"
                    }
                }
            }
        }
    },
    responses: {
        200: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var updateChargeOperationSpec = {
    httpMethod: "POST",
    path: "JudicialFile/PUT/UpdatePenalCharge",
    requestBody: {
        parameterPath: "charge",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedJudicialFileModelsPenalChargeUpdateModel, { required: true })
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
//# sourceMappingURL=judicialFile.js.map