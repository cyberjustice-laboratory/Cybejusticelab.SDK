/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/calendarMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Calendar. */
var Calendar = /** @class */ (function () {
    /**
     * Create a Calendar.
     * @param {CyberjusticeAPIsContext} client Reference to the service client.
     */
    function Calendar(client) {
        this.client = client;
    }
    Calendar.prototype.updateBaseCalendarStatus = function (baseCalendarId, status, modifiedTicks, options, callback) {
        return this.client.sendOperationRequest({
            baseCalendarId: baseCalendarId,
            status: status,
            modifiedTicks: modifiedTicks,
            options: options
        }, updateBaseCalendarStatusOperationSpec, callback);
    };
    Calendar.prototype.updateAssignmentCycleStatus = function (cycleId, status, modifiedTicks, options, callback) {
        return this.client.sendOperationRequest({
            cycleId: cycleId,
            status: status,
            modifiedTicks: modifiedTicks,
            options: options
        }, updateAssignmentCycleStatusOperationSpec, callback);
    };
    Calendar.prototype.updatePeriodAvailabilityRoleLinkStatus = function (linkId, status, options, callback) {
        return this.client.sendOperationRequest({
            linkId: linkId,
            status: status,
            options: options
        }, updatePeriodAvailabilityRoleLinkStatusOperationSpec, callback);
    };
    Calendar.prototype.updateBaseCalendar = function (baseCalendarData, options, callback) {
        return this.client.sendOperationRequest({
            baseCalendarData: baseCalendarData,
            options: options
        }, updateBaseCalendarOperationSpec, callback);
    };
    Calendar.prototype.updateBaseCalendarRoomLocationLink = function (locationRoomIds, calendarId, options, callback) {
        return this.client.sendOperationRequest({
            locationRoomIds: locationRoomIds,
            calendarId: calendarId,
            options: options
        }, updateBaseCalendarRoomLocationLinkOperationSpec, callback);
    };
    Calendar.prototype.updatePeriodAvailability = function (period, options, callback) {
        return this.client.sendOperationRequest({
            period: period,
            options: options
        }, updatePeriodAvailabilityOperationSpec, callback);
    };
    Calendar.prototype.updateClosedDay = function (closedDay, options, callback) {
        return this.client.sendOperationRequest({
            closedDay: closedDay,
            options: options
        }, updateClosedDayOperationSpec, callback);
    };
    Calendar.prototype.updateBaseCalendarJudicialEntityLink = function (judicialEntityId, calendarId, options, callback) {
        return this.client.sendOperationRequest({
            judicialEntityId: judicialEntityId,
            calendarId: calendarId,
            options: options
        }, updateBaseCalendarJudicialEntityLinkOperationSpec, callback);
    };
    Calendar.prototype.updateAssignmentCycle = function (cycle, options, callback) {
        return this.client.sendOperationRequest({
            cycle: cycle,
            options: options
        }, updateAssignmentCycleOperationSpec, callback);
    };
    Calendar.prototype.updatePeriodAvailabilityGroup = function (periodAvailabilities, options, callback) {
        return this.client.sendOperationRequest({
            periodAvailabilities: periodAvailabilities,
            options: options
        }, updatePeriodAvailabilityGroupOperationSpec, callback);
    };
    Calendar.prototype.updateSchedulePattern = function (schedulePattern, options, callback) {
        return this.client.sendOperationRequest({
            schedulePattern: schedulePattern,
            options: options
        }, updateSchedulePatternOperationSpec, callback);
    };
    Calendar.prototype.updateScheduleEntry = function (scheduleEntry, options, callback) {
        return this.client.sendOperationRequest({
            scheduleEntry: scheduleEntry,
            options: options
        }, updateScheduleEntryOperationSpec, callback);
    };
    Calendar.prototype.updatePeriodAvailabilityJudicialFileLink = function (fileLink, options, callback) {
        return this.client.sendOperationRequest({
            fileLink: fileLink,
            options: options
        }, updatePeriodAvailabilityJudicialFileLinkOperationSpec, callback);
    };
    Calendar.prototype.updateEvent = function (eventModel, options, callback) {
        return this.client.sendOperationRequest({
            eventModel: eventModel,
            options: options
        }, updateEventOperationSpec, callback);
    };
    Calendar.prototype.updateEventAttributes = function (eventAttributesModel, options, callback) {
        return this.client.sendOperationRequest({
            eventAttributesModel: eventAttributesModel,
            options: options
        }, updateEventAttributesOperationSpec, callback);
    };
    Calendar.prototype.updateEventBehaviours = function (eventBehavioursModel, options, callback) {
        return this.client.sendOperationRequest({
            eventBehavioursModel: eventBehavioursModel,
            options: options
        }, updateEventBehavioursOperationSpec, callback);
    };
    Calendar.prototype.updateEventRank = function (eventRankModel, options, callback) {
        return this.client.sendOperationRequest({
            eventRankModel: eventRankModel,
            options: options
        }, updateEventRankOperationSpec, callback);
    };
    Calendar.prototype.updateEventStartDate = function (eventStartDateModel, options, callback) {
        return this.client.sendOperationRequest({
            eventStartDateModel: eventStartDateModel,
            options: options
        }, updateEventStartDateOperationSpec, callback);
    };
    Calendar.prototype.deleteClosedDay = function (id, options, callback) {
        return this.client.sendOperationRequest({
            id: id,
            options: options
        }, deleteClosedDayOperationSpec, callback);
    };
    Calendar.prototype.deleteClosedWeekday = function (baseCalendarId, weekday, options, callback) {
        return this.client.sendOperationRequest({
            baseCalendarId: baseCalendarId,
            weekday: weekday,
            options: options
        }, deleteClosedWeekdayOperationSpec, callback);
    };
    Calendar.prototype.deletePeriodAvailability = function (id, options, callback) {
        return this.client.sendOperationRequest({
            id: id,
            options: options
        }, deletePeriodAvailabilityOperationSpec, callback);
    };
    Calendar.prototype.deletePeriodAvailabilities = function (periodAvailabilityIds, options, callback) {
        return this.client.sendOperationRequest({
            periodAvailabilityIds: periodAvailabilityIds,
            options: options
        }, deletePeriodAvailabilitiesOperationSpec, callback);
    };
    Calendar.prototype.deletePeriodAvailabilityGroup = function (periodAvailabilityGroupId, options, callback) {
        return this.client.sendOperationRequest({
            periodAvailabilityGroupId: periodAvailabilityGroupId,
            options: options
        }, deletePeriodAvailabilityGroupOperationSpec, callback);
    };
    Calendar.prototype.deletePeriodAvailabilityRoleLink = function (id, options, callback) {
        return this.client.sendOperationRequest({
            id: id,
            options: options
        }, deletePeriodAvailabilityRoleLinkOperationSpec, callback);
    };
    Calendar.prototype.deletePeriodAvailabilityJudicialFileLink = function (periodAvailabilityId, judicialFileId, options, callback) {
        return this.client.sendOperationRequest({
            periodAvailabilityId: periodAvailabilityId,
            judicialFileId: judicialFileId,
            options: options
        }, deletePeriodAvailabilityJudicialFileLinkOperationSpec, callback);
    };
    Calendar.prototype.deleteBaseCalendarLocationRoomLink = function (baseCalendarId, locationRoomId, options, callback) {
        return this.client.sendOperationRequest({
            baseCalendarId: baseCalendarId,
            locationRoomId: locationRoomId,
            options: options
        }, deleteBaseCalendarLocationRoomLinkOperationSpec, callback);
    };
    Calendar.prototype.deleteAssignmentCycle = function (cycleId, options, callback) {
        return this.client.sendOperationRequest({
            cycleId: cycleId,
            options: options
        }, deleteAssignmentCycleOperationSpec, callback);
    };
    Calendar.prototype.deleteSchedulePattern = function (schedulePatternId, options, callback) {
        return this.client.sendOperationRequest({
            schedulePatternId: schedulePatternId,
            options: options
        }, deleteSchedulePatternOperationSpec, callback);
    };
    Calendar.prototype.deleteScheduleEntry = function (scheduleEntryId, options, callback) {
        return this.client.sendOperationRequest({
            scheduleEntryId: scheduleEntryId,
            options: options
        }, deleteScheduleEntryOperationSpec, callback);
    };
    Calendar.prototype.deleteAssignmentCycles = function (cycleIds, options, callback) {
        return this.client.sendOperationRequest({
            cycleIds: cycleIds,
            options: options
        }, deleteAssignmentCyclesOperationSpec, callback);
    };
    Calendar.prototype.deletePeriodAvailabilityRoleLinks = function (periodAvailabilityRoleLinkIds, options, callback) {
        return this.client.sendOperationRequest({
            periodAvailabilityRoleLinkIds: periodAvailabilityRoleLinkIds,
            options: options
        }, deletePeriodAvailabilityRoleLinksOperationSpec, callback);
    };
    Calendar.prototype.deleteClosedDays = function (closedDayIds, options, callback) {
        return this.client.sendOperationRequest({
            closedDayIds: closedDayIds,
            options: options
        }, deleteClosedDaysOperationSpec, callback);
    };
    Calendar.prototype.deleteEvent = function (eventId, fileId, options, callback) {
        return this.client.sendOperationRequest({
            eventId: eventId,
            fileId: fileId,
            options: options
        }, deleteEventOperationSpec, callback);
    };
    Calendar.prototype.deleteAllEvents = function (calendarId, options, callback) {
        return this.client.sendOperationRequest({
            calendarId: calendarId,
            options: options
        }, deleteAllEventsOperationSpec, callback);
    };
    Calendar.prototype.deleteBehaviors = function (eventId, fileId, behaviors, options, callback) {
        return this.client.sendOperationRequest({
            eventId: eventId,
            fileId: fileId,
            behaviors: behaviors,
            options: options
        }, deleteBehaviorsOperationSpec, callback);
    };
    Calendar.prototype.getEvents = function (requestModel, options, callback) {
        return this.client.sendOperationRequest({
            requestModel: requestModel,
            options: options
        }, getEventsOperationSpec, callback);
    };
    Calendar.prototype.getFullCalendar = function (requestModel, options, callback) {
        return this.client.sendOperationRequest({
            requestModel: requestModel,
            options: options
        }, getFullCalendarOperationSpec, callback);
    };
    Calendar.prototype.createBaseCalendar = function (baseCalendarData, options, callback) {
        return this.client.sendOperationRequest({
            baseCalendarData: baseCalendarData,
            options: options
        }, createBaseCalendarOperationSpec, callback);
    };
    Calendar.prototype.createPeriodAvailability = function (period, options, callback) {
        return this.client.sendOperationRequest({
            period: period,
            options: options
        }, createPeriodAvailabilityOperationSpec, callback);
    };
    Calendar.prototype.createPeriodAvailabilityGroup = function (periodAvailabilities, options, callback) {
        return this.client.sendOperationRequest({
            periodAvailabilities: periodAvailabilities,
            options: options
        }, createPeriodAvailabilityGroupOperationSpec, callback);
    };
    Calendar.prototype.baseCalendarAddClosedWeekday = function (day, options, callback) {
        return this.client.sendOperationRequest({
            day: day,
            options: options
        }, baseCalendarAddClosedWeekdayOperationSpec, callback);
    };
    Calendar.prototype.createClosedDay = function (day, options, callback) {
        return this.client.sendOperationRequest({
            day: day,
            options: options
        }, createClosedDayOperationSpec, callback);
    };
    Calendar.prototype.createAssignmentCycle = function (cycleData, options, callback) {
        return this.client.sendOperationRequest({
            cycleData: cycleData,
            options: options
        }, createAssignmentCycleOperationSpec, callback);
    };
    Calendar.prototype.createPeriodAvailabilityRoleLink = function (roleData, options, callback) {
        return this.client.sendOperationRequest({
            roleData: roleData,
            options: options
        }, createPeriodAvailabilityRoleLinkOperationSpec, callback);
    };
    Calendar.prototype.createPeriodAvailabilityJudicialFileLink = function (fileLink, options, callback) {
        return this.client.sendOperationRequest({
            fileLink: fileLink,
            options: options
        }, createPeriodAvailabilityJudicialFileLinkOperationSpec, callback);
    };
    Calendar.prototype.createPeriodAvailabilitiesFromPattern = function (request, options, callback) {
        return this.client.sendOperationRequest({
            request: request,
            options: options
        }, createPeriodAvailabilitiesFromPatternOperationSpec, callback);
    };
    Calendar.prototype.createSchedulePattern = function (schedulePattern, options, callback) {
        return this.client.sendOperationRequest({
            schedulePattern: schedulePattern,
            options: options
        }, createSchedulePatternOperationSpec, callback);
    };
    Calendar.prototype.createScheduleEntry = function (scheduleEntry, options, callback) {
        return this.client.sendOperationRequest({
            scheduleEntry: scheduleEntry,
            options: options
        }, createScheduleEntryOperationSpec, callback);
    };
    Calendar.prototype.createCalendar = function (calendarModel, options, callback) {
        return this.client.sendOperationRequest({
            calendarModel: calendarModel,
            options: options
        }, createCalendarOperationSpec, callback);
    };
    Calendar.prototype.createEvent = function (eventModel, options, callback) {
        return this.client.sendOperationRequest({
            eventModel: eventModel,
            options: options
        }, createEventOperationSpec, callback);
    };
    Calendar.prototype.getBaseCalendars = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getBaseCalendarsOperationSpec, callback);
    };
    Calendar.prototype.getPeriodAvailabilities = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getPeriodAvailabilitiesOperationSpec, callback);
    };
    Calendar.prototype.getPeriodAvailabilitiesOfUser = function (realm, userId, options, callback) {
        return this.client.sendOperationRequest({
            realm: realm,
            userId: userId,
            options: options
        }, getPeriodAvailabilitiesOfUserOperationSpec, callback);
    };
    Calendar.prototype.getClosedDays = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getClosedDaysOperationSpec, callback);
    };
    Calendar.prototype.getAssignmentCycles = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getAssignmentCyclesOperationSpec, callback);
    };
    Calendar.prototype.getSchedulePatterns = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getSchedulePatternsOperationSpec, callback);
    };
    Calendar.prototype.getScheduleEntry = function (entryId, options, callback) {
        return this.client.sendOperationRequest({
            entryId: entryId,
            options: options
        }, getScheduleEntryOperationSpec, callback);
    };
    Calendar.prototype.getFileCalendars = function (fileId, options, callback) {
        return this.client.sendOperationRequest({
            fileId: fileId,
            options: options
        }, getFileCalendarsOperationSpec, callback);
    };
    Calendar.prototype.getFilesWithCurrentEvents = function (fileIds, fileStatus, options, callback) {
        return this.client.sendOperationRequest({
            fileIds: fileIds,
            fileStatus: fileStatus,
            options: options
        }, getFilesWithCurrentEventsOperationSpec, callback);
    };
    return Calendar;
}());
export { Calendar };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var updateBaseCalendarStatusOperationSpec = {
    httpMethod: "PATCH",
    path: "Calendar/PATCH/UpdateBaseCalendarStatus",
    queryParameters: [
        Parameters.baseCalendarId,
        Parameters.status,
        Parameters.modifiedTicks
    ],
    responses: {
        400: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updateAssignmentCycleStatusOperationSpec = {
    httpMethod: "PATCH",
    path: "Calendar/PATCH/UpdateAssignmentCycleStatus",
    queryParameters: [
        Parameters.cycleId,
        Parameters.status,
        Parameters.modifiedTicks
    ],
    responses: {
        400: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updatePeriodAvailabilityRoleLinkStatusOperationSpec = {
    httpMethod: "PATCH",
    path: "Calendar/PATCH/UpdatePeriodAvailabilityRoleLinkStatus",
    queryParameters: [
        Parameters.linkId,
        Parameters.status
    ],
    responses: {
        400: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var updateBaseCalendarOperationSpec = {
    httpMethod: "PUT",
    path: "Calendar/PUT/UpdateBaseCalendar",
    requestBody: {
        parameterPath: "baseCalendarData",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelServiceContractsCalendarBaseCalendarUpdateData, { required: true })
    },
    responses: {
        400: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updateBaseCalendarRoomLocationLinkOperationSpec = {
    httpMethod: "PUT",
    path: "Calendar/PUT/UpdateBaseCalendarRoomLocationLink",
    queryParameters: [
        Parameters.calendarId0
    ],
    requestBody: {
        parameterPath: "locationRoomIds",
        mapper: {
            required: true,
            serializedName: "locationRoomIds",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "String"
                    }
                }
            }
        }
    },
    responses: {
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updatePeriodAvailabilityOperationSpec = {
    httpMethod: "PUT",
    path: "Calendar/PUT/UpdatePeriodAvailability",
    requestBody: {
        parameterPath: "period",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelServiceContractsCalendarPeriodAvailabilityUpdateData, { required: true })
    },
    responses: {
        400: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updateClosedDayOperationSpec = {
    httpMethod: "PUT",
    path: "Calendar/PUT/UpdateClosedDay",
    requestBody: {
        parameterPath: "closedDay",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelServiceContractsCalendarClosedDayUpdateData, { required: true })
    },
    responses: {
        400: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updateBaseCalendarJudicialEntityLinkOperationSpec = {
    httpMethod: "PUT",
    path: "Calendar/PUT/UpdateBaseCalendarJudicialEntityLink",
    queryParameters: [
        Parameters.judicialEntityId1,
        Parameters.calendarId0
    ],
    responses: {
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updateAssignmentCycleOperationSpec = {
    httpMethod: "PUT",
    path: "Calendar/PUT/UpdateAssignmentCycle",
    requestBody: {
        parameterPath: "cycle",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelServiceContractsCalendarAssignmentCycleUpdateData, { required: true })
    },
    responses: {
        400: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updatePeriodAvailabilityGroupOperationSpec = {
    httpMethod: "PUT",
    path: "Calendar/PUT/UpdatePeriodAvailabilityGroup",
    requestBody: {
        parameterPath: "periodAvailabilities",
        mapper: {
            required: true,
            serializedName: "periodAvailabilities",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "CyberjusticeLabKernelServiceContractsCalendarPeriodAvailabilityUpdateData"
                    }
                }
            }
        }
    },
    responses: {
        400: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updateSchedulePatternOperationSpec = {
    httpMethod: "PUT",
    path: "Calendar/PUT/UpdateSchedulePattern",
    requestBody: {
        parameterPath: "schedulePattern",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelServiceContractsCalendarSchedulePatternUpdateData, { required: true })
    },
    responses: {
        400: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updateScheduleEntryOperationSpec = {
    httpMethod: "PUT",
    path: "Calendar/PUT/UpdateScheduleEntry",
    requestBody: {
        parameterPath: "scheduleEntry",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelServiceContractsCalendarScheduleEntryUpdateData, { required: true })
    },
    responses: {
        400: {},
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updatePeriodAvailabilityJudicialFileLinkOperationSpec = {
    httpMethod: "PUT",
    path: "Calendar/PUT/UpdatePeriodAvailabilityJudicialFileLink",
    requestBody: {
        parameterPath: "fileLink",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelServiceContractsCalendarPeriodAvailabilityJudicialFileData, { required: true })
    },
    responses: {
        404: {},
        default: {}
    },
    serializer: serializer
};
var updateEventOperationSpec = {
    httpMethod: "PUT",
    path: "Calendar/PUT/UpdateEvent",
    requestBody: {
        parameterPath: "eventModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedCalendarModelsUpdateEventModel, { required: true })
    },
    responses: {
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updateEventAttributesOperationSpec = {
    httpMethod: "PUT",
    path: "Calendar/PUT/UpdateEventAttributes",
    requestBody: {
        parameterPath: "eventAttributesModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedCalendarModelsUpdateEventAttributesModel, { required: true })
    },
    responses: {
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updateEventBehavioursOperationSpec = {
    httpMethod: "PUT",
    path: "Calendar/PUT/UpdateEventBehaviours",
    requestBody: {
        parameterPath: "eventBehavioursModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedCalendarModelsUpdateEventBehavioursModel, { required: true })
    },
    responses: {
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updateEventRankOperationSpec = {
    httpMethod: "PUT",
    path: "Calendar/PUT/UpdateEventRank",
    requestBody: {
        parameterPath: "eventRankModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedCalendarModelsUpdateEventRankModel, { required: true })
    },
    responses: {
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var updateEventStartDateOperationSpec = {
    httpMethod: "PUT",
    path: "Calendar/PUT/UpdateEventStartDate",
    requestBody: {
        parameterPath: "eventStartDateModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedCalendarModelsUpdateEventStartDateModel, { required: true })
    },
    responses: {
        404: {},
        409: {},
        default: {}
    },
    serializer: serializer
};
var deleteClosedDayOperationSpec = {
    httpMethod: "DELETE",
    path: "Calendar/DELETE/ClosedDay",
    queryParameters: [
        Parameters.id0
    ],
    responses: {
        404: {},
        default: {}
    },
    serializer: serializer
};
var deleteClosedWeekdayOperationSpec = {
    httpMethod: "DELETE",
    path: "Calendar/DELETE/ClosedWeekday",
    queryParameters: [
        Parameters.baseCalendarId,
        Parameters.weekday
    ],
    responses: {
        404: {},
        default: {}
    },
    serializer: serializer
};
var deletePeriodAvailabilityOperationSpec = {
    httpMethod: "DELETE",
    path: "Calendar/DELETE/PeriodAvailability",
    queryParameters: [
        Parameters.id0
    ],
    responses: {
        404: {},
        default: {}
    },
    serializer: serializer
};
var deletePeriodAvailabilitiesOperationSpec = {
    httpMethod: "DELETE",
    path: "Calendar/DELETE/PeriodAvailabilities",
    requestBody: {
        parameterPath: "periodAvailabilityIds",
        mapper: {
            required: true,
            serializedName: "periodAvailabilityIds",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Uuid"
                    }
                }
            }
        }
    },
    responses: {
        404: {},
        default: {}
    },
    serializer: serializer
};
var deletePeriodAvailabilityGroupOperationSpec = {
    httpMethod: "DELETE",
    path: "Calendar/DELETE/PeriodAvailabilityGroup",
    queryParameters: [
        Parameters.periodAvailabilityGroupId
    ],
    responses: {
        404: {},
        default: {}
    },
    serializer: serializer
};
var deletePeriodAvailabilityRoleLinkOperationSpec = {
    httpMethod: "DELETE",
    path: "Calendar/DELETE/PeriodAvailabilityRoleLink",
    queryParameters: [
        Parameters.id0
    ],
    responses: {
        404: {},
        default: {}
    },
    serializer: serializer
};
var deletePeriodAvailabilityJudicialFileLinkOperationSpec = {
    httpMethod: "DELETE",
    path: "Calendar/DELETE/PeriodAvailabilityJudicialFileLink",
    queryParameters: [
        Parameters.periodAvailabilityId,
        Parameters.judicialFileId
    ],
    responses: {
        204: {},
        default: {}
    },
    serializer: serializer
};
var deleteBaseCalendarLocationRoomLinkOperationSpec = {
    httpMethod: "DELETE",
    path: "Calendar/DELETE/BaseCalendarLocationRoomLink",
    queryParameters: [
        Parameters.baseCalendarId,
        Parameters.locationRoomId
    ],
    responses: {
        404: {},
        default: {}
    },
    serializer: serializer
};
var deleteAssignmentCycleOperationSpec = {
    httpMethod: "DELETE",
    path: "Calendar/DELETE/AssignmentCycle",
    queryParameters: [
        Parameters.cycleId
    ],
    responses: {
        400: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var deleteSchedulePatternOperationSpec = {
    httpMethod: "DELETE",
    path: "Calendar/DELETE/SchedulePattern",
    queryParameters: [
        Parameters.schedulePatternId
    ],
    responses: {
        404: {},
        default: {}
    },
    serializer: serializer
};
var deleteScheduleEntryOperationSpec = {
    httpMethod: "DELETE",
    path: "Calendar/DELETE/ScheduleEntry",
    queryParameters: [
        Parameters.scheduleEntryId
    ],
    responses: {
        404: {},
        default: {}
    },
    serializer: serializer
};
var deleteAssignmentCyclesOperationSpec = {
    httpMethod: "DELETE",
    path: "Calendar/DELETE/AssignmentCycles",
    requestBody: {
        parameterPath: "cycleIds",
        mapper: {
            required: true,
            serializedName: "cycleIds",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Uuid"
                    }
                }
            }
        }
    },
    responses: {
        404: {},
        default: {}
    },
    serializer: serializer
};
var deletePeriodAvailabilityRoleLinksOperationSpec = {
    httpMethod: "DELETE",
    path: "Calendar/DELETE/PeriodAvailabilityRoleLinks",
    requestBody: {
        parameterPath: "periodAvailabilityRoleLinkIds",
        mapper: {
            required: true,
            serializedName: "periodAvailabilityRoleLinkIds",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Uuid"
                    }
                }
            }
        }
    },
    responses: {
        404: {},
        default: {}
    },
    serializer: serializer
};
var deleteClosedDaysOperationSpec = {
    httpMethod: "DELETE",
    path: "Calendar/DELETE/ClosedDays",
    requestBody: {
        parameterPath: "closedDayIds",
        mapper: {
            required: true,
            serializedName: "closedDayIds",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Uuid"
                    }
                }
            }
        }
    },
    responses: {
        404: {},
        default: {}
    },
    serializer: serializer
};
var deleteEventOperationSpec = {
    httpMethod: "DELETE",
    path: "Calendar/DELETE/Event",
    queryParameters: [
        Parameters.eventId,
        Parameters.fileId0
    ],
    responses: {
        404: {},
        default: {}
    },
    serializer: serializer
};
var deleteAllEventsOperationSpec = {
    httpMethod: "DELETE",
    path: "Calendar/DELETE/AllEvents",
    queryParameters: [
        Parameters.calendarId1
    ],
    responses: {
        204: {},
        default: {}
    },
    serializer: serializer
};
var deleteBehaviorsOperationSpec = {
    httpMethod: "DELETE",
    path: "Calendar/DELETE/Behaviors",
    queryParameters: [
        Parameters.eventId,
        Parameters.fileId0
    ],
    requestBody: {
        parameterPath: "behaviors",
        mapper: {
            required: true,
            serializedName: "behaviors",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    },
    responses: {
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getEventsOperationSpec = {
    httpMethod: "POST",
    path: "Calendar/POST/Events",
    requestBody: {
        parameterPath: "requestModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedCalendarModelsEventApiResquestData, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelSharedCalendarModelsEventApiResponseData
        },
        default: {}
    },
    serializer: serializer
};
var getFullCalendarOperationSpec = {
    httpMethod: "POST",
    path: "Calendar/POST/FullCalendar",
    requestBody: {
        parameterPath: "requestModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedCalendarModelsFullCalendarApiRequestData, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelSharedCalendarModelsFullCalendarApiResponseData
        },
        default: {}
    },
    serializer: serializer
};
var createBaseCalendarOperationSpec = {
    httpMethod: "POST",
    path: "Calendar/POST/CreateBaseCalendar",
    requestBody: {
        parameterPath: "baseCalendarData",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelServiceContractsCalendarBaseCalendarCreateData, { required: true })
    },
    responses: {
        400: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var createPeriodAvailabilityOperationSpec = {
    httpMethod: "POST",
    path: "Calendar/POST/CreatePeriodAvailability",
    requestBody: {
        parameterPath: "period",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelServiceContractsCalendarPeriodAvailabilityCreateData, { required: true })
    },
    responses: {
        400: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var createPeriodAvailabilityGroupOperationSpec = {
    httpMethod: "POST",
    path: "Calendar/POST/CreatePeriodAvailabilityGroup",
    requestBody: {
        parameterPath: "periodAvailabilities",
        mapper: {
            required: true,
            serializedName: "periodAvailabilities",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "CyberjusticeLabKernelServiceContractsCalendarPeriodAvailabilityCreateData"
                    }
                }
            }
        }
    },
    responses: {
        400: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var baseCalendarAddClosedWeekdayOperationSpec = {
    httpMethod: "POST",
    path: "Calendar/POST/BaseCalendarAddClosedWeekday",
    requestBody: {
        parameterPath: "day",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelServiceContractsCalendarClosedWeekdayData, { required: true })
    },
    responses: {
        400: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var createClosedDayOperationSpec = {
    httpMethod: "POST",
    path: "Calendar/POST/CreateClosedDay",
    requestBody: {
        parameterPath: "day",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelServiceContractsCalendarClosedDayCreateData, { required: true })
    },
    responses: {
        400: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var createAssignmentCycleOperationSpec = {
    httpMethod: "POST",
    path: "Calendar/POST/CreateAssignmentCycle",
    requestBody: {
        parameterPath: "cycleData",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelServiceContractsCalendarAssignmentCycleCreateData, { required: true })
    },
    responses: {
        400: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var createPeriodAvailabilityRoleLinkOperationSpec = {
    httpMethod: "POST",
    path: "Calendar/POST/CreatePeriodAvailabilityRoleLink",
    requestBody: {
        parameterPath: "roleData",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelServiceContractsCalendarPeriodAvailabilityRoleCreateData, { required: true })
    },
    responses: {
        404: {},
        default: {}
    },
    serializer: serializer
};
var createPeriodAvailabilityJudicialFileLinkOperationSpec = {
    httpMethod: "POST",
    path: "Calendar/POST/CreatePeriodAvailabilityJudicialFileLink",
    requestBody: {
        parameterPath: "fileLink",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelServiceContractsCalendarPeriodAvailabilityJudicialFileData, { required: true })
    },
    responses: {
        404: {},
        default: {}
    },
    serializer: serializer
};
var createPeriodAvailabilitiesFromPatternOperationSpec = {
    httpMethod: "POST",
    path: "Calendar/POST/CreatePeriodAvailabilitiesFromPattern",
    requestBody: {
        parameterPath: "request",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelServiceContractsCalendarSchedulePatternCopyRequestData, { required: true })
    },
    responses: {
        400: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var createSchedulePatternOperationSpec = {
    httpMethod: "POST",
    path: "Calendar/POST/CreateSchedulePattern",
    requestBody: {
        parameterPath: "schedulePattern",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelServiceContractsCalendarSchedulePatternCreateData, { required: true })
    },
    responses: {
        400: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var createScheduleEntryOperationSpec = {
    httpMethod: "POST",
    path: "Calendar/POST/CreateScheduleEntry",
    requestBody: {
        parameterPath: "scheduleEntry",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelServiceContractsCalendarScheduleEntryCreateData, { required: true })
    },
    responses: {
        400: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var createCalendarOperationSpec = {
    httpMethod: "POST",
    path: "Calendar/POST/CreateCalendar",
    requestBody: {
        parameterPath: "calendarModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedCalendarModelsCreateCalendarModel, { required: true })
    },
    responses: {
        403: {},
        default: {}
    },
    serializer: serializer
};
var createEventOperationSpec = {
    httpMethod: "POST",
    path: "Calendar/POST/CreateEvent",
    requestBody: {
        parameterPath: "eventModel",
        mapper: tslib_1.__assign({}, Mappers.CyberjusticeLabKernelSharedCalendarModelsCreateEventModel, { required: true })
    },
    responses: {
        403: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var getBaseCalendarsOperationSpec = {
    httpMethod: "GET",
    path: "Calendar/GET/BaseCalendars",
    queryParameters: [
        Parameters.baseCalendarIds,
        Parameters.judicialEntityIds,
        Parameters.roomIds,
        Parameters.periodAvailabilityIds,
        Parameters.closedDayIds,
        Parameters.userCodes,
        Parameters.userRoles,
        Parameters.statuses,
        Parameters.startDate,
        Parameters.endDate,
        Parameters.calendarTypes
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelServiceContractsCalendarBaseCalendarData"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getPeriodAvailabilitiesOperationSpec = {
    httpMethod: "GET",
    path: "Calendar/GET/PeriodAvailabilities",
    queryParameters: [
        Parameters.periodAvailabilityIds,
        Parameters.baseCalendarIds,
        Parameters.partyEntityIds,
        Parameters.fileIds0,
        Parameters.startDate,
        Parameters.endDate
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelServiceContractsCalendarPeriodAvailabilityData"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getPeriodAvailabilitiesOfUserOperationSpec = {
    httpMethod: "GET",
    path: "Calendar/GET/PeriodAvailabilitiesOfUser",
    queryParameters: [
        Parameters.realm,
        Parameters.userId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelServiceContractsCalendarPeriodAvailabilityData"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getClosedDaysOperationSpec = {
    httpMethod: "GET",
    path: "Calendar/GET/ClosedDays",
    queryParameters: [
        Parameters.closedDayIds,
        Parameters.startDate,
        Parameters.endDate
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelServiceContractsCalendarClosedDayData"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getAssignmentCyclesOperationSpec = {
    httpMethod: "GET",
    path: "Calendar/GET/AssignmentCycles",
    queryParameters: [
        Parameters.cycleIds,
        Parameters.resourceTypes,
        Parameters.statuses,
        Parameters.startDate,
        Parameters.endDate
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelServiceContractsCalendarAssignmentCycleData"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getSchedulePatternsOperationSpec = {
    httpMethod: "GET",
    path: "Calendar/GET/SchedulePatterns",
    queryParameters: [
        Parameters.schedulePatternIds,
        Parameters.roomIds
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelServiceContractsCalendarSchedulePatternData"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getScheduleEntryOperationSpec = {
    httpMethod: "GET",
    path: "Calendar/GET/ScheduleEntry",
    queryParameters: [
        Parameters.entryId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CyberjusticeLabKernelServiceContractsCalendarSchedulePatternData
        },
        default: {}
    },
    serializer: serializer
};
var getFileCalendarsOperationSpec = {
    httpMethod: "GET",
    path: "Calendar/GET/FileCalendars",
    queryParameters: [
        Parameters.fileId0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CyberjusticeLabKernelSharedCalendarModelsCalendarModel"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getFilesWithCurrentEventsOperationSpec = {
    httpMethod: "GET",
    path: "Calendar/GET/FilesWithCurrentEvents",
    queryParameters: [
        Parameters.fileIds1,
        Parameters.fileStatus
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Uuid"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
//# sourceMappingURL=calendar.js.map