/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/judicialFileMappers";
import * as Parameters from "../models/parameters";
import { CyberjusticeAPIsContext } from "../cyberjusticeAPIsContext";

/** Class representing a JudicialFile. */
export class JudicialFile {
  private readonly client: CyberjusticeAPIsContext;

  /**
   * Create a JudicialFile.
   * @param {CyberjusticeAPIsContext} client Reference to the service client.
   */
  constructor(client: CyberjusticeAPIsContext) {
    this.client = client;
  }

  /**
   * @summary Delete a party.
   * @param partyId Party Guid.
   * @param lastModified Last time the party was modified
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteParty(partyId: string, lastModified: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param partyId Party Guid.
   * @param lastModified Last time the party was modified
   * @param callback The callback
   */
  deleteParty(partyId: string, lastModified: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param partyId Party Guid.
   * @param lastModified Last time the party was modified
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteParty(partyId: string, lastModified: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteParty(partyId: string, lastModified: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        partyId,
        lastModified,
        options
      },
      deletePartyOperationSpec,
      callback);
  }

  /**
   * @summary Delete a party invitation.
   * @param partyInvitationId Party invitation Guid.
   * @param [options] The optional parameters
   * @deprecated This operation is deprecated. Please do not use it any longer.
   * @returns Promise<msRest.RestResponse>
   */
  deletePartyInvitation(partyInvitationId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param partyInvitationId Party invitation Guid.
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  deletePartyInvitation(partyInvitationId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param partyInvitationId Party invitation Guid.
   * @param options The optional parameters
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  deletePartyInvitation(partyInvitationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deletePartyInvitation(partyInvitationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        partyInvitationId,
        options
      },
      deletePartyInvitationOperationSpec,
      callback);
  }

  /**
   * @summary Delete a file invitation.
   * @param fileInvitationId File invitation Guid.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteFileInvitation(fileInvitationId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param fileInvitationId File invitation Guid.
   * @param callback The callback
   */
  deleteFileInvitation(fileInvitationId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param fileInvitationId File invitation Guid.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteFileInvitation(fileInvitationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteFileInvitation(fileInvitationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        fileInvitationId,
        options
      },
      deleteFileInvitationOperationSpec,
      callback);
  }

  /**
   * @summary Delete a file tag link.
   * @param fileId The file id.
   * @param tagCode The tag code linked to the file.
   * @param modifiedTicks The modified date in ticks.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteFileTagLink(fileId: string, tagCode: string, modifiedTicks: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param fileId The file id.
   * @param tagCode The tag code linked to the file.
   * @param modifiedTicks The modified date in ticks.
   * @param callback The callback
   */
  deleteFileTagLink(fileId: string, tagCode: string, modifiedTicks: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param fileId The file id.
   * @param tagCode The tag code linked to the file.
   * @param modifiedTicks The modified date in ticks.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteFileTagLink(fileId: string, tagCode: string, modifiedTicks: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteFileTagLink(fileId: string, tagCode: string, modifiedTicks: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        fileId,
        tagCode,
        modifiedTicks,
        options
      },
      deleteFileTagLinkOperationSpec,
      callback);
  }

  /**
   * @summary Delete a notification.
   * @param notificationId The notification identifier to delete.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteNotification(notificationId: number, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param notificationId The notification identifier to delete.
   * @param callback The callback
   */
  deleteNotification(notificationId: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param notificationId The notification identifier to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteNotification(notificationId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteNotification(notificationId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        notificationId,
        options
      },
      deleteNotificationOperationSpec,
      callback);
  }

  /**
   * Instead use POST/Files.
   * @summary Get the available files according to the authenticated person role.
   * @param [options] The optional parameters
   * @deprecated This operation is deprecated. Please do not use it any longer.
   * @returns Promise<Models.JudicialFileGetFilesResponse>
   */
  getFiles(options?: Models.JudicialFileGetFilesOptionalParams): Promise<Models.JudicialFileGetFilesResponse>;
  /**
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  getFiles(callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileData[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  getFiles(options: Models.JudicialFileGetFilesOptionalParams, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileData[]>): void;
  getFiles(options?: Models.JudicialFileGetFilesOptionalParams | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileData[]>): Promise<Models.JudicialFileGetFilesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getFilesOperationSpec,
      callback) as Promise<Models.JudicialFileGetFilesResponse>;
  }

  /**
   * @summary Get the list of judicial files.
   * @param requestModel Request filter model.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileGetFiles1Response>
   */
  getFiles1(requestModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileApiResquestData, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileGetFiles1Response>;
  /**
   * @param requestModel Request filter model.
   * @param callback The callback
   */
  getFiles1(requestModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileApiResquestData, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileApiResponseData>): void;
  /**
   * @param requestModel Request filter model.
   * @param options The optional parameters
   * @param callback The callback
   */
  getFiles1(requestModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileApiResquestData, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileApiResponseData>): void;
  getFiles1(requestModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileApiResquestData, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileApiResponseData>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileApiResponseData>): Promise<Models.JudicialFileGetFiles1Response> {
    return this.client.sendOperationRequest(
      {
        requestModel,
        options
      },
      getFiles1OperationSpec,
      callback) as Promise<Models.JudicialFileGetFiles1Response>;
  }

  /**
   * This API is obsolete, there is no need using it now, instead use POST/Files.
   * @summary Get the count of available files according to the authenticated person role.
   * @param [options] The optional parameters
   * @deprecated This operation is deprecated. Please do not use it any longer.
   * @returns Promise<Models.JudicialFileGetFilesCountResponse>
   */
  getFilesCount(options?: Models.JudicialFileGetFilesCountOptionalParams): Promise<Models.JudicialFileGetFilesCountResponse>;
  /**
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  getFilesCount(callback: msRest.ServiceCallback<number>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  getFilesCount(options: Models.JudicialFileGetFilesCountOptionalParams, callback: msRest.ServiceCallback<number>): void;
  getFilesCount(options?: Models.JudicialFileGetFilesCountOptionalParams | msRest.ServiceCallback<number>, callback?: msRest.ServiceCallback<number>): Promise<Models.JudicialFileGetFilesCountResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getFilesCountOperationSpec,
      callback) as Promise<Models.JudicialFileGetFilesCountResponse>;
  }

  /**
   * @summary Get a Judicial File.
   * @param fileId Identification of the requested file..
   * @param [options] The optional parameters
   * @deprecated This operation is deprecated. Please do not use it any longer.
   * @returns Promise<Models.JudicialFileGetFileResponse>
   */
  getFile(fileId: string, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileGetFileResponse>;
  /**
   * @param fileId Identification of the requested file..
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  getFile(fileId: string, callback: msRest.ServiceCallback<number>): void;
  /**
   * @param fileId Identification of the requested file..
   * @param options The optional parameters
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  getFile(fileId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number>): void;
  getFile(fileId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<number>, callback?: msRest.ServiceCallback<number>): Promise<Models.JudicialFileGetFileResponse> {
    return this.client.sendOperationRequest(
      {
        fileId,
        options
      },
      getFileOperationSpec,
      callback) as Promise<Models.JudicialFileGetFileResponse>;
  }

  /**
   * @summary Get a narrow set of the requested file's properties.
   * This method returns as little information as possible to stay efficient even with many results.
   * It is preferable to create another method and DTO than expand this specific DTO.
   * @param [options] The optional parameters
   * @deprecated This operation is deprecated. Please do not use it any longer.
   * @returns Promise<Models.JudicialFileGetFilesSet1Response>
   */
  getFilesSet1(options?: Models.JudicialFileGetFilesSet1OptionalParams): Promise<Models.JudicialFileGetFilesSet1Response>;
  /**
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  getFilesSet1(callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileSet1Data>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  getFilesSet1(options: Models.JudicialFileGetFilesSet1OptionalParams, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileSet1Data>): void;
  getFilesSet1(options?: Models.JudicialFileGetFilesSet1OptionalParams | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileSet1Data>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileSet1Data>): Promise<Models.JudicialFileGetFilesSet1Response> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getFilesSet1OperationSpec,
      callback) as Promise<Models.JudicialFileGetFilesSet1Response>;
  }

  /**
   * @summary Get a narrow set of the requested file's properties.
   * This method returns as little information as possible to stay efficient even with many results.
   * It is preferable to create another method and DTO than expand this specific DTO.
   * @param [options] The optional parameters
   * @deprecated This operation is deprecated. Please do not use it any longer.
   * @returns Promise<Models.JudicialFileGetFilesSet2Response>
   */
  getFilesSet2(options?: Models.JudicialFileGetFilesSet2OptionalParams): Promise<Models.JudicialFileGetFilesSet2Response>;
  /**
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  getFilesSet2(callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileSet2Data>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  getFilesSet2(options: Models.JudicialFileGetFilesSet2OptionalParams, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileSet2Data>): void;
  getFilesSet2(options?: Models.JudicialFileGetFilesSet2OptionalParams | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileSet2Data>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileSet2Data>): Promise<Models.JudicialFileGetFilesSet2Response> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getFilesSet2OperationSpec,
      callback) as Promise<Models.JudicialFileGetFilesSet2Response>;
  }

  /**
   * The search parameters should contains only one element. A new version of this service should be
   * created.
   * @summary Get the available party entities according to the authenticated role.
   * @param [options] The optional parameters
   * @deprecated This operation is deprecated. Please do not use it any longer.
   * @returns Promise<Models.JudicialFileGetPartyEntitiesResponse>
   */
  getPartyEntities(options?: Models.JudicialFileGetPartyEntitiesOptionalParams): Promise<Models.JudicialFileGetPartyEntitiesResponse>;
  /**
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  getPartyEntities(callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFilePartyEntityData[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  getPartyEntities(options: Models.JudicialFileGetPartyEntitiesOptionalParams, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFilePartyEntityData[]>): void;
  getPartyEntities(options?: Models.JudicialFileGetPartyEntitiesOptionalParams | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFilePartyEntityData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFilePartyEntityData[]>): Promise<Models.JudicialFileGetPartyEntitiesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getPartyEntitiesOperationSpec,
      callback) as Promise<Models.JudicialFileGetPartyEntitiesResponse>;
  }

  /**
   * @summary Get the files of a label (the label from the Tag service).
   * @param labelId Label Guid from the Tag service.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileGetFilesOfLabelResponse>
   */
  getFilesOfLabel(labelId: string, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileGetFilesOfLabelResponse>;
  /**
   * @param labelId Label Guid from the Tag service.
   * @param callback The callback
   */
  getFilesOfLabel(labelId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileData[]>): void;
  /**
   * @param labelId Label Guid from the Tag service.
   * @param options The optional parameters
   * @param callback The callback
   */
  getFilesOfLabel(labelId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileData[]>): void;
  getFilesOfLabel(labelId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileData[]>): Promise<Models.JudicialFileGetFilesOfLabelResponse> {
    return this.client.sendOperationRequest(
      {
        labelId,
        options
      },
      getFilesOfLabelOperationSpec,
      callback) as Promise<Models.JudicialFileGetFilesOfLabelResponse>;
  }

  /**
   * @summary Get the files of a tag code (the tag code from the Tag service).
   * @param tagCode Tag code from the Tag service.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileGetFilesOfTagCodeResponse>
   */
  getFilesOfTagCode(tagCode: string, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileGetFilesOfTagCodeResponse>;
  /**
   * @param tagCode Tag code from the Tag service.
   * @param callback The callback
   */
  getFilesOfTagCode(tagCode: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileData[]>): void;
  /**
   * @param tagCode Tag code from the Tag service.
   * @param options The optional parameters
   * @param callback The callback
   */
  getFilesOfTagCode(tagCode: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileData[]>): void;
  getFilesOfTagCode(tagCode: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileData[]>): Promise<Models.JudicialFileGetFilesOfTagCodeResponse> {
    return this.client.sendOperationRequest(
      {
        tagCode,
        options
      },
      getFilesOfTagCodeOperationSpec,
      callback) as Promise<Models.JudicialFileGetFilesOfTagCodeResponse>;
  }

  /**
   * @summary Get all business rules with related entities.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileGetBusinessRulesResponse>
   */
  getBusinessRules(options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileGetBusinessRulesResponse>;
  /**
   * @param callback The callback
   */
  getBusinessRules(callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileBusinessRuleData[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBusinessRules(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileBusinessRuleData[]>): void;
  getBusinessRules(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileBusinessRuleData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileBusinessRuleData[]>): Promise<Models.JudicialFileGetBusinessRulesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBusinessRulesOperationSpec,
      callback) as Promise<Models.JudicialFileGetBusinessRulesResponse>;
  }

  /**
   * Administrators only.
   * @summary Get all the representatives.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileGetRepresentativeUsersResponse>
   */
  getRepresentativeUsers(options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileGetRepresentativeUsersResponse>;
  /**
   * @param callback The callback
   */
  getRepresentativeUsers(callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileRepresentativeUserData[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getRepresentativeUsers(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileRepresentativeUserData[]>): void;
  getRepresentativeUsers(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileRepresentativeUserData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileRepresentativeUserData[]>): Promise<Models.JudicialFileGetRepresentativeUsersResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getRepresentativeUsersOperationSpec,
      callback) as Promise<Models.JudicialFileGetRepresentativeUsersResponse>;
  }

  /**
   * @summary Get the profile of the current representative.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileGetRepresentativeProfileResponse>
   */
  getRepresentativeProfile(options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileGetRepresentativeProfileResponse>;
  /**
   * @param callback The callback
   */
  getRepresentativeProfile(callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileRepresentativeProfileData>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getRepresentativeProfile(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileRepresentativeProfileData>): void;
  getRepresentativeProfile(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileRepresentativeProfileData>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileRepresentativeProfileData>): Promise<Models.JudicialFileGetRepresentativeProfileResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getRepresentativeProfileOperationSpec,
      callback) as Promise<Models.JudicialFileGetRepresentativeProfileResponse>;
  }

  /**
   * @summary Get the specified representative profile.
   * @param representativeId Representative Guid.
   * @param username Representative username.
   * @param partyId Any party Id that the target representative is linked to, for security purposes.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileGetTargetRepresentativeProfileResponse>
   */
  getTargetRepresentativeProfile(representativeId: string, username: string, partyId: string, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileGetTargetRepresentativeProfileResponse>;
  /**
   * @param representativeId Representative Guid.
   * @param username Representative username.
   * @param partyId Any party Id that the target representative is linked to, for security purposes.
   * @param callback The callback
   */
  getTargetRepresentativeProfile(representativeId: string, username: string, partyId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileRepresentativeProfileData>): void;
  /**
   * @param representativeId Representative Guid.
   * @param username Representative username.
   * @param partyId Any party Id that the target representative is linked to, for security purposes.
   * @param options The optional parameters
   * @param callback The callback
   */
  getTargetRepresentativeProfile(representativeId: string, username: string, partyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileRepresentativeProfileData>): void;
  getTargetRepresentativeProfile(representativeId: string, username: string, partyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileRepresentativeProfileData>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileRepresentativeProfileData>): Promise<Models.JudicialFileGetTargetRepresentativeProfileResponse> {
    return this.client.sendOperationRequest(
      {
        representativeId,
        username,
        partyId,
        options
      },
      getTargetRepresentativeProfileOperationSpec,
      callback) as Promise<Models.JudicialFileGetTargetRepresentativeProfileResponse>;
  }

  /**
   * @summary Get the list of neutrals for a given judicial entity.
   * @param urn the URN code of the judicial entity.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileGetRepresentativeNeutralListResponse>
   */
  getRepresentativeNeutralList(urn: string, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileGetRepresentativeNeutralListResponse>;
  /**
   * @param urn the URN code of the judicial entity.
   * @param callback The callback
   */
  getRepresentativeNeutralList(urn: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileRepresentativeUserData[]>): void;
  /**
   * @param urn the URN code of the judicial entity.
   * @param options The optional parameters
   * @param callback The callback
   */
  getRepresentativeNeutralList(urn: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileRepresentativeUserData[]>): void;
  getRepresentativeNeutralList(urn: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileRepresentativeUserData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileRepresentativeUserData[]>): Promise<Models.JudicialFileGetRepresentativeNeutralListResponse> {
    return this.client.sendOperationRequest(
      {
        urn,
        options
      },
      getRepresentativeNeutralListOperationSpec,
      callback) as Promise<Models.JudicialFileGetRepresentativeNeutralListResponse>;
  }

  /**
   * @summary Checks if a date would trigger an optimistic concurrency exception on a file.
   * @param fileId The file to verify.
   * @param modifiedTicks The last known modified date of the file.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileCheckForFileOptimisticConcurrencyResponse>
   */
  checkForFileOptimisticConcurrency(fileId: string, modifiedTicks: string, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileCheckForFileOptimisticConcurrencyResponse>;
  /**
   * @param fileId The file to verify.
   * @param modifiedTicks The last known modified date of the file.
   * @param callback The callback
   */
  checkForFileOptimisticConcurrency(fileId: string, modifiedTicks: string, callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param fileId The file to verify.
   * @param modifiedTicks The last known modified date of the file.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkForFileOptimisticConcurrency(fileId: string, modifiedTicks: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
  checkForFileOptimisticConcurrency(fileId: string, modifiedTicks: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.JudicialFileCheckForFileOptimisticConcurrencyResponse> {
    return this.client.sendOperationRequest(
      {
        fileId,
        modifiedTicks,
        options
      },
      checkForFileOptimisticConcurrencyOperationSpec,
      callback) as Promise<Models.JudicialFileCheckForFileOptimisticConcurrencyResponse>;
  }

  /**
   * @summary Get the list of neutrals and their zip codes in the given judicial entity.
   * @param urn The URN code of the judicial entity.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileGetNeutralZipCodeDataListResponse>
   */
  getNeutralZipCodeDataList(urn: string, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileGetNeutralZipCodeDataListResponse>;
  /**
   * @param urn The URN code of the judicial entity.
   * @param callback The callback
   */
  getNeutralZipCodeDataList(urn: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileNeutralZipCodeData[]>): void;
  /**
   * @param urn The URN code of the judicial entity.
   * @param options The optional parameters
   * @param callback The callback
   */
  getNeutralZipCodeDataList(urn: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileNeutralZipCodeData[]>): void;
  getNeutralZipCodeDataList(urn: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileNeutralZipCodeData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileNeutralZipCodeData[]>): Promise<Models.JudicialFileGetNeutralZipCodeDataListResponse> {
    return this.client.sendOperationRequest(
      {
        urn,
        options
      },
      getNeutralZipCodeDataListOperationSpec,
      callback) as Promise<Models.JudicialFileGetNeutralZipCodeDataListResponse>;
  }

  /**
   * @summary Verify the existence of a file from a judicial file Id in a judicial entity Id.
   * All users have access to this function.
   * @param judicialFileId The file identifier.
   * @param judicialEntityId The judicial entity.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileGetFileVerifyDataResponse>
   */
  getFileVerifyData(judicialFileId: string, judicialEntityId: string, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileGetFileVerifyDataResponse>;
  /**
   * @param judicialFileId The file identifier.
   * @param judicialEntityId The judicial entity.
   * @param callback The callback
   */
  getFileVerifyData(judicialFileId: string, judicialEntityId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileVerifyData>): void;
  /**
   * @param judicialFileId The file identifier.
   * @param judicialEntityId The judicial entity.
   * @param options The optional parameters
   * @param callback The callback
   */
  getFileVerifyData(judicialFileId: string, judicialEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileVerifyData>): void;
  getFileVerifyData(judicialFileId: string, judicialEntityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileVerifyData>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileVerifyData>): Promise<Models.JudicialFileGetFileVerifyDataResponse> {
    return this.client.sendOperationRequest(
      {
        judicialFileId,
        judicialEntityId,
        options
      },
      getFileVerifyDataOperationSpec,
      callback) as Promise<Models.JudicialFileGetFileVerifyDataResponse>;
  }

  /**
   * @summary Get a party invitation.
   * @param partyInvitationId The party invitation Guid.
   * @param [options] The optional parameters
   * @deprecated This operation is deprecated. Please do not use it any longer.
   * @returns Promise<Models.JudicialFileGetPartyInvitationResponse>
   */
  getPartyInvitation(partyInvitationId: string, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileGetPartyInvitationResponse>;
  /**
   * @param partyInvitationId The party invitation Guid.
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  getPartyInvitation(partyInvitationId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param partyInvitationId The party invitation Guid.
   * @param options The optional parameters
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  getPartyInvitation(partyInvitationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getPartyInvitation(partyInvitationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JudicialFileGetPartyInvitationResponse> {
    return this.client.sendOperationRequest(
      {
        partyInvitationId,
        options
      },
      getPartyInvitationOperationSpec,
      callback) as Promise<Models.JudicialFileGetPartyInvitationResponse>;
  }

  /**
   * @summary Get the party invitations from a specific party Id.
   * @param partyId The party Guid.
   * @param [options] The optional parameters
   * @deprecated This operation is deprecated. Please do not use it any longer.
   * @returns Promise<Models.JudicialFileGetPartyInvitationsOfPartyResponse>
   */
  getPartyInvitationsOfParty(partyId: string, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileGetPartyInvitationsOfPartyResponse>;
  /**
   * @param partyId The party Guid.
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  getPartyInvitationsOfParty(partyId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param partyId The party Guid.
   * @param options The optional parameters
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  getPartyInvitationsOfParty(partyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getPartyInvitationsOfParty(partyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JudicialFileGetPartyInvitationsOfPartyResponse> {
    return this.client.sendOperationRequest(
      {
        partyId,
        options
      },
      getPartyInvitationsOfPartyOperationSpec,
      callback) as Promise<Models.JudicialFileGetPartyInvitationsOfPartyResponse>;
  }

  /**
   * @summary Get the file invitations from a specific party Id.
   * @param partyId The party Guid.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileGetFileInvitationsOfPartyResponse>
   */
  getFileInvitationsOfParty(partyId: string, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileGetFileInvitationsOfPartyResponse>;
  /**
   * @param partyId The party Guid.
   * @param callback The callback
   */
  getFileInvitationsOfParty(partyId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationModel[]>): void;
  /**
   * @param partyId The party Guid.
   * @param options The optional parameters
   * @param callback The callback
   */
  getFileInvitationsOfParty(partyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationModel[]>): void;
  getFileInvitationsOfParty(partyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationModel[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationModel[]>): Promise<Models.JudicialFileGetFileInvitationsOfPartyResponse> {
    return this.client.sendOperationRequest(
      {
        partyId,
        options
      },
      getFileInvitationsOfPartyOperationSpec,
      callback) as Promise<Models.JudicialFileGetFileInvitationsOfPartyResponse>;
  }

  /**
   * @summary Get the file invitation information.
   * @param code The Invitation Code.
   * @param judicialFileId The JudicialFileId.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileGetFileInvitationInformationResponse>
   */
  getFileInvitationInformation(code: string, judicialFileId: string, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileGetFileInvitationInformationResponse>;
  /**
   * @param code The Invitation Code.
   * @param judicialFileId The JudicialFileId.
   * @param callback The callback
   */
  getFileInvitationInformation(code: string, judicialFileId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationInformationModel>): void;
  /**
   * @param code The Invitation Code.
   * @param judicialFileId The JudicialFileId.
   * @param options The optional parameters
   * @param callback The callback
   */
  getFileInvitationInformation(code: string, judicialFileId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationInformationModel>): void;
  getFileInvitationInformation(code: string, judicialFileId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationInformationModel>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationInformationModel>): Promise<Models.JudicialFileGetFileInvitationInformationResponse> {
    return this.client.sendOperationRequest(
      {
        code,
        judicialFileId,
        options
      },
      getFileInvitationInformationOperationSpec,
      callback) as Promise<Models.JudicialFileGetFileInvitationInformationResponse>;
  }

  /**
   * @summary Use the invitationId to get some basic information about the file.
   * @param invitationId The party invitation Guid.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileGetFileInformationFromPartyInvitationResponse>
   */
  getFileInformationFromPartyInvitation(invitationId: string, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileGetFileInformationFromPartyInvitationResponse>;
  /**
   * @param invitationId The party invitation Guid.
   * @param callback The callback
   */
  getFileInformationFromPartyInvitation(invitationId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsFileInformationFromPartyInvitationModel>): void;
  /**
   * @param invitationId The party invitation Guid.
   * @param options The optional parameters
   * @param callback The callback
   */
  getFileInformationFromPartyInvitation(invitationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsFileInformationFromPartyInvitationModel>): void;
  getFileInformationFromPartyInvitation(invitationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsFileInformationFromPartyInvitationModel>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsFileInformationFromPartyInvitationModel>): Promise<Models.JudicialFileGetFileInformationFromPartyInvitationResponse> {
    return this.client.sendOperationRequest(
      {
        invitationId,
        options
      },
      getFileInformationFromPartyInvitationOperationSpec,
      callback) as Promise<Models.JudicialFileGetFileInformationFromPartyInvitationResponse>;
  }

  /**
   * @summary Get the new notifications count for the current user.
   * @param judicialEntityId Id of the judicial entity the notifications belongs to.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileGetNewNotificationsCountResponse>
   */
  getNewNotificationsCount(judicialEntityId: string, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileGetNewNotificationsCountResponse>;
  /**
   * @param judicialEntityId Id of the judicial entity the notifications belongs to.
   * @param callback The callback
   */
  getNewNotificationsCount(judicialEntityId: string, callback: msRest.ServiceCallback<number>): void;
  /**
   * @param judicialEntityId Id of the judicial entity the notifications belongs to.
   * @param options The optional parameters
   * @param callback The callback
   */
  getNewNotificationsCount(judicialEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number>): void;
  getNewNotificationsCount(judicialEntityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<number>, callback?: msRest.ServiceCallback<number>): Promise<Models.JudicialFileGetNewNotificationsCountResponse> {
    return this.client.sendOperationRequest(
      {
        judicialEntityId,
        options
      },
      getNewNotificationsCountOperationSpec,
      callback) as Promise<Models.JudicialFileGetNewNotificationsCountResponse>;
  }

  /**
   * @summary Get the notifications count by file for the current user.
   * @param take Number of files to return.
   * @param judicialEntityId Id of the judicial entity the notifications belongs to.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileGetNotificationsCountByFileResponse>
   */
  getNotificationsCountByFile(take: number, judicialEntityId: string, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileGetNotificationsCountByFileResponse>;
  /**
   * @param take Number of files to return.
   * @param judicialEntityId Id of the judicial entity the notifications belongs to.
   * @param callback The callback
   */
  getNotificationsCountByFile(take: number, judicialEntityId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationCountByFileModel[]>): void;
  /**
   * @param take Number of files to return.
   * @param judicialEntityId Id of the judicial entity the notifications belongs to.
   * @param options The optional parameters
   * @param callback The callback
   */
  getNotificationsCountByFile(take: number, judicialEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationCountByFileModel[]>): void;
  getNotificationsCountByFile(take: number, judicialEntityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationCountByFileModel[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationCountByFileModel[]>): Promise<Models.JudicialFileGetNotificationsCountByFileResponse> {
    return this.client.sendOperationRequest(
      {
        take,
        judicialEntityId,
        options
      },
      getNotificationsCountByFileOperationSpec,
      callback) as Promise<Models.JudicialFileGetNotificationsCountByFileResponse>;
  }

  /**
   * @summary Get the notifications count by aggregator code for the current user.
   * @param aggregatorsCodes List of aggregator codes by file id.
   * @param judicialEntityId Id of the judicial entity the notifications belongs to.
   * @param aggregatorCodeIsSubstring True if the given aggregator code is a substring. Can be null.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileGetNotificationsCountAggregatorCodeResponse>
   */
  getNotificationsCountAggregatorCode(aggregatorsCodes: string[], judicialEntityId: string, aggregatorCodeIsSubstring: boolean, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileGetNotificationsCountAggregatorCodeResponse>;
  /**
   * @param aggregatorsCodes List of aggregator codes by file id.
   * @param judicialEntityId Id of the judicial entity the notifications belongs to.
   * @param aggregatorCodeIsSubstring True if the given aggregator code is a substring. Can be null.
   * @param callback The callback
   */
  getNotificationsCountAggregatorCode(aggregatorsCodes: string[], judicialEntityId: string, aggregatorCodeIsSubstring: boolean, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationCountByAggregatorCodeModel[]>): void;
  /**
   * @param aggregatorsCodes List of aggregator codes by file id.
   * @param judicialEntityId Id of the judicial entity the notifications belongs to.
   * @param aggregatorCodeIsSubstring True if the given aggregator code is a substring. Can be null.
   * @param options The optional parameters
   * @param callback The callback
   */
  getNotificationsCountAggregatorCode(aggregatorsCodes: string[], judicialEntityId: string, aggregatorCodeIsSubstring: boolean, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationCountByAggregatorCodeModel[]>): void;
  getNotificationsCountAggregatorCode(aggregatorsCodes: string[], judicialEntityId: string, aggregatorCodeIsSubstring: boolean, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationCountByAggregatorCodeModel[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationCountByAggregatorCodeModel[]>): Promise<Models.JudicialFileGetNotificationsCountAggregatorCodeResponse> {
    return this.client.sendOperationRequest(
      {
        aggregatorsCodes,
        judicialEntityId,
        aggregatorCodeIsSubstring,
        options
      },
      getNotificationsCountAggregatorCodeOperationSpec,
      callback) as Promise<Models.JudicialFileGetNotificationsCountAggregatorCodeResponse>;
  }

  /**
   * @summary Get a notification type by code.
   * @param notificationCode Code of the notification type.
   * @param businessRuleName Business rule name.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileGetNotificationTypeResponse>
   */
  getNotificationType(notificationCode: string, businessRuleName: string, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileGetNotificationTypeResponse>;
  /**
   * @param notificationCode Code of the notification type.
   * @param businessRuleName Business rule name.
   * @param callback The callback
   */
  getNotificationType(notificationCode: string, businessRuleName: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationTypeModel>): void;
  /**
   * @param notificationCode Code of the notification type.
   * @param businessRuleName Business rule name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getNotificationType(notificationCode: string, businessRuleName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationTypeModel>): void;
  getNotificationType(notificationCode: string, businessRuleName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationTypeModel>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationTypeModel>): Promise<Models.JudicialFileGetNotificationTypeResponse> {
    return this.client.sendOperationRequest(
      {
        notificationCode,
        businessRuleName,
        options
      },
      getNotificationTypeOperationSpec,
      callback) as Promise<Models.JudicialFileGetNotificationTypeResponse>;
  }

  /**
   * @summary Get the list of distinct log entry codes that happened in a file.
   * @param fileId Requested file.
   * @param currentRole The current user role to access the log entries.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileGetLogEntryDistinctCodesResponse>
   */
  getLogEntryDistinctCodes(fileId: string, currentRole: string, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileGetLogEntryDistinctCodesResponse>;
  /**
   * @param fileId Requested file.
   * @param currentRole The current user role to access the log entries.
   * @param callback The callback
   */
  getLogEntryDistinctCodes(fileId: string, currentRole: string, callback: msRest.ServiceCallback<string[]>): void;
  /**
   * @param fileId Requested file.
   * @param currentRole The current user role to access the log entries.
   * @param options The optional parameters
   * @param callback The callback
   */
  getLogEntryDistinctCodes(fileId: string, currentRole: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string[]>): void;
  getLogEntryDistinctCodes(fileId: string, currentRole: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string[]>, callback?: msRest.ServiceCallback<string[]>): Promise<Models.JudicialFileGetLogEntryDistinctCodesResponse> {
    return this.client.sendOperationRequest(
      {
        fileId,
        currentRole,
        options
      },
      getLogEntryDistinctCodesOperationSpec,
      callback) as Promise<Models.JudicialFileGetLogEntryDistinctCodesResponse>;
  }

  /**
   * @summary Dismiss the file notifications according to the parameters used.
   * The dismissed notifications must correspond to the notification and/or aggregator code.
   * All notifications in the file are dismissed if both codes are null.
   * This can only be used by a representative for its own notifications.
   * @param fileId File Guid.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  dismissNotifications(fileId: string, options?: Models.JudicialFileDismissNotificationsOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param fileId File Guid.
   * @param callback The callback
   */
  dismissNotifications(fileId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param fileId File Guid.
   * @param options The optional parameters
   * @param callback The callback
   */
  dismissNotifications(fileId: string, options: Models.JudicialFileDismissNotificationsOptionalParams, callback: msRest.ServiceCallback<void>): void;
  dismissNotifications(fileId: string, options?: Models.JudicialFileDismissNotificationsOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        fileId,
        options
      },
      dismissNotificationsOperationSpec,
      callback);
  }

  /**
   * @summary Update the status of a representative.
   * @param representativeId The representative to update.
   * @param status The new representative status.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateRepresentativeStatus(representativeId: string, status: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param representativeId The representative to update.
   * @param status The new representative status.
   * @param callback The callback
   */
  updateRepresentativeStatus(representativeId: string, status: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param representativeId The representative to update.
   * @param status The new representative status.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateRepresentativeStatus(representativeId: string, status: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateRepresentativeStatus(representativeId: string, status: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        representativeId,
        status,
        options
      },
      updateRepresentativeStatusOperationSpec,
      callback);
  }

  /**
   * @summary Update the type of a party.
   * @param partyId Identification of the party.
   * @param partyType Type of the party.
   * @param lastModified Last modified time of the party.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updatePartyType(partyId: string, partyType: string, lastModified: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param partyId Identification of the party.
   * @param partyType Type of the party.
   * @param lastModified Last modified time of the party.
   * @param callback The callback
   */
  updatePartyType(partyId: string, partyType: string, lastModified: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param partyId Identification of the party.
   * @param partyType Type of the party.
   * @param lastModified Last modified time of the party.
   * @param options The optional parameters
   * @param callback The callback
   */
  updatePartyType(partyId: string, partyType: string, lastModified: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updatePartyType(partyId: string, partyType: string, lastModified: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        partyId,
        partyType,
        lastModified,
        options
      },
      updatePartyTypeOperationSpec,
      callback);
  }

  /**
   * @summary Update the Dispute Description of a party.
   * @param partyId Identification of the party.
   * @param disputeDescription Dispute description of the party.
   * @param lastModified Last modified time of the party.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updatePartyDisputeDescription(partyId: string, disputeDescription: string, lastModified: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param partyId Identification of the party.
   * @param disputeDescription Dispute description of the party.
   * @param lastModified Last modified time of the party.
   * @param callback The callback
   */
  updatePartyDisputeDescription(partyId: string, disputeDescription: string, lastModified: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param partyId Identification of the party.
   * @param disputeDescription Dispute description of the party.
   * @param lastModified Last modified time of the party.
   * @param options The optional parameters
   * @param callback The callback
   */
  updatePartyDisputeDescription(partyId: string, disputeDescription: string, lastModified: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updatePartyDisputeDescription(partyId: string, disputeDescription: string, lastModified: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        partyId,
        disputeDescription,
        lastModified,
        options
      },
      updatePartyDisputeDescriptionOperationSpec,
      callback);
  }

  /**
   * @summary Update the Expiration date of a file invitation.
   * @param fileInvitationId Identification of the file invitation.
   * @param expiryDate New expiration date of the file invitation.
   * @param lastModified For optimistic concurrency check.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateFileInvitationExpirationDate(fileInvitationId: string, expiryDate: Date | string, lastModified: Date | string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param fileInvitationId Identification of the file invitation.
   * @param expiryDate New expiration date of the file invitation.
   * @param lastModified For optimistic concurrency check.
   * @param callback The callback
   */
  updateFileInvitationExpirationDate(fileInvitationId: string, expiryDate: Date | string, lastModified: Date | string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param fileInvitationId Identification of the file invitation.
   * @param expiryDate New expiration date of the file invitation.
   * @param lastModified For optimistic concurrency check.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateFileInvitationExpirationDate(fileInvitationId: string, expiryDate: Date | string, lastModified: Date | string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateFileInvitationExpirationDate(fileInvitationId: string, expiryDate: Date | string, lastModified: Date | string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        fileInvitationId,
        expiryDate,
        lastModified,
        options
      },
      updateFileInvitationExpirationDateOperationSpec,
      callback);
  }

  /**
   * @summary Update the Expiration date of a party invitation.
   * @param partyInvitationId Identification of the party invitation.
   * @param expiryDate New expiration date of the party invitation.
   * @param [options] The optional parameters
   * @deprecated This operation is deprecated. Please do not use it any longer.
   * @returns Promise<msRest.RestResponse>
   */
  updatePartyInvitationExpirationDate(partyInvitationId: string, expiryDate: Date | string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param partyInvitationId Identification of the party invitation.
   * @param expiryDate New expiration date of the party invitation.
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  updatePartyInvitationExpirationDate(partyInvitationId: string, expiryDate: Date | string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param partyInvitationId Identification of the party invitation.
   * @param expiryDate New expiration date of the party invitation.
   * @param options The optional parameters
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  updatePartyInvitationExpirationDate(partyInvitationId: string, expiryDate: Date | string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updatePartyInvitationExpirationDate(partyInvitationId: string, expiryDate: Date | string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        partyInvitationId,
        expiryDate,
        options
      },
      updatePartyInvitationExpirationDateOperationSpec,
      callback);
  }

  /**
   * @summary Update the status of a file.
   * @param fileId Id of the file.
   * @param fileStatus New judicial file status.
   * @param lastModifiedDate Time stamp of the last modification of the file.  Used for optimistic
   * concurrency check.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateFileStatus(fileId: string, fileStatus: string, lastModifiedDate: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param fileId Id of the file.
   * @param fileStatus New judicial file status.
   * @param lastModifiedDate Time stamp of the last modification of the file.  Used for optimistic
   * concurrency check.
   * @param callback The callback
   */
  updateFileStatus(fileId: string, fileStatus: string, lastModifiedDate: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param fileId Id of the file.
   * @param fileStatus New judicial file status.
   * @param lastModifiedDate Time stamp of the last modification of the file.  Used for optimistic
   * concurrency check.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateFileStatus(fileId: string, fileStatus: string, lastModifiedDate: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateFileStatus(fileId: string, fileStatus: string, lastModifiedDate: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        fileId,
        fileStatus,
        lastModifiedDate,
        options
      },
      updateFileStatusOperationSpec,
      callback);
  }

  /**
   * @summary Create a party invitation.
   * @param createModel The party invitation create model.
   * @param [options] The optional parameters
   * @deprecated This operation is deprecated. Please do not use it any longer.
   * @returns Promise<Models.JudicialFileCreatePartyInvitationResponse>
   */
  createPartyInvitation(createModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsPartyInvitationCreateModel, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileCreatePartyInvitationResponse>;
  /**
   * @param createModel The party invitation create model.
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  createPartyInvitation(createModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsPartyInvitationCreateModel, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param createModel The party invitation create model.
   * @param options The optional parameters
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  createPartyInvitation(createModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsPartyInvitationCreateModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  createPartyInvitation(createModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsPartyInvitationCreateModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.JudicialFileCreatePartyInvitationResponse> {
    return this.client.sendOperationRequest(
      {
        createModel,
        options
      },
      createPartyInvitationOperationSpec,
      callback) as Promise<Models.JudicialFileCreatePartyInvitationResponse>;
  }

  /**
   * @summary Create an invitation to a file.
   * @param createModel The file invitation create model.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileCreateFileInvitationResponse>
   */
  createFileInvitation(createModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationCreateModel, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileCreateFileInvitationResponse>;
  /**
   * @param createModel The file invitation create model.
   * @param callback The callback
   */
  createFileInvitation(createModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationCreateModel, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param createModel The file invitation create model.
   * @param options The optional parameters
   * @param callback The callback
   */
  createFileInvitation(createModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationCreateModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  createFileInvitation(createModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationCreateModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.JudicialFileCreateFileInvitationResponse> {
    return this.client.sendOperationRequest(
      {
        createModel,
        options
      },
      createFileInvitationOperationSpec,
      callback) as Promise<Models.JudicialFileCreateFileInvitationResponse>;
  }

  /**
   * @summary Accept a party invitation.
   * @param partyInvitationId The party invitation Guid.
   * @param [options] The optional parameters
   * @deprecated This operation is deprecated. Please do not use it any longer.
   * @returns Promise<Models.JudicialFileAcceptPartyInvitationResponse>
   */
  acceptPartyInvitation(partyInvitationId: string, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileAcceptPartyInvitationResponse>;
  /**
   * @param partyInvitationId The party invitation Guid.
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  acceptPartyInvitation(partyInvitationId: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param partyInvitationId The party invitation Guid.
   * @param options The optional parameters
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  acceptPartyInvitation(partyInvitationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  acceptPartyInvitation(partyInvitationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.JudicialFileAcceptPartyInvitationResponse> {
    return this.client.sendOperationRequest(
      {
        partyInvitationId,
        options
      },
      acceptPartyInvitationOperationSpec,
      callback) as Promise<Models.JudicialFileAcceptPartyInvitationResponse>;
  }

  /**
   * @summary Refuse a party invitation. Update a tag with a complement.
   * @param refuseModel Data to refuse an invite.
   * @param [options] The optional parameters
   * @deprecated This operation is deprecated. Please do not use it any longer.
   * @returns Promise<msRest.RestResponse>
   */
  refusePartyInvitation(refuseModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsPartyInvitationRefuseModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param refuseModel Data to refuse an invite.
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  refusePartyInvitation(refuseModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsPartyInvitationRefuseModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param refuseModel Data to refuse an invite.
   * @param options The optional parameters
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  refusePartyInvitation(refuseModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsPartyInvitationRefuseModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  refusePartyInvitation(refuseModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsPartyInvitationRefuseModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        refuseModel,
        options
      },
      refusePartyInvitationOperationSpec,
      callback);
  }

  /**
   * @summary Refuse a file invitation. Update a tag with a complement.
   * @param refuseModel Data to refuse an invite.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  refuseFileInvitation(refuseModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationRefuseModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param refuseModel Data to refuse an invite.
   * @param callback The callback
   */
  refuseFileInvitation(refuseModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationRefuseModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param refuseModel Data to refuse an invite.
   * @param options The optional parameters
   * @param callback The callback
   */
  refuseFileInvitation(refuseModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationRefuseModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  refuseFileInvitation(refuseModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationRefuseModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        refuseModel,
        options
      },
      refuseFileInvitationOperationSpec,
      callback);
  }

  /**
   * @summary Create a file tag link with its complements.
   * @param tagModel The new tag link model.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileCreateFileTagLinkResponse>
   */
  createFileTagLink(tagModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileTagCreateModel, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileCreateFileTagLinkResponse>;
  /**
   * @param tagModel The new tag link model.
   * @param callback The callback
   */
  createFileTagLink(tagModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileTagCreateModel, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param tagModel The new tag link model.
   * @param options The optional parameters
   * @param callback The callback
   */
  createFileTagLink(tagModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileTagCreateModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  createFileTagLink(tagModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileTagCreateModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.JudicialFileCreateFileTagLinkResponse> {
    return this.client.sendOperationRequest(
      {
        tagModel,
        options
      },
      createFileTagLinkOperationSpec,
      callback) as Promise<Models.JudicialFileCreateFileTagLinkResponse>;
  }

  /**
   * @summary Attach representatives to a
   * {CyberjusticeLab.Kernel.Shared.JudicialFile.Models.PartyModel}.
   * @param model The model.
   * @param [options] The optional parameters
   * @deprecated This operation is deprecated. Please do not use it any longer.
   * @returns Promise<msRest.RestResponse>
   */
  attachRepresentativesToParty(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsRepresentativesToPartyModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param model The model.
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  attachRepresentativesToParty(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsRepresentativesToPartyModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param model The model.
   * @param options The optional parameters
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  attachRepresentativesToParty(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsRepresentativesToPartyModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  attachRepresentativesToParty(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsRepresentativesToPartyModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        model,
        options
      },
      attachRepresentativesToPartyOperationSpec,
      callback);
  }

  /**
   * @summary Link representatives to a
   * {CyberjusticeLab.Kernel.Shared.JudicialFile.Models.PartyModel}.
   * @param linkRepresentativesToPartyModel A
   * {CyberjusticeLab.Kernel.Shared.JudicialFile.Models.LinkRepresentativesToPartyModel} object that
   * contains a party Id and a dictionnary of {System.Collections.Generic.KeyValuePair`2}.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  linkRepresentativesToParty(linkRepresentativesToPartyModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsLinkRepresentativesToPartyModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param linkRepresentativesToPartyModel A
   * {CyberjusticeLab.Kernel.Shared.JudicialFile.Models.LinkRepresentativesToPartyModel} object that
   * contains a party Id and a dictionnary of {System.Collections.Generic.KeyValuePair`2}.
   * @param callback The callback
   */
  linkRepresentativesToParty(linkRepresentativesToPartyModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsLinkRepresentativesToPartyModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param linkRepresentativesToPartyModel A
   * {CyberjusticeLab.Kernel.Shared.JudicialFile.Models.LinkRepresentativesToPartyModel} object that
   * contains a party Id and a dictionnary of {System.Collections.Generic.KeyValuePair`2}.
   * @param options The optional parameters
   * @param callback The callback
   */
  linkRepresentativesToParty(linkRepresentativesToPartyModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsLinkRepresentativesToPartyModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  linkRepresentativesToParty(linkRepresentativesToPartyModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsLinkRepresentativesToPartyModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        linkRepresentativesToPartyModel,
        options
      },
      linkRepresentativesToPartyOperationSpec,
      callback);
  }

  /**
   * @summary Accept an invitation to act as a representative in a file.
   * <remarks>The representative will be assigned the viewer role by default.</remarks>
   * @param invitationId The invitation id.
   * @param [options] The optional parameters
   * @deprecated This operation is deprecated. Please do not use it any longer.
   * @returns Promise<Models.JudicialFileAcceptRepresentativeInvitationResponse>
   */
  acceptRepresentativeInvitation(invitationId: string, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileAcceptRepresentativeInvitationResponse>;
  /**
   * @param invitationId The invitation id.
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  acceptRepresentativeInvitation(invitationId: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param invitationId The invitation id.
   * @param options The optional parameters
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  acceptRepresentativeInvitation(invitationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  acceptRepresentativeInvitation(invitationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.JudicialFileAcceptRepresentativeInvitationResponse> {
    return this.client.sendOperationRequest(
      {
        invitationId,
        options
      },
      acceptRepresentativeInvitationOperationSpec,
      callback) as Promise<Models.JudicialFileAcceptRepresentativeInvitationResponse>;
  }

  /**
   * @summary Accept an invitation to a file.
   * @param acceptModel The accept invitaton Model.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileAcceptFileInvitationResponse>
   */
  acceptFileInvitation(acceptModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationAcceptModel, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileAcceptFileInvitationResponse>;
  /**
   * @param acceptModel The accept invitaton Model.
   * @param callback The callback
   */
  acceptFileInvitation(acceptModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationAcceptModel, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param acceptModel The accept invitaton Model.
   * @param options The optional parameters
   * @param callback The callback
   */
  acceptFileInvitation(acceptModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationAcceptModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  acceptFileInvitation(acceptModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationAcceptModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.JudicialFileAcceptFileInvitationResponse> {
    return this.client.sendOperationRequest(
      {
        acceptModel,
        options
      },
      acceptFileInvitationOperationSpec,
      callback) as Promise<Models.JudicialFileAcceptFileInvitationResponse>;
  }

  /**
   * @summary Get the list of notification types.
   * @param requestModel Request filter model.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileGetNotificationTypesResponse>
   */
  getNotificationTypes(requestModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationTypeApiRequestData, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileGetNotificationTypesResponse>;
  /**
   * @param requestModel Request filter model.
   * @param callback The callback
   */
  getNotificationTypes(requestModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationTypeApiRequestData, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationTypeApiResponseData>): void;
  /**
   * @param requestModel Request filter model.
   * @param options The optional parameters
   * @param callback The callback
   */
  getNotificationTypes(requestModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationTypeApiRequestData, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationTypeApiResponseData>): void;
  getNotificationTypes(requestModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationTypeApiRequestData, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationTypeApiResponseData>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationTypeApiResponseData>): Promise<Models.JudicialFileGetNotificationTypesResponse> {
    return this.client.sendOperationRequest(
      {
        requestModel,
        options
      },
      getNotificationTypesOperationSpec,
      callback) as Promise<Models.JudicialFileGetNotificationTypesResponse>;
  }

  /**
   * @summary Get the list of notifications.
   * @param requestModel Notification filter model.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileGetNotificationsResponse>
   */
  getNotifications(requestModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationApiRequestData, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileGetNotificationsResponse>;
  /**
   * @param requestModel Notification filter model.
   * @param callback The callback
   */
  getNotifications(requestModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationApiRequestData, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationApiResponseData>): void;
  /**
   * @param requestModel Notification filter model.
   * @param options The optional parameters
   * @param callback The callback
   */
  getNotifications(requestModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationApiRequestData, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationApiResponseData>): void;
  getNotifications(requestModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationApiRequestData, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationApiResponseData>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationApiResponseData>): Promise<Models.JudicialFileGetNotificationsResponse> {
    return this.client.sendOperationRequest(
      {
        requestModel,
        options
      },
      getNotificationsOperationSpec,
      callback) as Promise<Models.JudicialFileGetNotificationsResponse>;
  }

  /**
   * @summary Create a new notification and representatives links.
   * @param model The new model.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  createNotification(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationCreateModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param model The new model.
   * @param callback The callback
   */
  createNotification(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationCreateModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param model The new model.
   * @param options The optional parameters
   * @param callback The callback
   */
  createNotification(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationCreateModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  createNotification(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationCreateModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        model,
        options
      },
      createNotificationOperationSpec,
      callback);
  }

  /**
   * @summary Create a new file.
   * @param model The new file model.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileCreateJudicialFileResponse>
   */
  createJudicialFile(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileCreateModel, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileCreateJudicialFileResponse>;
  /**
   * @param model The new file model.
   * @param callback The callback
   */
  createJudicialFile(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileCreateModel, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param model The new file model.
   * @param options The optional parameters
   * @param callback The callback
   */
  createJudicialFile(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileCreateModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  createJudicialFile(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileCreateModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.JudicialFileCreateJudicialFileResponse> {
    return this.client.sendOperationRequest(
      {
        model,
        options
      },
      createJudicialFileOperationSpec,
      callback) as Promise<Models.JudicialFileCreateJudicialFileResponse>;
  }

  /**
   * @summary Get the representative who made the last action on the file.
   * @param requestModel
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  getLastActor(requestModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsLastActorRequestData, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param requestModel
   * @param callback The callback
   */
  getLastActor(requestModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsLastActorRequestData, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param requestModel
   * @param options The optional parameters
   * @param callback The callback
   */
  getLastActor(requestModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsLastActorRequestData, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getLastActor(requestModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsLastActorRequestData, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        requestModel,
        options
      },
      getLastActorOperationSpec,
      callback);
  }

  /**
   * @summary Get the list of log templates.
   * @param requestModel Request filter model.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileGetLogTemplatesResponse>
   */
  getLogTemplates(requestModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateApiRequestData, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileGetLogTemplatesResponse>;
  /**
   * @param requestModel Request filter model.
   * @param callback The callback
   */
  getLogTemplates(requestModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateApiRequestData, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateApiResponseData>): void;
  /**
   * @param requestModel Request filter model.
   * @param options The optional parameters
   * @param callback The callback
   */
  getLogTemplates(requestModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateApiRequestData, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateApiResponseData>): void;
  getLogTemplates(requestModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateApiRequestData, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateApiResponseData>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateApiResponseData>): Promise<Models.JudicialFileGetLogTemplatesResponse> {
    return this.client.sendOperationRequest(
      {
        requestModel,
        options
      },
      getLogTemplatesOperationSpec,
      callback) as Promise<Models.JudicialFileGetLogTemplatesResponse>;
  }

  /**
   * @summary Get the list of log entries.
   * @param requestModel Request filter model.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileGetLogEntriesResponse>
   */
  getLogEntries(requestModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsLogEntryApiRequestData, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileGetLogEntriesResponse>;
  /**
   * @param requestModel Request filter model.
   * @param callback The callback
   */
  getLogEntries(requestModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsLogEntryApiRequestData, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsLogEntryApiResponseData>): void;
  /**
   * @param requestModel Request filter model.
   * @param options The optional parameters
   * @param callback The callback
   */
  getLogEntries(requestModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsLogEntryApiRequestData, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsLogEntryApiResponseData>): void;
  getLogEntries(requestModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsLogEntryApiRequestData, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsLogEntryApiResponseData>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsLogEntryApiResponseData>): Promise<Models.JudicialFileGetLogEntriesResponse> {
    return this.client.sendOperationRequest(
      {
        requestModel,
        options
      },
      getLogEntriesOperationSpec,
      callback) as Promise<Models.JudicialFileGetLogEntriesResponse>;
  }

  /**
   * @summary Create a log template.
   * @param model The create model.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileCreateLogTemplateResponse>
   */
  createLogTemplate(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateCreateModel, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileCreateLogTemplateResponse>;
  /**
   * @param model The create model.
   * @param callback The callback
   */
  createLogTemplate(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateCreateModel, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param model The create model.
   * @param options The optional parameters
   * @param callback The callback
   */
  createLogTemplate(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateCreateModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  createLogTemplate(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateCreateModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.JudicialFileCreateLogTemplateResponse> {
    return this.client.sendOperationRequest(
      {
        model,
        options
      },
      createLogTemplateOperationSpec,
      callback) as Promise<Models.JudicialFileCreateLogTemplateResponse>;
  }

  /**
   * @summary Create a log entry.
   * @param model The create model.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileCreateLogEntryResponse>
   */
  createLogEntry(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsLogEntryCreateModel, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileCreateLogEntryResponse>;
  /**
   * @param model The create model.
   * @param callback The callback
   */
  createLogEntry(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsLogEntryCreateModel, callback: msRest.ServiceCallback<string[]>): void;
  /**
   * @param model The create model.
   * @param options The optional parameters
   * @param callback The callback
   */
  createLogEntry(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsLogEntryCreateModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string[]>): void;
  createLogEntry(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsLogEntryCreateModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string[]>, callback?: msRest.ServiceCallback<string[]>): Promise<Models.JudicialFileCreateLogEntryResponse> {
    return this.client.sendOperationRequest(
      {
        model,
        options
      },
      createLogEntryOperationSpec,
      callback) as Promise<Models.JudicialFileCreateLogEntryResponse>;
  }

  /**
   * @summary Close a file.
   * @param closeFileModel Model used to close a file.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  closeFile(closeFileModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsCloseFileModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param closeFileModel Model used to close a file.
   * @param callback The callback
   */
  closeFile(closeFileModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsCloseFileModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param closeFileModel Model used to close a file.
   * @param options The optional parameters
   * @param callback The callback
   */
  closeFile(closeFileModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsCloseFileModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  closeFile(closeFileModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsCloseFileModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        closeFileModel,
        options
      },
      closeFileOperationSpec,
      callback);
  }

  /**
   * @summary Update the file attributes of a file.
   * @param fileAttributesModel A list of file attribute model.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileUpdateFileAttributeResponse>
   */
  updateFileAttribute(fileAttributesModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileAttributesUpdateModel, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileUpdateFileAttributeResponse>;
  /**
   * @param fileAttributesModel A list of file attribute model.
   * @param callback The callback
   */
  updateFileAttribute(fileAttributesModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileAttributesUpdateModel, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsPartyUpsertModel>): void;
  /**
   * @param fileAttributesModel A list of file attribute model.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateFileAttribute(fileAttributesModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileAttributesUpdateModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsPartyUpsertModel>): void;
  updateFileAttribute(fileAttributesModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileAttributesUpdateModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsPartyUpsertModel>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialFileModelsPartyUpsertModel>): Promise<Models.JudicialFileUpdateFileAttributeResponse> {
    return this.client.sendOperationRequest(
      {
        fileAttributesModel,
        options
      },
      updateFileAttributeOperationSpec,
      callback) as Promise<Models.JudicialFileUpdateFileAttributeResponse>;
  }

  /**
   * @summary Upsert a party.
   * @param upsertModel The party upsert model.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileUpsertPartyResponse>
   */
  upsertParty(upsertModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsPartyUpsertModel, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileUpsertPartyResponse>;
  /**
   * @param upsertModel The party upsert model.
   * @param callback The callback
   */
  upsertParty(upsertModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsPartyUpsertModel, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param upsertModel The party upsert model.
   * @param options The optional parameters
   * @param callback The callback
   */
  upsertParty(upsertModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsPartyUpsertModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  upsertParty(upsertModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsPartyUpsertModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.JudicialFileUpsertPartyResponse> {
    return this.client.sendOperationRequest(
      {
        upsertModel,
        options
      },
      upsertPartyOperationSpec,
      callback) as Promise<Models.JudicialFileUpsertPartyResponse>;
  }

  /**
   * @summary Updates party status.
   * @param partyId Id of the party.
   * @param status The new status of the party.
   * @param lastModifiedDate Lat date when the party was modified in ticks.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  changePartyStatus(partyId: string, status: string, lastModifiedDate: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param partyId Id of the party.
   * @param status The new status of the party.
   * @param lastModifiedDate Lat date when the party was modified in ticks.
   * @param callback The callback
   */
  changePartyStatus(partyId: string, status: string, lastModifiedDate: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param partyId Id of the party.
   * @param status The new status of the party.
   * @param lastModifiedDate Lat date when the party was modified in ticks.
   * @param options The optional parameters
   * @param callback The callback
   */
  changePartyStatus(partyId: string, status: string, lastModifiedDate: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  changePartyStatus(partyId: string, status: string, lastModifiedDate: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        partyId,
        status,
        lastModifiedDate,
        options
      },
      changePartyStatusOperationSpec,
      callback);
  }

  /**
   * @summary Upsert a party contact.
   * @param upsertModel The party contact model.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialFileUpsertPartyContactResponse>
   */
  upsertPartyContact(upsertModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsPartyContactUpsertModel, options?: msRest.RequestOptionsBase): Promise<Models.JudicialFileUpsertPartyContactResponse>;
  /**
   * @param upsertModel The party contact model.
   * @param callback The callback
   */
  upsertPartyContact(upsertModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsPartyContactUpsertModel, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param upsertModel The party contact model.
   * @param options The optional parameters
   * @param callback The callback
   */
  upsertPartyContact(upsertModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsPartyContactUpsertModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  upsertPartyContact(upsertModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsPartyContactUpsertModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.JudicialFileUpsertPartyContactResponse> {
    return this.client.sendOperationRequest(
      {
        upsertModel,
        options
      },
      upsertPartyContactOperationSpec,
      callback) as Promise<Models.JudicialFileUpsertPartyContactResponse>;
  }

  /**
   * @summary Updates the internal reference number and the attributes of a party representative.
   * @param model The model.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updatePartyRepresentativesAttributes(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsRepresentativesToPartyModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param model The model.
   * @param callback The callback
   */
  updatePartyRepresentativesAttributes(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsRepresentativesToPartyModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param model The model.
   * @param options The optional parameters
   * @param callback The callback
   */
  updatePartyRepresentativesAttributes(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsRepresentativesToPartyModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updatePartyRepresentativesAttributes(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsRepresentativesToPartyModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        model,
        options
      },
      updatePartyRepresentativesAttributesOperationSpec,
      callback);
  }

  /**
   * @summary Update a file tag link.
   * @param tagModel The updated tag link model.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateFileTagLink(tagModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileTagUpdateModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param tagModel The updated tag link model.
   * @param callback The callback
   */
  updateFileTagLink(tagModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileTagUpdateModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param tagModel The updated tag link model.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateFileTagLink(tagModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileTagUpdateModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateFileTagLink(tagModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileTagUpdateModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        tagModel,
        options
      },
      updateFileTagLinkOperationSpec,
      callback);
  }

  /**
   * @summary Update a file tag link with its complements.
   * New complements are created, found complements are updated, missing complements are removed.
   * @param tagModel The updated tag link model.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateFileTagLinkAndComplements(tagModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileTagUpdateWithComplementModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param tagModel The updated tag link model.
   * @param callback The callback
   */
  updateFileTagLinkAndComplements(tagModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileTagUpdateWithComplementModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param tagModel The updated tag link model.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateFileTagLinkAndComplements(tagModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileTagUpdateWithComplementModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateFileTagLinkAndComplements(tagModel: Models.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileTagUpdateWithComplementModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        tagModel,
        options
      },
      updateFileTagLinkAndComplementsOperationSpec,
      callback);
  }

  /**
   * @summary Update a notification type resource.
   * @param model The updated notification type resource model.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateNotificationTypeResource(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationTypeResourceUpdateModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param model The updated notification type resource model.
   * @param callback The callback
   */
  updateNotificationTypeResource(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationTypeResourceUpdateModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param model The updated notification type resource model.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateNotificationTypeResource(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationTypeResourceUpdateModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateNotificationTypeResource(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationTypeResourceUpdateModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        model,
        options
      },
      updateNotificationTypeResourceOperationSpec,
      callback);
  }

  /**
   * @summary Update a notification.
   * @param model The updated model.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateNotification(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationUpdateModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param model The updated model.
   * @param callback The callback
   */
  updateNotification(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationUpdateModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param model The updated model.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateNotification(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationUpdateModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateNotification(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationUpdateModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        model,
        options
      },
      updateNotificationOperationSpec,
      callback);
  }

  /**
   * @summary Update a notification representative link.
   * This can only be used by a representative for its own notifications.
   * @param model The updated model.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateNotificationRepresentative(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationRepresentativeUpdateModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param model The updated model.
   * @param callback The callback
   */
  updateNotificationRepresentative(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationRepresentativeUpdateModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param model The updated model.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateNotificationRepresentative(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationRepresentativeUpdateModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateNotificationRepresentative(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsNotificationRepresentativeUpdateModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        model,
        options
      },
      updateNotificationRepresentativeOperationSpec,
      callback);
  }

  /**
   * @summary Update a log template.
   * @param model The update model.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateLogTemplate(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateUpdateModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param model The update model.
   * @param callback The callback
   */
  updateLogTemplate(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateUpdateModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param model The update model.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateLogTemplate(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateUpdateModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateLogTemplate(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateUpdateModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        model,
        options
      },
      updateLogTemplateOperationSpec,
      callback);
  }

  /**
   * @summary Update log templates.
   * @param model The update model.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateLogTemplates(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateUpdateModel[], options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param model The update model.
   * @param callback The callback
   */
  updateLogTemplates(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateUpdateModel[], callback: msRest.ServiceCallback<void>): void;
  /**
   * @param model The update model.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateLogTemplates(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateUpdateModel[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateLogTemplates(model: Models.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateUpdateModel[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        model,
        options
      },
      updateLogTemplatesOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const deletePartyOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "JudicialFile/DELETE/Party",
  queryParameters: [
    Parameters.partyId1,
    Parameters.lastModified0
  ],
  responses: {
    200: {},
    403: {},
    404: {},
    409: {},
    default: {}
  },
  serializer
};

const deletePartyInvitationOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "JudicialFile/DELETE/PartyInvitation",
  queryParameters: [
    Parameters.partyInvitationId
  ],
  responses: {
    200: {},
    404: {},
    default: {}
  },
  serializer
};

const deleteFileInvitationOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "JudicialFile/DELETE/FileInvitation",
  queryParameters: [
    Parameters.fileInvitationId
  ],
  responses: {
    200: {},
    404: {},
    default: {}
  },
  serializer
};

const deleteFileTagLinkOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "JudicialFile/DELETE/FileTagLink",
  queryParameters: [
    Parameters.fileId0,
    Parameters.tagCode,
    Parameters.modifiedTicks
  ],
  responses: {
    200: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const deleteNotificationOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "JudicialFile/DELETE/Notification",
  queryParameters: [
    Parameters.notificationId
  ],
  responses: {
    200: {},
    403: {},
    default: {}
  },
  serializer
};

const getFilesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/Files",
  queryParameters: [
    Parameters.fileIds0,
    Parameters.judicialFileIds,
    Parameters.judicialEntityIds,
    Parameters.businessRuleNames,
    Parameters.representativeIds,
    Parameters.excludedStatuses,
    Parameters.statuses,
    Parameters.closingReasons,
    Parameters.minCreatedDate,
    Parameters.maxCreatedDate,
    Parameters.searchStatuses,
    Parameters.searchText,
    Parameters.searchBy,
    Parameters.take0,
    Parameters.skip,
    Parameters.orderBy,
    Parameters.orderByDescending
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getFiles1OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "JudicialFile/POST/Files",
  requestBody: {
    parameterPath: "requestModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileApiResquestData,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileApiResponseData
    },
    default: {}
  },
  serializer
};

const getFilesCountOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/FilesCount",
  queryParameters: [
    Parameters.fileIds0,
    Parameters.judicialFileIds,
    Parameters.judicialEntityIds,
    Parameters.businessRuleNames,
    Parameters.representativeIds,
    Parameters.excludedStatuses,
    Parameters.statuses,
    Parameters.closingReasons,
    Parameters.minCreatedDate,
    Parameters.maxCreatedDate,
    Parameters.searchStatuses,
    Parameters.searchText,
    Parameters.searchBy
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {}
  },
  serializer
};

const getFileOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/File",
  queryParameters: [
    Parameters.fileId0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {}
  },
  serializer
};

const getFilesSet1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/FilesSet1",
  queryParameters: [
    Parameters.judicialEntityIds,
    Parameters.businessRuleNames,
    Parameters.excludedStatuses
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileSet1Data
    },
    default: {}
  },
  serializer
};

const getFilesSet2OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/FilesSet2",
  queryParameters: [
    Parameters.judicialEntityIds,
    Parameters.businessRuleNames,
    Parameters.statuses
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileSet2Data
    },
    default: {}
  },
  serializer
};

const getPartyEntitiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/PartyEntities",
  queryParameters: [
    Parameters.partyEntityIds,
    Parameters.partyEntityCodes,
    Parameters.take0,
    Parameters.skip,
    Parameters.orderBy
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsJudicialFilePartyEntityData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getFilesOfLabelOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/FilesOfLabel",
  queryParameters: [
    Parameters.labelId0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getFilesOfTagCodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/FilesOfTagCode",
  queryParameters: [
    Parameters.tagCode
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getBusinessRulesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/BusinessRules",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsJudicialFileBusinessRuleData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getRepresentativeUsersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/RepresentativeUsers",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsJudicialFileRepresentativeUserData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getRepresentativeProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/RepresentativeProfile",
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelServiceContractsJudicialFileRepresentativeProfileData
    },
    default: {}
  },
  serializer
};

const getTargetRepresentativeProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/TargetRepresentativeProfile",
  queryParameters: [
    Parameters.representativeId,
    Parameters.username,
    Parameters.partyId1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelServiceContractsJudicialFileRepresentativeProfileData
    },
    default: {}
  },
  serializer
};

const getRepresentativeNeutralListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/RepresentativeNeutralList",
  queryParameters: [
    Parameters.urn
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsJudicialFileRepresentativeUserData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const checkForFileOptimisticConcurrencyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/CheckForFileOptimisticConcurrency",
  queryParameters: [
    Parameters.fileId0,
    Parameters.modifiedTicks
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Boolean"
        }
      }
    },
    default: {}
  },
  serializer
};

const getNeutralZipCodeDataListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/NeutralZipCodeDataList",
  queryParameters: [
    Parameters.urn
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsJudicialFileNeutralZipCodeData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getFileVerifyDataOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/FileVerifyData",
  queryParameters: [
    Parameters.judicialFileId0,
    Parameters.judicialEntityId0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelServiceContractsJudicialFileJudicialFileVerifyData
    },
    default: {}
  },
  serializer
};

const getPartyInvitationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/PartyInvitation",
  queryParameters: [
    Parameters.partyInvitationId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getPartyInvitationsOfPartyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/PartyInvitationsOfParty",
  queryParameters: [
    Parameters.partyId1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getFileInvitationsOfPartyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/FileInvitationsOfParty",
  queryParameters: [
    Parameters.partyId1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationModel"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getFileInvitationInformationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/FileInvitationInformation",
  queryParameters: [
    Parameters.code,
    Parameters.judicialFileId1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationInformationModel
    },
    401: {},
    default: {}
  },
  serializer
};

const getFileInformationFromPartyInvitationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/FileInformation",
  queryParameters: [
    Parameters.invitationId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelSharedJudicialFileModelsFileInformationFromPartyInvitationModel
    },
    default: {}
  },
  serializer
};

const getNewNotificationsCountOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/NewNotificationsCount",
  queryParameters: [
    Parameters.judicialEntityId0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {}
  },
  serializer
};

const getNotificationsCountByFileOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/NotificationsCountByFile",
  queryParameters: [
    Parameters.take1,
    Parameters.judicialEntityId0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelSharedJudicialFileModelsNotificationCountByFileModel"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getNotificationsCountAggregatorCodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/NotificationsCountByAggregatorCode",
  queryParameters: [
    Parameters.aggregatorsCodes,
    Parameters.judicialEntityId0,
    Parameters.aggregatorCodeIsSubstring0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelSharedJudicialFileModelsNotificationCountByAggregatorCodeModel"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getNotificationTypeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/NotificationType",
  queryParameters: [
    Parameters.notificationCode0,
    Parameters.businessRuleName
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelSharedJudicialFileModelsNotificationTypeModel
    },
    default: {}
  },
  serializer
};

const getLogEntryDistinctCodesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialFile/GET/LogEntryDistinctCodes",
  queryParameters: [
    Parameters.fileId0,
    Parameters.currentRole
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    },
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const dismissNotificationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "JudicialFile/PATCH/DismissNotifications",
  queryParameters: [
    Parameters.fileId0,
    Parameters.notificationCode1,
    Parameters.aggregatorCode,
    Parameters.aggregatorCodeIsSubstring1
  ],
  responses: {
    200: {},
    404: {},
    default: {}
  },
  serializer
};

const updateRepresentativeStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "JudicialFile/PATCH/UpdateRepresentativeStatus",
  queryParameters: [
    Parameters.representativeId,
    Parameters.status
  ],
  responses: {
    200: {},
    404: {},
    default: {}
  },
  serializer
};

const updatePartyTypeOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "JudicialFile/PATCH/UpdatePartyType",
  queryParameters: [
    Parameters.partyId1,
    Parameters.partyType,
    Parameters.lastModified0
  ],
  responses: {
    200: {},
    403: {},
    404: {},
    409: {},
    default: {}
  },
  serializer
};

const updatePartyDisputeDescriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "JudicialFile/PATCH/UpdatePartyDisputeDescription",
  queryParameters: [
    Parameters.partyId1,
    Parameters.disputeDescription,
    Parameters.lastModified0
  ],
  responses: {
    200: {},
    403: {},
    404: {},
    409: {},
    default: {}
  },
  serializer
};

const updateFileInvitationExpirationDateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "JudicialFile/PATCH/UpdateFileInvitationExpirationDate",
  queryParameters: [
    Parameters.fileInvitationId,
    Parameters.expiryDate,
    Parameters.lastModified1
  ],
  responses: {
    200: {},
    404: {},
    409: {},
    default: {}
  },
  serializer
};

const updatePartyInvitationExpirationDateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "JudicialFile/PATCH/UpdatePartyInvitationExpirationDate",
  queryParameters: [
    Parameters.partyInvitationId,
    Parameters.expiryDate
  ],
  responses: {
    200: {},
    404: {},
    default: {}
  },
  serializer
};

const updateFileStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "JudicialFile/PATCH/UpdateFileStatus",
  queryParameters: [
    Parameters.fileId0,
    Parameters.fileStatus,
    Parameters.lastModifiedDate
  ],
  responses: {
    200: {},
    403: {},
    404: {},
    409: {},
    default: {}
  },
  serializer
};

const createPartyInvitationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "JudicialFile/POST/CreatePartyInvitation",
  requestBody: {
    parameterPath: "createModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsPartyInvitationCreateModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    404: {},
    default: {}
  },
  serializer
};

const createFileInvitationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "JudicialFile/POST/CreateFileInvitation",
  requestBody: {
    parameterPath: "createModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationCreateModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    400: {},
    404: {},
    default: {}
  },
  serializer
};

const acceptPartyInvitationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "JudicialFile/POST/AcceptPartyInvitation",
  requestBody: {
    parameterPath: "partyInvitationId",
    mapper: {
      required: true,
      serializedName: "partyInvitationId",
      type: {
        name: "Uuid"
      }
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    400: {},
    403: {},
    404: {},
    409: {},
    default: {}
  },
  serializer
};

const refusePartyInvitationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "JudicialFile/POST/RefusePartyInvitation",
  requestBody: {
    parameterPath: "refuseModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsPartyInvitationRefuseModel,
      required: true
    }
  },
  responses: {
    200: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const refuseFileInvitationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "JudicialFile/POST/RefuseFileInvitation",
  requestBody: {
    parameterPath: "refuseModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationRefuseModel,
      required: true
    }
  },
  responses: {
    200: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const createFileTagLinkOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "JudicialFile/POST/CreateFileTagLink",
  requestBody: {
    parameterPath: "tagModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileTagCreateModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    404: {},
    default: {}
  },
  serializer
};

const attachRepresentativesToPartyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "JudicialFile/POST/AttachRepresentativesToParty",
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsRepresentativesToPartyModel,
      required: true
    }
  },
  responses: {
    200: {},
    403: {},
    404: {},
    409: {},
    default: {}
  },
  serializer
};

const linkRepresentativesToPartyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "JudicialFile/POST/LinkRepresentativesToParty",
  requestBody: {
    parameterPath: "linkRepresentativesToPartyModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsLinkRepresentativesToPartyModel,
      required: true
    }
  },
  responses: {
    200: {},
    403: {},
    404: {},
    409: {},
    default: {}
  },
  serializer
};

const acceptRepresentativeInvitationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "JudicialFile/POST/AcceptRepresentativeInvitation",
  requestBody: {
    parameterPath: "invitationId",
    mapper: {
      required: true,
      serializedName: "invitationId",
      type: {
        name: "Uuid"
      }
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    403: {},
    404: {},
    409: {},
    default: {}
  },
  serializer
};

const acceptFileInvitationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "JudicialFile/POST/AcceptFileInvitation",
  requestBody: {
    parameterPath: "acceptModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsFileInvitationAcceptModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    401: {},
    403: {},
    404: {},
    409: {},
    default: {}
  },
  serializer
};

const getNotificationTypesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "JudicialFile/POST/NotificationTypes",
  requestBody: {
    parameterPath: "requestModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsNotificationTypeApiRequestData,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelSharedJudicialFileModelsNotificationTypeApiResponseData
    },
    default: {}
  },
  serializer
};

const getNotificationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "JudicialFile/POST/Notifications",
  requestBody: {
    parameterPath: "requestModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsNotificationApiRequestData,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelSharedJudicialFileModelsNotificationApiResponseData
    },
    default: {}
  },
  serializer
};

const createNotificationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "JudicialFile/POST/CreateNotification",
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsNotificationCreateModel,
      required: true
    }
  },
  responses: {
    200: {},
    400: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const createJudicialFileOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "JudicialFile/POST/CreateJudicialFile",
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileCreateModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    400: {},
    404: {},
    409: {},
    500: {},
    default: {}
  },
  serializer
};

const getLastActorOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "JudicialFile/POST/GetLastActor",
  requestBody: {
    parameterPath: "requestModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsLastActorRequestData,
      required: true
    }
  },
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const getLogTemplatesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "JudicialFile/POST/GetLogTemplates",
  requestBody: {
    parameterPath: "requestModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateApiRequestData,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateApiResponseData
    },
    default: {}
  },
  serializer
};

const getLogEntriesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "JudicialFile/POST/GetLogEntries",
  requestBody: {
    parameterPath: "requestModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsLogEntryApiRequestData,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelSharedJudicialFileModelsLogEntryApiResponseData
    },
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const createLogTemplateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "JudicialFile/POST/CreateLogTemplate",
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateCreateModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    default: {}
  },
  serializer
};

const createLogEntryOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "JudicialFile/POST/CreateLogEntry",
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsLogEntryCreateModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Uuid"
            }
          }
        }
      }
    },
    404: {},
    default: {}
  },
  serializer
};

const closeFileOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "JudicialFile/PUT/CloseFile",
  requestBody: {
    parameterPath: "closeFileModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsCloseFileModel,
      required: true
    }
  },
  responses: {
    200: {},
    400: {},
    403: {},
    404: {},
    409: {},
    default: {}
  },
  serializer
};

const updateFileAttributeOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "JudicialFile/PUT/UpdateFileAttribute",
  requestBody: {
    parameterPath: "fileAttributesModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileAttributesUpdateModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelSharedJudicialFileModelsPartyUpsertModel
    },
    403: {},
    404: {},
    409: {},
    default: {}
  },
  serializer
};

const upsertPartyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "JudicialFile/PUT/UpsertParty",
  requestBody: {
    parameterPath: "upsertModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsPartyUpsertModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    403: {},
    404: {},
    409: {},
    default: {}
  },
  serializer
};

const changePartyStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "JudicialFile/PUT/ChangePartyStatus",
  queryParameters: [
    Parameters.partyId1,
    Parameters.status,
    Parameters.lastModifiedDate
  ],
  responses: {
    200: {},
    403: {},
    404: {},
    409: {},
    default: {}
  },
  serializer
};

const upsertPartyContactOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "JudicialFile/PUT/UpsertPartyContact",
  requestBody: {
    parameterPath: "upsertModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsPartyContactUpsertModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    400: {},
    403: {},
    404: {},
    409: {},
    default: {}
  },
  serializer
};

const updatePartyRepresentativesAttributesOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "JudicialFile/PUT/UpdatePartyRepresentativesAttributes",
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsRepresentativesToPartyModel,
      required: true
    }
  },
  responses: {
    200: {},
    400: {},
    403: {},
    404: {},
    409: {},
    default: {}
  },
  serializer
};

const updateFileTagLinkOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "JudicialFile/PUT/UpdateFileTagLink",
  requestBody: {
    parameterPath: "tagModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileTagUpdateModel,
      required: true
    }
  },
  responses: {
    200: {},
    403: {},
    404: {},
    409: {},
    default: {}
  },
  serializer
};

const updateFileTagLinkAndComplementsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "JudicialFile/PUT/UpdateFileTagLinkAndComplements",
  requestBody: {
    parameterPath: "tagModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsJudicialFileTagUpdateWithComplementModel,
      required: true
    }
  },
  responses: {
    200: {},
    400: {},
    403: {},
    404: {},
    409: {},
    default: {}
  },
  serializer
};

const updateNotificationTypeResourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "JudicialFile/PUT/UpdateNotificationType",
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsNotificationTypeResourceUpdateModel,
      required: true
    }
  },
  responses: {
    200: {},
    404: {},
    default: {}
  },
  serializer
};

const updateNotificationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "JudicialFile/PUT/UpdateNotification",
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsNotificationUpdateModel,
      required: true
    }
  },
  responses: {
    200: {},
    403: {},
    default: {}
  },
  serializer
};

const updateNotificationRepresentativeOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "JudicialFile/PUT/UpdateNotificationRepresentative",
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsNotificationRepresentativeUpdateModel,
      required: true
    }
  },
  responses: {
    200: {},
    403: {},
    default: {}
  },
  serializer
};

const updateLogTemplateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "JudicialFile/PUT/UpdateLogTemplate",
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateUpdateModel,
      required: true
    }
  },
  responses: {
    200: {},
    403: {},
    default: {}
  },
  serializer
};

const updateLogTemplatesOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "JudicialFile/PUT/UpdateLogTemplates",
  requestBody: {
    parameterPath: "model",
    mapper: {
      required: true,
      serializedName: "model",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "CyberjusticeLabKernelSharedJudicialFileModelsLogTemplateUpdateModel"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    403: {},
    default: {}
  },
  serializer
};
