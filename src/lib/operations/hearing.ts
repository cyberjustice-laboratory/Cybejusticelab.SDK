/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/hearingMappers";
import * as Parameters from "../models/parameters";
import { CyberjusticeAPIsContext } from "../cyberjusticeAPIsContext";

/** Class representing a Hearing. */
export class Hearing {
  private readonly client: CyberjusticeAPIsContext;

  /**
   * Create a Hearing.
   * @param {CyberjusticeAPIsContext} client Reference to the service client.
   */
  constructor(client: CyberjusticeAPIsContext) {
    this.client = client;
  }

  /**
   * Returns null if the menuId was not found.
   * @summary Retrieve a complete menu data with all sub menus and document list
   * @param hearingId Requested menu's hearing id.
   * @param menuId Requested menu's id.
   * @param [options] The optional parameters
   * @returns Promise<Models.HearingGetMenuDataResponse>
   */
  getMenuData(hearingId: string, menuId: string, options?: msRest.RequestOptionsBase): Promise<Models.HearingGetMenuDataResponse>;
  /**
   * @param hearingId Requested menu's hearing id.
   * @param menuId Requested menu's id.
   * @param callback The callback
   */
  getMenuData(hearingId: string, menuId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsHearingMenuData>): void;
  /**
   * @param hearingId Requested menu's hearing id.
   * @param menuId Requested menu's id.
   * @param options The optional parameters
   * @param callback The callback
   */
  getMenuData(hearingId: string, menuId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsHearingMenuData>): void;
  getMenuData(hearingId: string, menuId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsHearingMenuData>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsHearingMenuData>): Promise<Models.HearingGetMenuDataResponse> {
    return this.client.sendOperationRequest(
      {
        hearingId,
        menuId,
        options
      },
      getMenuDataOperationSpec,
      callback) as Promise<Models.HearingGetMenuDataResponse>;
  }

  /**
   * @summary Retrieve a list of complete menu data owned by any judges in this file.
   * @param fileId The file Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.HearingGetAllJudgesMenuDataResponse>
   */
  getAllJudgesMenuData(fileId: string, options?: msRest.RequestOptionsBase): Promise<Models.HearingGetAllJudgesMenuDataResponse>;
  /**
   * @param fileId The file Id.
   * @param callback The callback
   */
  getAllJudgesMenuData(fileId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsHearingMenuData[]>): void;
  /**
   * @param fileId The file Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllJudgesMenuData(fileId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsHearingMenuData[]>): void;
  getAllJudgesMenuData(fileId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsHearingMenuData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsHearingMenuData[]>): Promise<Models.HearingGetAllJudgesMenuDataResponse> {
    return this.client.sendOperationRequest(
      {
        fileId,
        options
      },
      getAllJudgesMenuDataOperationSpec,
      callback) as Promise<Models.HearingGetAllJudgesMenuDataResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getMenuDataOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Hearing/GET/MenuData",
  queryParameters: [
    Parameters.hearingId,
    Parameters.menuId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelServiceContractsHearingMenuData
    },
    default: {}
  },
  serializer
};

const getAllJudgesMenuDataOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Hearing/GET/AllJudgesMenuData",
  queryParameters: [
    Parameters.fileId0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsHearingMenuData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};
