/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/documentMappers";
import * as Parameters from "../models/parameters";
import { CyberjusticeAPIsContext } from "../cyberjusticeAPIsContext";

/** Class representing a Document. */
export class Document {
  private readonly client: CyberjusticeAPIsContext;

  /**
   * Create a Document.
   * @param {CyberjusticeAPIsContext} client Reference to the service client.
   */
  constructor(client: CyberjusticeAPIsContext) {
    this.client = client;
  }

  /**
   * @summary Delete document.
   * @param documentId The ID of the document.
   * @param fileId File id the document belongs to.
   * @param currentVersion Current version of the document.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteDocument(documentId: string, fileId: string, currentVersion: number, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param documentId The ID of the document.
   * @param fileId File id the document belongs to.
   * @param currentVersion Current version of the document.
   * @param callback The callback
   */
  deleteDocument(documentId: string, fileId: string, currentVersion: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param documentId The ID of the document.
   * @param fileId File id the document belongs to.
   * @param currentVersion Current version of the document.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteDocument(documentId: string, fileId: string, currentVersion: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteDocument(documentId: string, fileId: string, currentVersion: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        documentId,
        fileId,
        currentVersion,
        options
      },
      deleteDocumentOperationSpec,
      callback);
  }

  /**
   * @summary Delete document attributes.
   * @param documentId The list of attributes to delete.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteDocumentAttributes(documentId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param documentId The list of attributes to delete.
   * @param callback The callback
   */
  deleteDocumentAttributes(documentId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param documentId The list of attributes to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteDocumentAttributes(documentId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteDocumentAttributes(documentId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        documentId,
        options
      },
      deleteDocumentAttributesOperationSpec,
      callback);
  }

  /**
   * @summary Get the documents metadata of a file. Optional filters.
   * @param fileId The file Guid containing the requested documents.
   * @param [options] The optional parameters
   * @returns Promise<Models.DocumentGetDocumentsMetadataResponse>
   */
  getDocumentsMetadata(fileId: string, options?: Models.DocumentGetDocumentsMetadataOptionalParams): Promise<Models.DocumentGetDocumentsMetadataResponse>;
  /**
   * @param fileId The file Guid containing the requested documents.
   * @param callback The callback
   */
  getDocumentsMetadata(fileId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsDocumentDocumentData[]>): void;
  /**
   * @param fileId The file Guid containing the requested documents.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDocumentsMetadata(fileId: string, options: Models.DocumentGetDocumentsMetadataOptionalParams, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsDocumentDocumentData[]>): void;
  getDocumentsMetadata(fileId: string, options?: Models.DocumentGetDocumentsMetadataOptionalParams | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsDocumentDocumentData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsDocumentDocumentData[]>): Promise<Models.DocumentGetDocumentsMetadataResponse> {
    return this.client.sendOperationRequest(
      {
        fileId,
        options
      },
      getDocumentsMetadataOperationSpec,
      callback) as Promise<Models.DocumentGetDocumentsMetadataResponse>;
  }

  /**
   * @summary Get a document by Id.
   * @param documentId The requested document Guid.
   * @param [options] The optional parameters
   * @returns Promise<Models.DocumentGetDocumentMetadataResponse>
   */
  getDocumentMetadata(documentId: string, options?: msRest.RequestOptionsBase): Promise<Models.DocumentGetDocumentMetadataResponse>;
  /**
   * @param documentId The requested document Guid.
   * @param callback The callback
   */
  getDocumentMetadata(documentId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsDocumentDocumentData>): void;
  /**
   * @param documentId The requested document Guid.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDocumentMetadata(documentId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsDocumentDocumentData>): void;
  getDocumentMetadata(documentId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsDocumentDocumentData>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsDocumentDocumentData>): Promise<Models.DocumentGetDocumentMetadataResponse> {
    return this.client.sendOperationRequest(
      {
        documentId,
        options
      },
      getDocumentMetadataOperationSpec,
      callback) as Promise<Models.DocumentGetDocumentMetadataResponse>;
  }

  /**
   * @summary Returns a document as a Base64String.
   * @param fileId The judicial file Guid.
   * @param documentId The document Guid.
   * @param [options] The optional parameters
   * @returns Promise<Models.DocumentGetDocumentContentByIdResponse>
   */
  getDocumentContentById(fileId: string, documentId: string, options?: msRest.RequestOptionsBase): Promise<Models.DocumentGetDocumentContentByIdResponse>;
  /**
   * @param fileId The judicial file Guid.
   * @param documentId The document Guid.
   * @param callback The callback
   */
  getDocumentContentById(fileId: string, documentId: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param fileId The judicial file Guid.
   * @param documentId The document Guid.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDocumentContentById(fileId: string, documentId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  getDocumentContentById(fileId: string, documentId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.DocumentGetDocumentContentByIdResponse> {
    return this.client.sendOperationRequest(
      {
        fileId,
        documentId,
        options
      },
      getDocumentContentByIdOperationSpec,
      callback) as Promise<Models.DocumentGetDocumentContentByIdResponse>;
  }

  /**
   * @summary Get the list of documents.
   * @param requestModel Document filter model.
   * @param [options] The optional parameters
   * @returns Promise<Models.DocumentGetDocumentsResponse>
   */
  getDocuments(requestModel: Models.CyberjusticeLabKernelSharedDocumentModelsDocumentApiRequestData, options?: msRest.RequestOptionsBase): Promise<Models.DocumentGetDocumentsResponse>;
  /**
   * @param requestModel Document filter model.
   * @param callback The callback
   */
  getDocuments(requestModel: Models.CyberjusticeLabKernelSharedDocumentModelsDocumentApiRequestData, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedDocumentModelsDocumentApiResponseData>): void;
  /**
   * @param requestModel Document filter model.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDocuments(requestModel: Models.CyberjusticeLabKernelSharedDocumentModelsDocumentApiRequestData, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedDocumentModelsDocumentApiResponseData>): void;
  getDocuments(requestModel: Models.CyberjusticeLabKernelSharedDocumentModelsDocumentApiRequestData, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedDocumentModelsDocumentApiResponseData>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedDocumentModelsDocumentApiResponseData>): Promise<Models.DocumentGetDocumentsResponse> {
    return this.client.sendOperationRequest(
      {
        requestModel,
        options
      },
      getDocumentsOperationSpec,
      callback) as Promise<Models.DocumentGetDocumentsResponse>;
  }

  /**
   * @summary Create a document.
   * @param documentModel A CreateDocumentModel object.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  createDocument(documentModel: Models.CyberjusticeLabKernelSharedDocumentModelsCreateDocumentModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param documentModel A CreateDocumentModel object.
   * @param callback The callback
   */
  createDocument(documentModel: Models.CyberjusticeLabKernelSharedDocumentModelsCreateDocumentModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param documentModel A CreateDocumentModel object.
   * @param options The optional parameters
   * @param callback The callback
   */
  createDocument(documentModel: Models.CyberjusticeLabKernelSharedDocumentModelsCreateDocumentModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  createDocument(documentModel: Models.CyberjusticeLabKernelSharedDocumentModelsCreateDocumentModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        documentModel,
        options
      },
      createDocumentOperationSpec,
      callback);
  }

  /**
   * @summary Create multiple documents.
   * @param documentModels A {CyberjusticeLab.Kernel.Shared.Document.Models.CreateDocumentsModel}
   * object.
   * @param [options] The optional parameters
   * @returns Promise<Models.DocumentCreateDocumentsResponse>
   */
  createDocuments(documentModels: Models.CyberjusticeLabKernelSharedDocumentModelsCreateDocumentsModel, options?: msRest.RequestOptionsBase): Promise<Models.DocumentCreateDocumentsResponse>;
  /**
   * @param documentModels A {CyberjusticeLab.Kernel.Shared.Document.Models.CreateDocumentsModel}
   * object.
   * @param callback The callback
   */
  createDocuments(documentModels: Models.CyberjusticeLabKernelSharedDocumentModelsCreateDocumentsModel, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedDocumentModelsCreateDocumentsResponseModel>): void;
  /**
   * @param documentModels A {CyberjusticeLab.Kernel.Shared.Document.Models.CreateDocumentsModel}
   * object.
   * @param options The optional parameters
   * @param callback The callback
   */
  createDocuments(documentModels: Models.CyberjusticeLabKernelSharedDocumentModelsCreateDocumentsModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedDocumentModelsCreateDocumentsResponseModel>): void;
  createDocuments(documentModels: Models.CyberjusticeLabKernelSharedDocumentModelsCreateDocumentsModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedDocumentModelsCreateDocumentsResponseModel>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedDocumentModelsCreateDocumentsResponseModel>): Promise<Models.DocumentCreateDocumentsResponse> {
    return this.client.sendOperationRequest(
      {
        documentModels,
        options
      },
      createDocumentsOperationSpec,
      callback) as Promise<Models.DocumentCreateDocumentsResponse>;
  }

  /**
   * @summary Update document content.
   * @param model The document to update.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateDocumentContent(model: Models.CyberjusticeLabKernelSharedDocumentModelsUpdateDocumentContentModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param model The document to update.
   * @param callback The callback
   */
  updateDocumentContent(model: Models.CyberjusticeLabKernelSharedDocumentModelsUpdateDocumentContentModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param model The document to update.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateDocumentContent(model: Models.CyberjusticeLabKernelSharedDocumentModelsUpdateDocumentContentModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateDocumentContent(model: Models.CyberjusticeLabKernelSharedDocumentModelsUpdateDocumentContentModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        model,
        options
      },
      updateDocumentContentOperationSpec,
      callback);
  }

  /**
   * @summary Update a document's metadata.
   * @param model Metadata of a document.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateDocumentMetadata(model: Models.CyberjusticeLabKernelSharedDocumentModelsUpdateDocumentMetadatasModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param model Metadata of a document.
   * @param callback The callback
   */
  updateDocumentMetadata(model: Models.CyberjusticeLabKernelSharedDocumentModelsUpdateDocumentMetadatasModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param model Metadata of a document.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateDocumentMetadata(model: Models.CyberjusticeLabKernelSharedDocumentModelsUpdateDocumentMetadatasModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateDocumentMetadata(model: Models.CyberjusticeLabKernelSharedDocumentModelsUpdateDocumentMetadatasModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        model,
        options
      },
      updateDocumentMetadataOperationSpec,
      callback);
  }

  /**
   * @summary Update a document's attributes.
   * @param attributes List of document attributes.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateDocumentAttributes(attributes: Models.CyberjusticeLabKernelSharedDocumentModelsEditDocumentAttributeModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param attributes List of document attributes.
   * @param callback The callback
   */
  updateDocumentAttributes(attributes: Models.CyberjusticeLabKernelSharedDocumentModelsEditDocumentAttributeModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param attributes List of document attributes.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateDocumentAttributes(attributes: Models.CyberjusticeLabKernelSharedDocumentModelsEditDocumentAttributeModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateDocumentAttributes(attributes: Models.CyberjusticeLabKernelSharedDocumentModelsEditDocumentAttributeModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        attributes,
        options
      },
      updateDocumentAttributesOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const deleteDocumentOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "Document/DELETE/DeleteDocument",
  queryParameters: [
    Parameters.documentId,
    Parameters.fileId0,
    Parameters.currentVersion
  ],
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const deleteDocumentAttributesOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "Document/DELETE/DeleteDocumentAttributes",
  queryParameters: [
    Parameters.documentId
  ],
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const getDocumentsMetadataOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Document/GET/DocumentsMetadata",
  queryParameters: [
    Parameters.fileId0,
    Parameters.titles
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsDocumentDocumentData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getDocumentMetadataOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Document/GET/DocumentMetadata",
  queryParameters: [
    Parameters.documentId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelServiceContractsDocumentDocumentData
    },
    default: {}
  },
  serializer
};

const getDocumentContentByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Document/GET/DocumentContent",
  queryParameters: [
    Parameters.fileId0,
    Parameters.documentId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {}
  },
  serializer
};

const getDocumentsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Document/POST/Documents",
  requestBody: {
    parameterPath: "requestModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedDocumentModelsDocumentApiRequestData,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelSharedDocumentModelsDocumentApiResponseData
    },
    default: {}
  },
  serializer
};

const createDocumentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Document/POST/CreateDocument",
  requestBody: {
    parameterPath: "documentModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedDocumentModelsCreateDocumentModel,
      required: true
    }
  },
  responses: {
    404: {},
    409: {},
    default: {}
  },
  serializer
};

const createDocumentsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Document/POST/CreateDocuments",
  requestBody: {
    parameterPath: "documentModels",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedDocumentModelsCreateDocumentsModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelSharedDocumentModelsCreateDocumentsResponseModel
    },
    default: {}
  },
  serializer
};

const updateDocumentContentOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "Document/PUT/UpdateDocumentContent",
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedDocumentModelsUpdateDocumentContentModel,
      required: true
    }
  },
  responses: {
    404: {},
    default: {}
  },
  serializer
};

const updateDocumentMetadataOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "Document/PUT/UpdateDocumentMetadata",
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedDocumentModelsUpdateDocumentMetadatasModel,
      required: true
    }
  },
  responses: {
    404: {},
    default: {}
  },
  serializer
};

const updateDocumentAttributesOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "Document/PUT/UpdateDocumentAttributes",
  requestBody: {
    parameterPath: "attributes",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedDocumentModelsEditDocumentAttributeModel,
      required: true
    }
  },
  responses: {
    404: {},
    default: {}
  },
  serializer
};
