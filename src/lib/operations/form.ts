/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/formMappers";
import * as Parameters from "../models/parameters";
import { CyberjusticeAPIsContext } from "../cyberjusticeAPIsContext";

/** Class representing a Form. */
export class Form {
  private readonly client: CyberjusticeAPIsContext;

  /**
   * Create a Form.
   * @param {CyberjusticeAPIsContext} client Reference to the service client.
   */
  constructor(client: CyberjusticeAPIsContext) {
    this.client = client;
  }

  /**
   * @summary Return the solution proposal questions for a given form ID.
   * @param formId The ID of the form problem.
   * @param [options] The optional parameters
   * @returns Promise<Models.FormGetFormQuestionProposalResponse>
   */
  getFormQuestionProposal(formId: string, options?: msRest.RequestOptionsBase): Promise<Models.FormGetFormQuestionProposalResponse>;
  /**
   * @param formId The ID of the form problem.
   * @param callback The callback
   */
  getFormQuestionProposal(formId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormQuestionData[]>): void;
  /**
   * @param formId The ID of the form problem.
   * @param options The optional parameters
   * @param callback The callback
   */
  getFormQuestionProposal(formId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormQuestionData[]>): void;
  getFormQuestionProposal(formId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormQuestionData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormQuestionData[]>): Promise<Models.FormGetFormQuestionProposalResponse> {
    return this.client.sendOperationRequest(
      {
        formId,
        options
      },
      getFormQuestionProposalOperationSpec,
      callback) as Promise<Models.FormGetFormQuestionProposalResponse>;
  }

  /**
   * @summary Return the solution proposal questions for a given form code and judicial entity.
   * @param formCode The identification code of the form problem.
   * @param entityId ID of the judicial entity parent of the form.
   * @param [options] The optional parameters
   * @returns Promise<Models.FormGetFormQuestionProposalByCodeResponse>
   */
  getFormQuestionProposalByCode(formCode: string, entityId: string, options?: msRest.RequestOptionsBase): Promise<Models.FormGetFormQuestionProposalByCodeResponse>;
  /**
   * @param formCode The identification code of the form problem.
   * @param entityId ID of the judicial entity parent of the form.
   * @param callback The callback
   */
  getFormQuestionProposalByCode(formCode: string, entityId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormQuestionData[]>): void;
  /**
   * @param formCode The identification code of the form problem.
   * @param entityId ID of the judicial entity parent of the form.
   * @param options The optional parameters
   * @param callback The callback
   */
  getFormQuestionProposalByCode(formCode: string, entityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormQuestionData[]>): void;
  getFormQuestionProposalByCode(formCode: string, entityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormQuestionData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormQuestionData[]>): Promise<Models.FormGetFormQuestionProposalByCodeResponse> {
    return this.client.sendOperationRequest(
      {
        formCode,
        entityId,
        options
      },
      getFormQuestionProposalByCodeOperationSpec,
      callback) as Promise<Models.FormGetFormQuestionProposalByCodeResponse>;
  }

  /**
   * @summary Return the problem description questions for a given form ID.
   * @param formId The ID of the form problem.
   * @param [options] The optional parameters
   * @returns Promise<Models.FormGetFormQuestionDescriptionResponse>
   */
  getFormQuestionDescription(formId: string, options?: msRest.RequestOptionsBase): Promise<Models.FormGetFormQuestionDescriptionResponse>;
  /**
   * @param formId The ID of the form problem.
   * @param callback The callback
   */
  getFormQuestionDescription(formId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormQuestionData[]>): void;
  /**
   * @param formId The ID of the form problem.
   * @param options The optional parameters
   * @param callback The callback
   */
  getFormQuestionDescription(formId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormQuestionData[]>): void;
  getFormQuestionDescription(formId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormQuestionData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormQuestionData[]>): Promise<Models.FormGetFormQuestionDescriptionResponse> {
    return this.client.sendOperationRequest(
      {
        formId,
        options
      },
      getFormQuestionDescriptionOperationSpec,
      callback) as Promise<Models.FormGetFormQuestionDescriptionResponse>;
  }

  /**
   * @summary Return the problem description questions for a given form code and judicial entity.
   * @param formCode The identification code of the form problem.
   * @param entityId ID of the judicial entity parent of the form.
   * @param [options] The optional parameters
   * @returns Promise<Models.FormGetFormQuestionDescriptionByCodeResponse>
   */
  getFormQuestionDescriptionByCode(formCode: string, entityId: string, options?: msRest.RequestOptionsBase): Promise<Models.FormGetFormQuestionDescriptionByCodeResponse>;
  /**
   * @param formCode The identification code of the form problem.
   * @param entityId ID of the judicial entity parent of the form.
   * @param callback The callback
   */
  getFormQuestionDescriptionByCode(formCode: string, entityId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormQuestionData[]>): void;
  /**
   * @param formCode The identification code of the form problem.
   * @param entityId ID of the judicial entity parent of the form.
   * @param options The optional parameters
   * @param callback The callback
   */
  getFormQuestionDescriptionByCode(formCode: string, entityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormQuestionData[]>): void;
  getFormQuestionDescriptionByCode(formCode: string, entityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormQuestionData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormQuestionData[]>): Promise<Models.FormGetFormQuestionDescriptionByCodeResponse> {
    return this.client.sendOperationRequest(
      {
        formCode,
        entityId,
        options
      },
      getFormQuestionDescriptionByCodeOperationSpec,
      callback) as Promise<Models.FormGetFormQuestionDescriptionByCodeResponse>;
  }

  /**
   * @summary Retrieve a queryable collection of the questions draft forms for the given form ID. The
   * form information contains all culture versions.
   * @param formId ID of the draft question form.
   * @param [options] The optional parameters
   * @returns Promise<Models.FormGetDraftQuestionFormResponse>
   */
  getDraftQuestionForm(formId: string, options?: msRest.RequestOptionsBase): Promise<Models.FormGetDraftQuestionFormResponse>;
  /**
   * @param formId ID of the draft question form.
   * @param callback The callback
   */
  getDraftQuestionForm(formId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormData[]>): void;
  /**
   * @param formId ID of the draft question form.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDraftQuestionForm(formId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormData[]>): void;
  getDraftQuestionForm(formId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormData[]>): Promise<Models.FormGetDraftQuestionFormResponse> {
    return this.client.sendOperationRequest(
      {
        formId,
        options
      },
      getDraftQuestionFormOperationSpec,
      callback) as Promise<Models.FormGetDraftQuestionFormResponse>;
  }

  /**
   * @summary Retrieve a queryable collection of the description questions draft forms for the given
   * form ID.
   * @param formId ID of the question form.
   * @param [options] The optional parameters
   * @returns Promise<Models.FormGetDraftQuestionDescriptionFormResponse>
   */
  getDraftQuestionDescriptionForm(formId: string, options?: msRest.RequestOptionsBase): Promise<Models.FormGetDraftQuestionDescriptionFormResponse>;
  /**
   * @param formId ID of the question form.
   * @param callback The callback
   */
  getDraftQuestionDescriptionForm(formId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormQuestionData[]>): void;
  /**
   * @param formId ID of the question form.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDraftQuestionDescriptionForm(formId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormQuestionData[]>): void;
  getDraftQuestionDescriptionForm(formId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormQuestionData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormQuestionData[]>): Promise<Models.FormGetDraftQuestionDescriptionFormResponse> {
    return this.client.sendOperationRequest(
      {
        formId,
        options
      },
      getDraftQuestionDescriptionFormOperationSpec,
      callback) as Promise<Models.FormGetDraftQuestionDescriptionFormResponse>;
  }

  /**
   * @summary Retrieve a queryable collection of the proposal questions draft forms for the given
   * form ID.
   * @param formId ID of the question form.
   * @param [options] The optional parameters
   * @returns Promise<Models.FormGetDraftQuestionProposalFormResponse>
   */
  getDraftQuestionProposalForm(formId: string, options?: msRest.RequestOptionsBase): Promise<Models.FormGetDraftQuestionProposalFormResponse>;
  /**
   * @param formId ID of the question form.
   * @param callback The callback
   */
  getDraftQuestionProposalForm(formId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormQuestionData[]>): void;
  /**
   * @param formId ID of the question form.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDraftQuestionProposalForm(formId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormQuestionData[]>): void;
  getDraftQuestionProposalForm(formId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormQuestionData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormQuestionData[]>): Promise<Models.FormGetDraftQuestionProposalFormResponse> {
    return this.client.sendOperationRequest(
      {
        formId,
        options
      },
      getDraftQuestionProposalFormOperationSpec,
      callback) as Promise<Models.FormGetDraftQuestionProposalFormResponse>;
  }

  /**
   * @summary Returns the party problem description corresponding to a given party in a given file.
   * @param fileId Id of the judicial file.
   * @param partyId Id of the party.
   * @param [options] The optional parameters
   * @returns Promise<Models.FormGetPartyQuestionDescriptionResponse>
   */
  getPartyQuestionDescription(fileId: string, partyId: string, options?: msRest.RequestOptionsBase): Promise<Models.FormGetPartyQuestionDescriptionResponse>;
  /**
   * @param fileId Id of the judicial file.
   * @param partyId Id of the party.
   * @param callback The callback
   */
  getPartyQuestionDescription(fileId: string, partyId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormPartyDescriptionData>): void;
  /**
   * @param fileId Id of the judicial file.
   * @param partyId Id of the party.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPartyQuestionDescription(fileId: string, partyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormPartyDescriptionData>): void;
  getPartyQuestionDescription(fileId: string, partyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormPartyDescriptionData>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormPartyDescriptionData>): Promise<Models.FormGetPartyQuestionDescriptionResponse> {
    return this.client.sendOperationRequest(
      {
        fileId,
        partyId,
        options
      },
      getPartyQuestionDescriptionOperationSpec,
      callback) as Promise<Models.FormGetPartyQuestionDescriptionResponse>;
  }

  /**
   * @summary Returns the list of party problem descriptions made by all parties in a given file.
   * @param fileId The ID of the judicial file.
   * @param [options] The optional parameters
   * @returns Promise<Models.FormGetPartyQuestionDescriptionsResponse>
   */
  getPartyQuestionDescriptions(fileId: string, options?: msRest.RequestOptionsBase): Promise<Models.FormGetPartyQuestionDescriptionsResponse>;
  /**
   * @param fileId The ID of the judicial file.
   * @param callback The callback
   */
  getPartyQuestionDescriptions(fileId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormPartyDescriptionData[]>): void;
  /**
   * @param fileId The ID of the judicial file.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPartyQuestionDescriptions(fileId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormPartyDescriptionData[]>): void;
  getPartyQuestionDescriptions(fileId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormPartyDescriptionData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormPartyDescriptionData[]>): Promise<Models.FormGetPartyQuestionDescriptionsResponse> {
    return this.client.sendOperationRequest(
      {
        fileId,
        options
      },
      getPartyQuestionDescriptionsOperationSpec,
      callback) as Promise<Models.FormGetPartyQuestionDescriptionsResponse>;
  }

  /**
   * @summary Returns the solution proposal made by the given party of the given Judicial File.
   * @param fileId Id of the judicial file.
   * @param partyId Id of the party.
   * @param [options] The optional parameters
   * @returns Promise<Models.FormGetPartyQuestionProposalResponse>
   */
  getPartyQuestionProposal(fileId: string, partyId: string, options?: msRest.RequestOptionsBase): Promise<Models.FormGetPartyQuestionProposalResponse>;
  /**
   * @param fileId Id of the judicial file.
   * @param partyId Id of the party.
   * @param callback The callback
   */
  getPartyQuestionProposal(fileId: string, partyId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormPartyProposalData>): void;
  /**
   * @param fileId Id of the judicial file.
   * @param partyId Id of the party.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPartyQuestionProposal(fileId: string, partyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormPartyProposalData>): void;
  getPartyQuestionProposal(fileId: string, partyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormPartyProposalData>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormPartyProposalData>): Promise<Models.FormGetPartyQuestionProposalResponse> {
    return this.client.sendOperationRequest(
      {
        fileId,
        partyId,
        options
      },
      getPartyQuestionProposalOperationSpec,
      callback) as Promise<Models.FormGetPartyQuestionProposalResponse>;
  }

  /**
   * @summary Returns the list of the last proposal made by each party in a given judicial file.
   * @param fileId Id of the judicial file.
   * @param [options] The optional parameters
   * @returns Promise<Models.FormGetPartyQuestionProposalsResponse>
   */
  getPartyQuestionProposals(fileId: string, options?: msRest.RequestOptionsBase): Promise<Models.FormGetPartyQuestionProposalsResponse>;
  /**
   * @param fileId Id of the judicial file.
   * @param callback The callback
   */
  getPartyQuestionProposals(fileId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormPartyProposalData[]>): void;
  /**
   * @param fileId Id of the judicial file.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPartyQuestionProposals(fileId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormPartyProposalData[]>): void;
  getPartyQuestionProposals(fileId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormPartyProposalData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormPartyProposalData[]>): Promise<Models.FormGetPartyQuestionProposalsResponse> {
    return this.client.sendOperationRequest(
      {
        fileId,
        options
      },
      getPartyQuestionProposalsOperationSpec,
      callback) as Promise<Models.FormGetPartyQuestionProposalsResponse>;
  }

  /**
   * @summary Returns the number of proposals made by the parties of a given file after the start of
   * the negotiation.
   * @param fileId Id of the judicial file.
   * @param [options] The optional parameters
   * @returns Promise<Models.FormGetPartyQuestionProposalCountResponse>
   */
  getPartyQuestionProposalCount(fileId: string, options?: msRest.RequestOptionsBase): Promise<Models.FormGetPartyQuestionProposalCountResponse>;
  /**
   * @param fileId Id of the judicial file.
   * @param callback The callback
   */
  getPartyQuestionProposalCount(fileId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormPartyQuestionProposalCountData[]>): void;
  /**
   * @param fileId Id of the judicial file.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPartyQuestionProposalCount(fileId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormPartyQuestionProposalCountData[]>): void;
  getPartyQuestionProposalCount(fileId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormPartyQuestionProposalCountData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormPartyQuestionProposalCountData[]>): Promise<Models.FormGetPartyQuestionProposalCountResponse> {
    return this.client.sendOperationRequest(
      {
        fileId,
        options
      },
      getPartyQuestionProposalCountOperationSpec,
      callback) as Promise<Models.FormGetPartyQuestionProposalCountResponse>;
  }

  /**
   * @summary Returns the list of all proposals made by the parties in a given judicial file.
   * @param fileId Id of the judicial file.
   * @param [options] The optional parameters
   * @returns Promise<Models.FormGetPartyArchiveQuestionProposalsResponse>
   */
  getPartyArchiveQuestionProposals(fileId: string, options?: msRest.RequestOptionsBase): Promise<Models.FormGetPartyArchiveQuestionProposalsResponse>;
  /**
   * @param fileId Id of the judicial file.
   * @param callback The callback
   */
  getPartyArchiveQuestionProposals(fileId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormPartyProposalData[]>): void;
  /**
   * @param fileId Id of the judicial file.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPartyArchiveQuestionProposals(fileId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormPartyProposalData[]>): void;
  getPartyArchiveQuestionProposals(fileId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormPartyProposalData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsFormFormPartyProposalData[]>): Promise<Models.FormGetPartyArchiveQuestionProposalsResponse> {
    return this.client.sendOperationRequest(
      {
        fileId,
        options
      },
      getPartyArchiveQuestionProposalsOperationSpec,
      callback) as Promise<Models.FormGetPartyArchiveQuestionProposalsResponse>;
  }

  /**
   * @summary Get the draft question forms
   * @param requestModel Request filter model.
   * @param [options] The optional parameters
   * @returns Promise<Models.FormGetDraftQuestionFormsResponse>
   */
  getDraftQuestionForms(requestModel: Models.CyberjusticeLabKernelSharedFormModelsQuestionFormApiRequestData, options?: msRest.RequestOptionsBase): Promise<Models.FormGetDraftQuestionFormsResponse>;
  /**
   * @param requestModel Request filter model.
   * @param callback The callback
   */
  getDraftQuestionForms(requestModel: Models.CyberjusticeLabKernelSharedFormModelsQuestionFormApiRequestData, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedFormModelsQuestionFormApiResponseData>): void;
  /**
   * @param requestModel Request filter model.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDraftQuestionForms(requestModel: Models.CyberjusticeLabKernelSharedFormModelsQuestionFormApiRequestData, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedFormModelsQuestionFormApiResponseData>): void;
  getDraftQuestionForms(requestModel: Models.CyberjusticeLabKernelSharedFormModelsQuestionFormApiRequestData, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedFormModelsQuestionFormApiResponseData>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedFormModelsQuestionFormApiResponseData>): Promise<Models.FormGetDraftQuestionFormsResponse> {
    return this.client.sendOperationRequest(
      {
        requestModel,
        options
      },
      getDraftQuestionFormsOperationSpec,
      callback) as Promise<Models.FormGetDraftQuestionFormsResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getFormQuestionProposalOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Form/GET/FormQuestionProposals",
  queryParameters: [
    Parameters.formId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsFormFormQuestionData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getFormQuestionProposalByCodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Form/GET/FormQuestionProposalsByCode",
  queryParameters: [
    Parameters.formCode,
    Parameters.entityId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsFormFormQuestionData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getFormQuestionDescriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Form/GET/FormQuestionDescriptions",
  queryParameters: [
    Parameters.formId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsFormFormQuestionData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getFormQuestionDescriptionByCodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Form/GET/FormQuestionDescriptionsByCode",
  queryParameters: [
    Parameters.formCode,
    Parameters.entityId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsFormFormQuestionData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getDraftQuestionFormOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Form/GET/DraftQuestionForms",
  queryParameters: [
    Parameters.formId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsFormFormData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getDraftQuestionDescriptionFormOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Form/GET/DraftQuestionDescriptionForm",
  queryParameters: [
    Parameters.formId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsFormFormQuestionData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getDraftQuestionProposalFormOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Form/GET/DraftQuestionProposalForm",
  queryParameters: [
    Parameters.formId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsFormFormQuestionData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getPartyQuestionDescriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Form/GET/PartyQuestionDescription",
  queryParameters: [
    Parameters.fileId1,
    Parameters.partyId0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelServiceContractsFormFormPartyDescriptionData
    },
    default: {}
  },
  serializer
};

const getPartyQuestionDescriptionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Form/GET/PartyQuestionDescriptions",
  queryParameters: [
    Parameters.fileId1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsFormFormPartyDescriptionData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getPartyQuestionProposalOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Form/GET/PartyQuestionProposal",
  queryParameters: [
    Parameters.fileId1,
    Parameters.partyId0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelServiceContractsFormFormPartyProposalData
    },
    default: {}
  },
  serializer
};

const getPartyQuestionProposalsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Form/GET/PartyQuestionProposals",
  queryParameters: [
    Parameters.fileId1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsFormFormPartyProposalData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getPartyQuestionProposalCountOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Form/GET/PartyQuestionProposalCounts",
  queryParameters: [
    Parameters.fileId1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsFormPartyQuestionProposalCountData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getPartyArchiveQuestionProposalsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Form/GET/PartyArchiveQuestionProposals",
  queryParameters: [
    Parameters.fileId1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsFormFormPartyProposalData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getDraftQuestionFormsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Form/POST/DraftQuestionForms",
  requestBody: {
    parameterPath: "requestModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedFormModelsQuestionFormApiRequestData,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelSharedFormModelsQuestionFormApiResponseData
    },
    default: {}
  },
  serializer
};
