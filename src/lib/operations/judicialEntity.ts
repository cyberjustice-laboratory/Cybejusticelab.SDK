/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/judicialEntityMappers";
import * as Parameters from "../models/parameters";
import { CyberjusticeAPIsContext } from "../cyberjusticeAPIsContext";

/** Class representing a JudicialEntity. */
export class JudicialEntity {
  private readonly client: CyberjusticeAPIsContext;

  /**
   * Create a JudicialEntity.
   * @param {CyberjusticeAPIsContext} client Reference to the service client.
   */
  constructor(client: CyberjusticeAPIsContext) {
    this.client = client;
  }

  /**
   * @summary Return the judicial entity configuration.
   * @param jEId ID of the judicial entity.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialEntityGetJudicialEntityCompleteInfosResponse>
   */
  getJudicialEntityCompleteInfos(jEId: string, options?: msRest.RequestOptionsBase): Promise<Models.JudicialEntityGetJudicialEntityCompleteInfosResponse>;
  /**
   * @param jEId ID of the judicial entity.
   * @param callback The callback
   */
  getJudicialEntityCompleteInfos(jEId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialEntityJudicialEntityData>): void;
  /**
   * @param jEId ID of the judicial entity.
   * @param options The optional parameters
   * @param callback The callback
   */
  getJudicialEntityCompleteInfos(jEId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialEntityJudicialEntityData>): void;
  getJudicialEntityCompleteInfos(jEId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialEntityJudicialEntityData>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsJudicialEntityJudicialEntityData>): Promise<Models.JudicialEntityGetJudicialEntityCompleteInfosResponse> {
    return this.client.sendOperationRequest(
      {
        jEId,
        options
      },
      getJudicialEntityCompleteInfosOperationSpec,
      callback) as Promise<Models.JudicialEntityGetJudicialEntityCompleteInfosResponse>;
  }

  /**
   * @summary Return the judicial entity ID.
   * @param urn URN of the judicial entity.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialEntityGetJudicialEntityResponse>
   */
  getJudicialEntity(urn: string, options?: msRest.RequestOptionsBase): Promise<Models.JudicialEntityGetJudicialEntityResponse>;
  /**
   * @param urn URN of the judicial entity.
   * @param callback The callback
   */
  getJudicialEntity(urn: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param urn URN of the judicial entity.
   * @param options The optional parameters
   * @param callback The callback
   */
  getJudicialEntity(urn: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  getJudicialEntity(urn: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.JudicialEntityGetJudicialEntityResponse> {
    return this.client.sendOperationRequest(
      {
        urn,
        options
      },
      getJudicialEntityOperationSpec,
      callback) as Promise<Models.JudicialEntityGetJudicialEntityResponse>;
  }

  /**
   * @summary Get the list of matters.
   * @param requestModel Request filter model.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialEntityGetMattersResponse>
   */
  getMatters(requestModel: Models.CyberjusticeLabKernelSharedJudicialEntityModelsMatterApiRequestData, options?: msRest.RequestOptionsBase): Promise<Models.JudicialEntityGetMattersResponse>;
  /**
   * @param requestModel Request filter model.
   * @param callback The callback
   */
  getMatters(requestModel: Models.CyberjusticeLabKernelSharedJudicialEntityModelsMatterApiRequestData, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialEntityModelsMatterApiResponseData>): void;
  /**
   * @param requestModel Request filter model.
   * @param options The optional parameters
   * @param callback The callback
   */
  getMatters(requestModel: Models.CyberjusticeLabKernelSharedJudicialEntityModelsMatterApiRequestData, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialEntityModelsMatterApiResponseData>): void;
  getMatters(requestModel: Models.CyberjusticeLabKernelSharedJudicialEntityModelsMatterApiRequestData, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialEntityModelsMatterApiResponseData>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialEntityModelsMatterApiResponseData>): Promise<Models.JudicialEntityGetMattersResponse> {
    return this.client.sendOperationRequest(
      {
        requestModel,
        options
      },
      getMattersOperationSpec,
      callback) as Promise<Models.JudicialEntityGetMattersResponse>;
  }

  /**
   * @summary Get the list of judicial entity associated with a Matter.
   * @param requestModel Request filter model.
   * @param [options] The optional parameters
   * @returns Promise<Models.JudicialEntityGetJudicialEntitiesResponse>
   */
  getJudicialEntities(requestModel: Models.CyberjusticeLabKernelSharedJudicialEntityModelsJudicialEntityApiRequestData, options?: msRest.RequestOptionsBase): Promise<Models.JudicialEntityGetJudicialEntitiesResponse>;
  /**
   * @param requestModel Request filter model.
   * @param callback The callback
   */
  getJudicialEntities(requestModel: Models.CyberjusticeLabKernelSharedJudicialEntityModelsJudicialEntityApiRequestData, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialEntityModelsJudicialEntityApiResponseData>): void;
  /**
   * @param requestModel Request filter model.
   * @param options The optional parameters
   * @param callback The callback
   */
  getJudicialEntities(requestModel: Models.CyberjusticeLabKernelSharedJudicialEntityModelsJudicialEntityApiRequestData, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialEntityModelsJudicialEntityApiResponseData>): void;
  getJudicialEntities(requestModel: Models.CyberjusticeLabKernelSharedJudicialEntityModelsJudicialEntityApiRequestData, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialEntityModelsJudicialEntityApiResponseData>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedJudicialEntityModelsJudicialEntityApiResponseData>): Promise<Models.JudicialEntityGetJudicialEntitiesResponse> {
    return this.client.sendOperationRequest(
      {
        requestModel,
        options
      },
      getJudicialEntitiesOperationSpec,
      callback) as Promise<Models.JudicialEntityGetJudicialEntitiesResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getJudicialEntityCompleteInfosOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialEntity/GET/JudicialEntityCompleteInfos",
  queryParameters: [
    Parameters.jEId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelServiceContractsJudicialEntityJudicialEntityData
    },
    default: {}
  },
  serializer
};

const getJudicialEntityOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "JudicialEntity/GET/JudicialEntityId",
  queryParameters: [
    Parameters.urn
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    default: {}
  },
  serializer
};

const getMattersOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "JudicialEntity/POST/Matters",
  requestBody: {
    parameterPath: "requestModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialEntityModelsMatterApiRequestData,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelSharedJudicialEntityModelsMatterApiResponseData
    },
    default: {}
  },
  serializer
};

const getJudicialEntitiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "JudicialEntity/POST/JudicialEntities",
  requestBody: {
    parameterPath: "requestModel",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedJudicialEntityModelsJudicialEntityApiRequestData,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelSharedJudicialEntityModelsJudicialEntityApiResponseData
    },
    default: {}
  },
  serializer
};
