/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/locationMappers";
import * as Parameters from "../models/parameters";
import { CyberjusticeAPIsContext } from "../cyberjusticeAPIsContext";

/** Class representing a Location. */
export class Location {
  private readonly client: CyberjusticeAPIsContext;

  /**
   * Create a Location.
   * @param {CyberjusticeAPIsContext} client Reference to the service client.
   */
  constructor(client: CyberjusticeAPIsContext) {
    this.client = client;
  }

  /**
   * Leave the optional filter parameters to their default, null or empty lists to ignore them.
   * List filters that only contains 1 element are optimized.
   * @summary Get all the buildings. Optional filter parameters can be used.
   * @param [options] The optional parameters
   * @returns Promise<Models.LocationGetBuildingsResponse>
   */
  getBuildings(options?: Models.LocationGetBuildingsOptionalParams): Promise<Models.LocationGetBuildingsResponse>;
  /**
   * @param callback The callback
   */
  getBuildings(callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedLocationLocationBuildingData[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBuildings(options: Models.LocationGetBuildingsOptionalParams, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedLocationLocationBuildingData[]>): void;
  getBuildings(options?: Models.LocationGetBuildingsOptionalParams | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedLocationLocationBuildingData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedLocationLocationBuildingData[]>): Promise<Models.LocationGetBuildingsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBuildingsOperationSpec,
      callback) as Promise<Models.LocationGetBuildingsResponse>;
  }

  /**
   * @summary Get a specific building.
   * @param buildingId The building Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.LocationGetBuildingResponse>
   */
  getBuilding(buildingId: string, options?: msRest.RequestOptionsBase): Promise<Models.LocationGetBuildingResponse>;
  /**
   * @param buildingId The building Id.
   * @param callback The callback
   */
  getBuilding(buildingId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedLocationLocationBuildingData>): void;
  /**
   * @param buildingId The building Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  getBuilding(buildingId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedLocationLocationBuildingData>): void;
  getBuilding(buildingId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedLocationLocationBuildingData>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedLocationLocationBuildingData>): Promise<Models.LocationGetBuildingResponse> {
    return this.client.sendOperationRequest(
      {
        buildingId,
        options
      },
      getBuildingOperationSpec,
      callback) as Promise<Models.LocationGetBuildingResponse>;
  }

  /**
   * @summary Get a specific building that contains the given room.
   * @param roomId The room id.
   * @param [options] The optional parameters
   * @returns Promise<Models.LocationGetBuildingWithRoomResponse>
   */
  getBuildingWithRoom(roomId: string, options?: msRest.RequestOptionsBase): Promise<Models.LocationGetBuildingWithRoomResponse>;
  /**
   * @param roomId The room id.
   * @param callback The callback
   */
  getBuildingWithRoom(roomId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedLocationLocationBuildingData>): void;
  /**
   * @param roomId The room id.
   * @param options The optional parameters
   * @param callback The callback
   */
  getBuildingWithRoom(roomId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedLocationLocationBuildingData>): void;
  getBuildingWithRoom(roomId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedLocationLocationBuildingData>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedLocationLocationBuildingData>): Promise<Models.LocationGetBuildingWithRoomResponse> {
    return this.client.sendOperationRequest(
      {
        roomId,
        options
      },
      getBuildingWithRoomOperationSpec,
      callback) as Promise<Models.LocationGetBuildingWithRoomResponse>;
  }

  /**
   * @summary Toggle the building's LocationStatus enum between active and inactive. Use this instead
   * of delete.
   * @param buildingId The building's Id.
   * @param modifiedTicks The modified date ticks.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  toggleBuildingStatus(buildingId: string, modifiedTicks: number, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param buildingId The building's Id.
   * @param modifiedTicks The modified date ticks.
   * @param callback The callback
   */
  toggleBuildingStatus(buildingId: string, modifiedTicks: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param buildingId The building's Id.
   * @param modifiedTicks The modified date ticks.
   * @param options The optional parameters
   * @param callback The callback
   */
  toggleBuildingStatus(buildingId: string, modifiedTicks: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  toggleBuildingStatus(buildingId: string, modifiedTicks: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        buildingId,
        modifiedTicks,
        options
      },
      toggleBuildingStatusOperationSpec,
      callback);
  }

  /**
   * @summary Toggle the rooms's LocationStatus enum between active and inactive. Use this instead of
   * delete.
   * @param roomId The room's Id.
   * @param modifiedTicks The modified date ticks.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  toggleRoomStatus(roomId: string, modifiedTicks: number, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param roomId The room's Id.
   * @param modifiedTicks The modified date ticks.
   * @param callback The callback
   */
  toggleRoomStatus(roomId: string, modifiedTicks: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param roomId The room's Id.
   * @param modifiedTicks The modified date ticks.
   * @param options The optional parameters
   * @param callback The callback
   */
  toggleRoomStatus(roomId: string, modifiedTicks: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  toggleRoomStatus(roomId: string, modifiedTicks: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        roomId,
        modifiedTicks,
        options
      },
      toggleRoomStatusOperationSpec,
      callback);
  }

  /**
   * @summary Update a building.
   * @param buildingData A {CyberjusticeLab.Kernel.Shared.Location.LocationBuildingUpdateData}
   * object.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateBuilding(buildingData: Models.CyberjusticeLabKernelSharedLocationLocationBuildingUpdateData, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param buildingData A {CyberjusticeLab.Kernel.Shared.Location.LocationBuildingUpdateData}
   * object.
   * @param callback The callback
   */
  updateBuilding(buildingData: Models.CyberjusticeLabKernelSharedLocationLocationBuildingUpdateData, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param buildingData A {CyberjusticeLab.Kernel.Shared.Location.LocationBuildingUpdateData}
   * object.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateBuilding(buildingData: Models.CyberjusticeLabKernelSharedLocationLocationBuildingUpdateData, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateBuilding(buildingData: Models.CyberjusticeLabKernelSharedLocationLocationBuildingUpdateData, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        buildingData,
        options
      },
      updateBuildingOperationSpec,
      callback);
  }

  /**
   * @summary Update a room.
   * @param roomData A {CyberjusticeLab.Kernel.Shared.Location.LocationRoomUpdateData} object.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateRoom(roomData: Models.CyberjusticeLabKernelSharedLocationLocationRoomUpdateData, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param roomData A {CyberjusticeLab.Kernel.Shared.Location.LocationRoomUpdateData} object.
   * @param callback The callback
   */
  updateRoom(roomData: Models.CyberjusticeLabKernelSharedLocationLocationRoomUpdateData, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param roomData A {CyberjusticeLab.Kernel.Shared.Location.LocationRoomUpdateData} object.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateRoom(roomData: Models.CyberjusticeLabKernelSharedLocationLocationRoomUpdateData, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateRoom(roomData: Models.CyberjusticeLabKernelSharedLocationLocationRoomUpdateData, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        roomData,
        options
      },
      updateRoomOperationSpec,
      callback);
  }

  /**
   * @summary Create a building.
   * @param buildingData A {CyberjusticeLab.Kernel.Shared.Location.LocationBuildingCreateData}
   * object.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  createBuilding(buildingData: Models.CyberjusticeLabKernelSharedLocationLocationBuildingCreateData, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param buildingData A {CyberjusticeLab.Kernel.Shared.Location.LocationBuildingCreateData}
   * object.
   * @param callback The callback
   */
  createBuilding(buildingData: Models.CyberjusticeLabKernelSharedLocationLocationBuildingCreateData, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param buildingData A {CyberjusticeLab.Kernel.Shared.Location.LocationBuildingCreateData}
   * object.
   * @param options The optional parameters
   * @param callback The callback
   */
  createBuilding(buildingData: Models.CyberjusticeLabKernelSharedLocationLocationBuildingCreateData, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  createBuilding(buildingData: Models.CyberjusticeLabKernelSharedLocationLocationBuildingCreateData, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        buildingData,
        options
      },
      createBuildingOperationSpec,
      callback);
  }

  /**
   * @summary Create a room.
   * @param roomData A {CyberjusticeLab.Kernel.Shared.Location.LocationRoomCreateData} object.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  createRoom(roomData: Models.CyberjusticeLabKernelSharedLocationLocationRoomCreateData, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param roomData A {CyberjusticeLab.Kernel.Shared.Location.LocationRoomCreateData} object.
   * @param callback The callback
   */
  createRoom(roomData: Models.CyberjusticeLabKernelSharedLocationLocationRoomCreateData, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param roomData A {CyberjusticeLab.Kernel.Shared.Location.LocationRoomCreateData} object.
   * @param options The optional parameters
   * @param callback The callback
   */
  createRoom(roomData: Models.CyberjusticeLabKernelSharedLocationLocationRoomCreateData, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  createRoom(roomData: Models.CyberjusticeLabKernelSharedLocationLocationRoomCreateData, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        roomData,
        options
      },
      createRoomOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getBuildingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Location/GET/Buildings",
  queryParameters: [
    Parameters.locationBuildingIds,
    Parameters.locationRoomIds,
    Parameters.judicialEntityIds,
    Parameters.names0,
    Parameters.activeOnly,
    Parameters.take0,
    Parameters.skip,
    Parameters.orderBy
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelSharedLocationLocationBuildingData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getBuildingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Location/GET/Building",
  queryParameters: [
    Parameters.buildingId0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelSharedLocationLocationBuildingData
    },
    default: {}
  },
  serializer
};

const getBuildingWithRoomOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Location/GET/BuildingWithRoom",
  queryParameters: [
    Parameters.roomId0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelSharedLocationLocationBuildingData
    },
    default: {}
  },
  serializer
};

const toggleBuildingStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "Location/PATCH/ToggleBuildingStatus",
  queryParameters: [
    Parameters.buildingId1,
    Parameters.modifiedTicks
  ],
  responses: {
    404: {},
    409: {},
    default: {}
  },
  serializer
};

const toggleRoomStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "Location/PATCH/ToggleRoomStatus",
  queryParameters: [
    Parameters.roomId1,
    Parameters.modifiedTicks
  ],
  responses: {
    404: {},
    409: {},
    default: {}
  },
  serializer
};

const updateBuildingOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "Location/PUT/UpdateBuilding",
  requestBody: {
    parameterPath: "buildingData",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedLocationLocationBuildingUpdateData,
      required: true
    }
  },
  responses: {
    400: {},
    404: {},
    409: {},
    default: {}
  },
  serializer
};

const updateRoomOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "Location/PUT/UpdateRoom",
  requestBody: {
    parameterPath: "roomData",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedLocationLocationRoomUpdateData,
      required: true
    }
  },
  responses: {
    400: {},
    404: {},
    409: {},
    default: {}
  },
  serializer
};

const createBuildingOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Location/POST/CreateBuilding",
  requestBody: {
    parameterPath: "buildingData",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedLocationLocationBuildingCreateData,
      required: true
    }
  },
  responses: {
    400: {},
    404: {},
    default: {}
  },
  serializer
};

const createRoomOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Location/POST/CreateRoom",
  requestBody: {
    parameterPath: "roomData",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedLocationLocationRoomCreateData,
      required: true
    }
  },
  responses: {
    400: {},
    404: {},
    default: {}
  },
  serializer
};
