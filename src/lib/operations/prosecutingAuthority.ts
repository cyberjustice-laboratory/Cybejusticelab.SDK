/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/prosecutingAuthorityMappers";
import * as Parameters from "../models/parameters";
import { CyberjusticeAPIsContext } from "../cyberjusticeAPIsContext";

/** Class representing a ProsecutingAuthority. */
export class ProsecutingAuthority {
  private readonly client: CyberjusticeAPIsContext;

  /**
   * Create a ProsecutingAuthority.
   * @param {CyberjusticeAPIsContext} client Reference to the service client.
   */
  constructor(client: CyberjusticeAPIsContext) {
    this.client = client;
  }

  /**
   * @summary Delete a prosecuting authority.
   * @param id Prosecuting authority id.
   * @param modifiedTicks Modified date in ticks.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteProsecutingAuthority(id: string, modifiedTicks: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param id Prosecuting authority id.
   * @param modifiedTicks Modified date in ticks.
   * @param callback The callback
   */
  deleteProsecutingAuthority(id: string, modifiedTicks: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id Prosecuting authority id.
   * @param modifiedTicks Modified date in ticks.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteProsecutingAuthority(id: string, modifiedTicks: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteProsecutingAuthority(id: string, modifiedTicks: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        modifiedTicks,
        options
      },
      deleteProsecutingAuthorityOperationSpec,
      callback);
  }

  /**
   * @summary Delete a prosecuting authority delegation.
   * @param authorityDelegation A
   * {CyberjusticeLab.Kernel.Shared.ProsecutingAuthority.ProsecutingAuthorityDelegationDeleteData}
   * object.
   * @param modifiedTicks Modified date in ticks.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteProsecutingAuthorityDelegation(authorityDelegation: Models.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityDelegationDeleteData, modifiedTicks: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param authorityDelegation A
   * {CyberjusticeLab.Kernel.Shared.ProsecutingAuthority.ProsecutingAuthorityDelegationDeleteData}
   * object.
   * @param modifiedTicks Modified date in ticks.
   * @param callback The callback
   */
  deleteProsecutingAuthorityDelegation(authorityDelegation: Models.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityDelegationDeleteData, modifiedTicks: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param authorityDelegation A
   * {CyberjusticeLab.Kernel.Shared.ProsecutingAuthority.ProsecutingAuthorityDelegationDeleteData}
   * object.
   * @param modifiedTicks Modified date in ticks.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteProsecutingAuthorityDelegation(authorityDelegation: Models.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityDelegationDeleteData, modifiedTicks: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteProsecutingAuthorityDelegation(authorityDelegation: Models.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityDelegationDeleteData, modifiedTicks: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        authorityDelegation,
        modifiedTicks,
        options
      },
      deleteProsecutingAuthorityDelegationOperationSpec,
      callback);
  }

  /**
   * @summary Get all prosecuting authorities available for the context.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProsecutingAuthorityGetProsecutingAuthoritiesResponse>
   */
  getProsecutingAuthorities(options?: Models.ProsecutingAuthorityGetProsecutingAuthoritiesOptionalParams): Promise<Models.ProsecutingAuthorityGetProsecutingAuthoritiesResponse>;
  /**
   * @param callback The callback
   */
  getProsecutingAuthorities(callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityData[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getProsecutingAuthorities(options: Models.ProsecutingAuthorityGetProsecutingAuthoritiesOptionalParams, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityData[]>): void;
  getProsecutingAuthorities(options?: Models.ProsecutingAuthorityGetProsecutingAuthoritiesOptionalParams | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityData[]>): Promise<Models.ProsecutingAuthorityGetProsecutingAuthoritiesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getProsecutingAuthoritiesOperationSpec,
      callback) as Promise<Models.ProsecutingAuthorityGetProsecutingAuthoritiesResponse>;
  }

  /**
   * @summary Get the count of all prosecuting authorities available for the context.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProsecutingAuthorityGetProsecutingAuthoritiesCountResponse>
   */
  getProsecutingAuthoritiesCount(options?: msRest.RequestOptionsBase): Promise<Models.ProsecutingAuthorityGetProsecutingAuthoritiesCountResponse>;
  /**
   * @param callback The callback
   */
  getProsecutingAuthoritiesCount(callback: msRest.ServiceCallback<number>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getProsecutingAuthoritiesCount(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number>): void;
  getProsecutingAuthoritiesCount(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<number>, callback?: msRest.ServiceCallback<number>): Promise<Models.ProsecutingAuthorityGetProsecutingAuthoritiesCountResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getProsecutingAuthoritiesCountOperationSpec,
      callback) as Promise<Models.ProsecutingAuthorityGetProsecutingAuthoritiesCountResponse>;
  }

  /**
   * @summary Update a prosecuting authority.
   * @param authority A
   * {CyberjusticeLab.Kernel.Shared.ProsecutingAuthority.ProsecutingAuthorityUpdateData} object.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateProsecutingAuthority(authority: Models.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityUpdateData, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param authority A
   * {CyberjusticeLab.Kernel.Shared.ProsecutingAuthority.ProsecutingAuthorityUpdateData} object.
   * @param callback The callback
   */
  updateProsecutingAuthority(authority: Models.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityUpdateData, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param authority A
   * {CyberjusticeLab.Kernel.Shared.ProsecutingAuthority.ProsecutingAuthorityUpdateData} object.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateProsecutingAuthority(authority: Models.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityUpdateData, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateProsecutingAuthority(authority: Models.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityUpdateData, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        authority,
        options
      },
      updateProsecutingAuthorityOperationSpec,
      callback);
  }

  /**
   * @summary Create a new prosecuting authority.
   * @param authority A
   * {CyberjusticeLab.Kernel.Shared.ProsecutingAuthority.ProsecutingAuthorityCreateData} object.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  createProsecutingAuthority(authority: Models.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityCreateData, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param authority A
   * {CyberjusticeLab.Kernel.Shared.ProsecutingAuthority.ProsecutingAuthorityCreateData} object.
   * @param callback The callback
   */
  createProsecutingAuthority(authority: Models.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityCreateData, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param authority A
   * {CyberjusticeLab.Kernel.Shared.ProsecutingAuthority.ProsecutingAuthorityCreateData} object.
   * @param options The optional parameters
   * @param callback The callback
   */
  createProsecutingAuthority(authority: Models.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityCreateData, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  createProsecutingAuthority(authority: Models.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityCreateData, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        authority,
        options
      },
      createProsecutingAuthorityOperationSpec,
      callback);
  }

  /**
   * @summary Create a new prosecuting authority delegation.
   * @param authorityDelegation A
   * {CyberjusticeLab.Kernel.Shared.ProsecutingAuthority.ProsecutingAuthorityDelegationCreateData}
   * object.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  createProsecutingAuthorityDelegation(authorityDelegation: Models.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityDelegationCreateData, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param authorityDelegation A
   * {CyberjusticeLab.Kernel.Shared.ProsecutingAuthority.ProsecutingAuthorityDelegationCreateData}
   * object.
   * @param callback The callback
   */
  createProsecutingAuthorityDelegation(authorityDelegation: Models.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityDelegationCreateData, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param authorityDelegation A
   * {CyberjusticeLab.Kernel.Shared.ProsecutingAuthority.ProsecutingAuthorityDelegationCreateData}
   * object.
   * @param options The optional parameters
   * @param callback The callback
   */
  createProsecutingAuthorityDelegation(authorityDelegation: Models.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityDelegationCreateData, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  createProsecutingAuthorityDelegation(authorityDelegation: Models.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityDelegationCreateData, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        authorityDelegation,
        options
      },
      createProsecutingAuthorityDelegationOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const deleteProsecutingAuthorityOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "ProsecutingAuthority/DELETE/DeleteProsecutingAuthority",
  queryParameters: [
    Parameters.id0,
    Parameters.modifiedTicks
  ],
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const deleteProsecutingAuthorityDelegationOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "ProsecutingAuthority/DELETE/DeleteProsecutingAuthorityDelegation",
  queryParameters: [
    Parameters.modifiedTicks
  ],
  requestBody: {
    parameterPath: "authorityDelegation",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityDelegationDeleteData,
      required: true
    }
  },
  responses: {
    400: {},
    404: {},
    default: {}
  },
  serializer
};

const getProsecutingAuthoritiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "ProsecutingAuthority/GET/ProsecutingAuthorities",
  queryParameters: [
    Parameters.prosecutingAuthorityIds,
    Parameters.excludedProsecutingAuthorityIds,
    Parameters.prosecutingAuthorityNames
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getProsecutingAuthoritiesCountOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "ProsecutingAuthority/GET/ProsecutingAuthoritiesCount",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {}
  },
  serializer
};

const updateProsecutingAuthorityOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "ProsecutingAuthority/PUT/UpdateProsecutingAuthority",
  requestBody: {
    parameterPath: "authority",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityUpdateData,
      required: true
    }
  },
  responses: {
    400: {},
    404: {},
    409: {},
    default: {}
  },
  serializer
};

const createProsecutingAuthorityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "ProsecutingAuthority/POST/CreateProsecutingAuthority",
  requestBody: {
    parameterPath: "authority",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityCreateData,
      required: true
    }
  },
  responses: {
    400: {},
    404: {},
    default: {}
  },
  serializer
};

const createProsecutingAuthorityDelegationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "ProsecutingAuthority/POST/CreateProsecutingAuthorityDelegation",
  requestBody: {
    parameterPath: "authorityDelegation",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedProsecutingAuthorityProsecutingAuthorityDelegationCreateData,
      required: true
    }
  },
  responses: {
    400: {},
    404: {},
    default: {}
  },
  serializer
};
