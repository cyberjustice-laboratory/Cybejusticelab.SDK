/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/userMappers";
import { CyberjusticeAPIsContext } from "../cyberjusticeAPIsContext";

/** Class representing a User. */
export class User {
  private readonly client: CyberjusticeAPIsContext;

  /**
   * Create a User.
   * @param {CyberjusticeAPIsContext} client Reference to the service client.
   */
  constructor(client: CyberjusticeAPIsContext) {
    this.client = client;
  }

  /**
   * @summary Return user profiles depending on the current realm (organization).
   * @param [options] The optional parameters
   * @returns Promise<Models.UserGetCurrentRealmUsersResponse>
   */
  getCurrentRealmUsers(options?: msRest.RequestOptionsBase): Promise<Models.UserGetCurrentRealmUsersResponse>;
  /**
   * @param callback The callback
   */
  getCurrentRealmUsers(callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsUserUserData[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getCurrentRealmUsers(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsUserUserData[]>): void;
  getCurrentRealmUsers(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsUserUserData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsUserUserData[]>): Promise<Models.UserGetCurrentRealmUsersResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getCurrentRealmUsersOperationSpec,
      callback) as Promise<Models.UserGetCurrentRealmUsersResponse>;
  }

  /**
   * @summary Return all the organizations.
   * @param [options] The optional parameters
   * @returns Promise<Models.UserGetOrganizationsResponse>
   */
  getOrganizations(options?: msRest.RequestOptionsBase): Promise<Models.UserGetOrganizationsResponse>;
  /**
   * @param callback The callback
   */
  getOrganizations(callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsUserOrganizationData[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getOrganizations(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsUserOrganizationData[]>): void;
  getOrganizations(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsUserOrganizationData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelServiceContractsUserOrganizationData[]>): Promise<Models.UserGetOrganizationsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getOrganizationsOperationSpec,
      callback) as Promise<Models.UserGetOrganizationsResponse>;
  }

  /**
   * @summary Return all the organizations summary.
   * @param [options] The optional parameters
   * @returns Promise<Models.UserGetOrganizationsSummariesResponse>
   */
  getOrganizationsSummaries(options?: msRest.RequestOptionsBase): Promise<Models.UserGetOrganizationsSummariesResponse>;
  /**
   * @param callback The callback
   */
  getOrganizationsSummaries(callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedUserModelsOrganizationSummaryModel[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getOrganizationsSummaries(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedUserModelsOrganizationSummaryModel[]>): void;
  getOrganizationsSummaries(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedUserModelsOrganizationSummaryModel[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedUserModelsOrganizationSummaryModel[]>): Promise<Models.UserGetOrganizationsSummariesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getOrganizationsSummariesOperationSpec,
      callback) as Promise<Models.UserGetOrganizationsSummariesResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getCurrentRealmUsersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "User/GET/CurrentRealmUsers",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsUserUserData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getOrganizationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "User/GET/Organizations",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelServiceContractsUserOrganizationData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getOrganizationsSummariesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "User/GET/OrganizationsSummaries",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelSharedUserModelsOrganizationSummaryModel"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};
