/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/tagMappers";
import * as Parameters from "../models/parameters";
import { CyberjusticeAPIsContext } from "../cyberjusticeAPIsContext";

/** Class representing a Tag. */
export class Tag {
  private readonly client: CyberjusticeAPIsContext;

  /**
   * Create a Tag.
   * @param {CyberjusticeAPIsContext} client Reference to the service client.
   */
  constructor(client: CyberjusticeAPIsContext) {
    this.client = client;
  }

  /**
   * @summary Get the labels for the current user's role.
   * @param cultureCode The application's current culture code for localization.
   * @param labelSection The label section.
   * @param judicialEntityId The judicial entity identifier.
   * @param [options] The optional parameters
   * @returns Promise<Models.TagGetLabelsOfCurrentUserResponse>
   */
  getLabelsOfCurrentUser(cultureCode: string, labelSection: string, judicialEntityId: string, options?: msRest.RequestOptionsBase): Promise<Models.TagGetLabelsOfCurrentUserResponse>;
  /**
   * @param cultureCode The application's current culture code for localization.
   * @param labelSection The label section.
   * @param judicialEntityId The judicial entity identifier.
   * @param callback The callback
   */
  getLabelsOfCurrentUser(cultureCode: string, labelSection: string, judicialEntityId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagLocalizedLabelData[]>): void;
  /**
   * @param cultureCode The application's current culture code for localization.
   * @param labelSection The label section.
   * @param judicialEntityId The judicial entity identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  getLabelsOfCurrentUser(cultureCode: string, labelSection: string, judicialEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagLocalizedLabelData[]>): void;
  getLabelsOfCurrentUser(cultureCode: string, labelSection: string, judicialEntityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagLocalizedLabelData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagLocalizedLabelData[]>): Promise<Models.TagGetLabelsOfCurrentUserResponse> {
    return this.client.sendOperationRequest(
      {
        cultureCode,
        labelSection,
        judicialEntityId,
        options
      },
      getLabelsOfCurrentUserOperationSpec,
      callback) as Promise<Models.TagGetLabelsOfCurrentUserResponse>;
  }

  /**
   * @summary Get the tag links of the given objects codes.
   * @param codes The application's current culture code for localization.
   * @param [options] The optional parameters
   * @returns Promise<Models.TagGetTagsOfCodesResponse>
   */
  getTagsOfCodes(codes: string[], options?: msRest.RequestOptionsBase): Promise<Models.TagGetTagsOfCodesResponse>;
  /**
   * @param codes The application's current culture code for localization.
   * @param callback The callback
   */
  getTagsOfCodes(codes: string[], callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagTagLinkData[]>): void;
  /**
   * @param codes The application's current culture code for localization.
   * @param options The optional parameters
   * @param callback The callback
   */
  getTagsOfCodes(codes: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagTagLinkData[]>): void;
  getTagsOfCodes(codes: string[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagTagLinkData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagTagLinkData[]>): Promise<Models.TagGetTagsOfCodesResponse> {
    return this.client.sendOperationRequest(
      {
        codes,
        options
      },
      getTagsOfCodesOperationSpec,
      callback) as Promise<Models.TagGetTagsOfCodesResponse>;
  }

  /**
   * @summary Get all tags.
   * @param [options] The optional parameters
   * @returns Promise<Models.TagGetTagsResponse>
   */
  getTags(options?: Models.TagGetTagsOptionalParams): Promise<Models.TagGetTagsResponse>;
  /**
   * @param callback The callback
   */
  getTags(callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagTagData[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getTags(options: Models.TagGetTagsOptionalParams, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagTagData[]>): void;
  getTags(options?: Models.TagGetTagsOptionalParams | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagTagData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagTagData[]>): Promise<Models.TagGetTagsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getTagsOperationSpec,
      callback) as Promise<Models.TagGetTagsResponse>;
  }

  /**
   * @summary Get a specific tag.
   * @param key The unique identifier of the requested object.
   * @param [options] The optional parameters
   * @returns Promise<Models.TagGetTagResponse>
   */
  getTag(key: string, options?: msRest.RequestOptionsBase): Promise<Models.TagGetTagResponse>;
  /**
   * @param key The unique identifier of the requested object.
   * @param callback The callback
   */
  getTag(key: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagTagData>): void;
  /**
   * @param key The unique identifier of the requested object.
   * @param options The optional parameters
   * @param callback The callback
   */
  getTag(key: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagTagData>): void;
  getTag(key: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagTagData>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagTagData>): Promise<Models.TagGetTagResponse> {
    return this.client.sendOperationRequest(
      {
        key,
        options
      },
      getTagOperationSpec,
      callback) as Promise<Models.TagGetTagResponse>;
  }

  /**
   * @summary Get all tag links.
   * @param [options] The optional parameters
   * @returns Promise<Models.TagGetTagLinksResponse>
   */
  getTagLinks(options?: Models.TagGetTagLinksOptionalParams): Promise<Models.TagGetTagLinksResponse>;
  /**
   * @param callback The callback
   */
  getTagLinks(callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagTagLinkData[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getTagLinks(options: Models.TagGetTagLinksOptionalParams, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagTagLinkData[]>): void;
  getTagLinks(options?: Models.TagGetTagLinksOptionalParams | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagTagLinkData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagTagLinkData[]>): Promise<Models.TagGetTagLinksResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getTagLinksOperationSpec,
      callback) as Promise<Models.TagGetTagLinksResponse>;
  }

  /**
   * @summary Get a specific tag link.
   * @param tagId The composite unique tag identifier of the requested object.
   * @param code The composite unique identifier of the requested object.
   * @param [options] The optional parameters
   * @returns Promise<Models.TagGetTagLinkResponse>
   */
  getTagLink(tagId: string, code: string, options?: msRest.RequestOptionsBase): Promise<Models.TagGetTagLinkResponse>;
  /**
   * @param tagId The composite unique tag identifier of the requested object.
   * @param code The composite unique identifier of the requested object.
   * @param callback The callback
   */
  getTagLink(tagId: string, code: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagTagLinkData>): void;
  /**
   * @param tagId The composite unique tag identifier of the requested object.
   * @param code The composite unique identifier of the requested object.
   * @param options The optional parameters
   * @param callback The callback
   */
  getTagLink(tagId: string, code: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagTagLinkData>): void;
  getTagLink(tagId: string, code: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagTagLinkData>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagTagLinkData>): Promise<Models.TagGetTagLinkResponse> {
    return this.client.sendOperationRequest(
      {
        tagId,
        code,
        options
      },
      getTagLinkOperationSpec,
      callback) as Promise<Models.TagGetTagLinkResponse>;
  }

  /**
   * @summary Get all labels.
   * @param [options] The optional parameters
   * @returns Promise<Models.TagGetLabelsResponse>
   */
  getLabels(options?: msRest.RequestOptionsBase): Promise<Models.TagGetLabelsResponse>;
  /**
   * @param callback The callback
   */
  getLabels(callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagLabelData[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getLabels(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagLabelData[]>): void;
  getLabels(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagLabelData[]>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagLabelData[]>): Promise<Models.TagGetLabelsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getLabelsOperationSpec,
      callback) as Promise<Models.TagGetLabelsResponse>;
  }

  /**
   * @summary Get a specific label.
   * @param labelId The unique label identifier of the requested object.
   * @param [options] The optional parameters
   * @returns Promise<Models.TagGetLabelResponse>
   */
  getLabel(labelId: string, options?: msRest.RequestOptionsBase): Promise<Models.TagGetLabelResponse>;
  /**
   * @param labelId The unique label identifier of the requested object.
   * @param callback The callback
   */
  getLabel(labelId: string, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagLabelData>): void;
  /**
   * @param labelId The unique label identifier of the requested object.
   * @param options The optional parameters
   * @param callback The callback
   */
  getLabel(labelId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagLabelData>): void;
  getLabel(labelId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagLabelData>, callback?: msRest.ServiceCallback<Models.CyberjusticeLabKernelSharedTagLabelData>): Promise<Models.TagGetLabelResponse> {
    return this.client.sendOperationRequest(
      {
        labelId,
        options
      },
      getLabelOperationSpec,
      callback) as Promise<Models.TagGetLabelResponse>;
  }

  /**
   * @summary Update a tag link.
   * @param tagLink Data updated {CyberjusticeLab.Kernel.Shared.Tag.TagLinkUpdateData} object.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateTagLink(tagLink: Models.CyberjusticeLabKernelSharedTagTagLinkUpdateData, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param tagLink Data updated {CyberjusticeLab.Kernel.Shared.Tag.TagLinkUpdateData} object.
   * @param callback The callback
   */
  updateTagLink(tagLink: Models.CyberjusticeLabKernelSharedTagTagLinkUpdateData, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param tagLink Data updated {CyberjusticeLab.Kernel.Shared.Tag.TagLinkUpdateData} object.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateTagLink(tagLink: Models.CyberjusticeLabKernelSharedTagTagLinkUpdateData, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateTagLink(tagLink: Models.CyberjusticeLabKernelSharedTagTagLinkUpdateData, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        tagLink,
        options
      },
      updateTagLinkOperationSpec,
      callback);
  }

  /**
   * @summary Update a label. This method also updates contained localization objects.
   * @param label Data updated {CyberjusticeLab.Kernel.Shared.Tag.LabelUpdateData} object.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateLabel(label: Models.CyberjusticeLabKernelSharedTagLabelUpdateData, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param label Data updated {CyberjusticeLab.Kernel.Shared.Tag.LabelUpdateData} object.
   * @param callback The callback
   */
  updateLabel(label: Models.CyberjusticeLabKernelSharedTagLabelUpdateData, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param label Data updated {CyberjusticeLab.Kernel.Shared.Tag.LabelUpdateData} object.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateLabel(label: Models.CyberjusticeLabKernelSharedTagLabelUpdateData, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateLabel(label: Models.CyberjusticeLabKernelSharedTagLabelUpdateData, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        label,
        options
      },
      updateLabelOperationSpec,
      callback);
  }

  /**
   * @summary Create a new tag link.
   * @param tagLink Data source {CyberjusticeLab.Kernel.Shared.Tag.TagLinkCreateData} object.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  createTagLink(tagLink: Models.CyberjusticeLabKernelSharedTagTagLinkCreateData, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param tagLink Data source {CyberjusticeLab.Kernel.Shared.Tag.TagLinkCreateData} object.
   * @param callback The callback
   */
  createTagLink(tagLink: Models.CyberjusticeLabKernelSharedTagTagLinkCreateData, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param tagLink Data source {CyberjusticeLab.Kernel.Shared.Tag.TagLinkCreateData} object.
   * @param options The optional parameters
   * @param callback The callback
   */
  createTagLink(tagLink: Models.CyberjusticeLabKernelSharedTagTagLinkCreateData, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  createTagLink(tagLink: Models.CyberjusticeLabKernelSharedTagTagLinkCreateData, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        tagLink,
        options
      },
      createTagLinkOperationSpec,
      callback);
  }

  /**
   * @summary Create a label.
   * @param label Data source {CyberjusticeLab.Kernel.Shared.Tag.LabelCreateData} object.
   * @param [options] The optional parameters
   * @returns Promise<Models.TagCreateLabelResponse>
   */
  createLabel(label: Models.CyberjusticeLabKernelSharedTagLabelCreateData, options?: msRest.RequestOptionsBase): Promise<Models.TagCreateLabelResponse>;
  /**
   * @param label Data source {CyberjusticeLab.Kernel.Shared.Tag.LabelCreateData} object.
   * @param callback The callback
   */
  createLabel(label: Models.CyberjusticeLabKernelSharedTagLabelCreateData, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param label Data source {CyberjusticeLab.Kernel.Shared.Tag.LabelCreateData} object.
   * @param options The optional parameters
   * @param callback The callback
   */
  createLabel(label: Models.CyberjusticeLabKernelSharedTagLabelCreateData, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  createLabel(label: Models.CyberjusticeLabKernelSharedTagLabelCreateData, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.TagCreateLabelResponse> {
    return this.client.sendOperationRequest(
      {
        label,
        options
      },
      createLabelOperationSpec,
      callback) as Promise<Models.TagCreateLabelResponse>;
  }

  /**
   * @summary Create a Tag-Label link.
   * @param tagId The tag identifier.
   * @param labelId The label identifier.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  createTagLabelLink(tagId: string, labelId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param tagId The tag identifier.
   * @param labelId The label identifier.
   * @param callback The callback
   */
  createTagLabelLink(tagId: string, labelId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param tagId The tag identifier.
   * @param labelId The label identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  createTagLabelLink(tagId: string, labelId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  createTagLabelLink(tagId: string, labelId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        tagId,
        labelId,
        options
      },
      createTagLabelLinkOperationSpec,
      callback);
  }

  /**
   * @summary Create a LabelRoleLink.
   * @param labelId The label identifier.
   * @param roleCode The role code.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  createLabelRoleLink(labelId: string, roleCode: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param labelId The label identifier.
   * @param roleCode The role code.
   * @param callback The callback
   */
  createLabelRoleLink(labelId: string, roleCode: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param labelId The label identifier.
   * @param roleCode The role code.
   * @param options The optional parameters
   * @param callback The callback
   */
  createLabelRoleLink(labelId: string, roleCode: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  createLabelRoleLink(labelId: string, roleCode: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        labelId,
        roleCode,
        options
      },
      createLabelRoleLinkOperationSpec,
      callback);
  }

  /**
   * @summary Delete a tag link.
   * @param objectCode The external linked object's code.
   * @param tagId The tag identifier.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteTagLink(objectCode: string, tagId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param objectCode The external linked object's code.
   * @param tagId The tag identifier.
   * @param callback The callback
   */
  deleteTagLink(objectCode: string, tagId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param objectCode The external linked object's code.
   * @param tagId The tag identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteTagLink(objectCode: string, tagId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteTagLink(objectCode: string, tagId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        objectCode,
        tagId,
        options
      },
      deleteTagLinkOperationSpec,
      callback);
  }

  /**
   * @summary Delete a label.
   * @param labelId The identifier of the label to delete.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteLabel(labelId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param labelId The identifier of the label to delete.
   * @param callback The callback
   */
  deleteLabel(labelId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param labelId The identifier of the label to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteLabel(labelId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteLabel(labelId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        labelId,
        options
      },
      deleteLabelOperationSpec,
      callback);
  }

  /**
   * @summary Delete a Tag-Label link.
   * @param tagId The tag identifier.
   * @param labelId The label identifier.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteTagLabelLink(tagId: string, labelId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param tagId The tag identifier.
   * @param labelId The label identifier.
   * @param callback The callback
   */
  deleteTagLabelLink(tagId: string, labelId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param tagId The tag identifier.
   * @param labelId The label identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteTagLabelLink(tagId: string, labelId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteTagLabelLink(tagId: string, labelId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        tagId,
        labelId,
        options
      },
      deleteTagLabelLinkOperationSpec,
      callback);
  }

  /**
   * @summary Delete a LabelRoleLink.
   * @param labelId The label identifier.
   * @param roleCode The role code.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteLabelRoleLink(labelId: string, roleCode: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param labelId The label identifier.
   * @param roleCode The role code.
   * @param callback The callback
   */
  deleteLabelRoleLink(labelId: string, roleCode: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param labelId The label identifier.
   * @param roleCode The role code.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteLabelRoleLink(labelId: string, roleCode: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteLabelRoleLink(labelId: string, roleCode: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        labelId,
        roleCode,
        options
      },
      deleteLabelRoleLinkOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getLabelsOfCurrentUserOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Tag/GET/LabelsOfCurrentUser",
  queryParameters: [
    Parameters.cultureCode,
    Parameters.labelSection,
    Parameters.judicialEntityId1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelSharedTagLocalizedLabelData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getTagsOfCodesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Tag/GET/TagsOfCodes",
  queryParameters: [
    Parameters.codes0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelSharedTagTagLinkData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getTagsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Tag/GET/Tags",
  queryParameters: [
    Parameters.tagCodes
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelSharedTagTagData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getTagOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Tag/GET/Tag",
  queryParameters: [
    Parameters.key
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelSharedTagTagData
    },
    default: {}
  },
  serializer
};

const getTagLinksOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Tag/GET/TagLinks",
  queryParameters: [
    Parameters.codes1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelSharedTagTagLinkData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getTagLinkOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Tag/GET/TagLink",
  queryParameters: [
    Parameters.tagId,
    Parameters.code
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelSharedTagTagLinkData
    },
    default: {}
  },
  serializer
};

const getLabelsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Tag/GET/Labels",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CyberjusticeLabKernelSharedTagLabelData"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getLabelOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Tag/GET/Label",
  queryParameters: [
    Parameters.labelId1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CyberjusticeLabKernelSharedTagLabelData
    },
    default: {}
  },
  serializer
};

const updateTagLinkOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "Tag/PUT/UpdateTagLink",
  requestBody: {
    parameterPath: "tagLink",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedTagTagLinkUpdateData,
      required: true
    }
  },
  responses: {
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const updateLabelOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "Tag/PUT/UpdateLabel",
  requestBody: {
    parameterPath: "label",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedTagLabelUpdateData,
      required: true
    }
  },
  responses: {
    404: {},
    default: {}
  },
  serializer
};

const createTagLinkOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Tag/POST/CreateTagLink",
  requestBody: {
    parameterPath: "tagLink",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedTagTagLinkCreateData,
      required: true
    }
  },
  responses: {
    400: {},
    404: {},
    default: {}
  },
  serializer
};

const createLabelOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Tag/POST/CreateLabel",
  requestBody: {
    parameterPath: "label",
    mapper: {
      ...Mappers.CyberjusticeLabKernelSharedTagLabelCreateData,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    default: {}
  },
  serializer
};

const createTagLabelLinkOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Tag/POST/CreateTagLabelLink",
  queryParameters: [
    Parameters.tagId,
    Parameters.labelId1
  ],
  responses: {
    404: {},
    default: {}
  },
  serializer
};

const createLabelRoleLinkOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Tag/POST/CreateLabelRoleLink",
  queryParameters: [
    Parameters.labelId1,
    Parameters.roleCode
  ],
  responses: {
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const deleteTagLinkOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "Tag/DELETE/DeleteTagLink",
  queryParameters: [
    Parameters.objectCode,
    Parameters.tagId
  ],
  responses: {
    404: {},
    default: {}
  },
  serializer
};

const deleteLabelOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "Tag/DELETE/DeleteLabel",
  queryParameters: [
    Parameters.labelId1
  ],
  responses: {
    404: {},
    default: {}
  },
  serializer
};

const deleteTagLabelLinkOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "Tag/DELETE/DeleteTagLabelLink",
  queryParameters: [
    Parameters.tagId,
    Parameters.labelId1
  ],
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const deleteLabelRoleLinkOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "Tag/DELETE/DeleteLabelRoleLink",
  queryParameters: [
    Parameters.labelId1,
    Parameters.roleCode
  ],
  responses: {
    204: {},
    default: {}
  },
  serializer
};
